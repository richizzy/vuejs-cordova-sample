{
    "fields" : {
      "policyNumber" : {
        "type" : "STRING",
        "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
        "referenceName" : "policyNumber",
        "validationRules" : [ ],
        "required" : "true"
      },
      "policyDeliverTo" : {
        "type" : "ENUM",
        "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
        "referenceName" : "policyDeliverTo",
        "validationRules" : [ ],
        "required" : "true",
        "defaultValue" : "INSURED",
        "possibleValues" : [ {
          "value" : "INSURED",
          "displayValue" : "Insured"
        } ]
      },
      "policyDeliveryMethod" : {
        "type" : "ENUM",
        "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
        "referenceName" : "policyDeliveryMethod",
        "validationRules" : [ ],
        "required" : "true",
        "defaultValue" : "EMAIL",
        "possibleValues" : [ {
          "value" : "EMAIL",
          "displayValue" : "Email"
        } ]
      },
      "premiumNoticeDeliveryMethod" : {
        "type" : "ENUM",
        "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
        "referenceName" : "premiumNoticeDeliveryMethod",
        "validationRules" : [ ],
        "required" : "false",
        "possibleValues" : [ {
          "value" : "EMAIL",
          "displayValue" : "Email"
        }, {
          "value" : "MAIL",
          "displayValue" : "Mail"
        } ]
      },
      "discountAssociationGroup" : {
        "type" : "ENUM",
        "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
        "referenceName" : "discountAssociationGroup",
        "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var value = true;\n    if (pmrl.equal(parent.discountAssociationGroup, 'YES') && pmrl.equal(parent.additionalFields.specialRestrictionEmployee, 'STUDENT')) {\n      value = 'Discounts are not allowed with the Student Program.';\n    }\n    return value;\n  });\n}" ],
        "required" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.equal(context, 'ADMIN')) {\n      value = true;\n    }\n    return value;\n  });\n}",
        "possibleValues" : [ {
          "value" : "YES",
          "displayValue" : "Yes"
        }, {
          "value" : "NO",
          "displayValue" : "No"
        } ]
      },
      "discountCommonEmployer" : {
        "type" : "ENUM",
        "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
        "referenceName" : "discountCommonEmployer",
        "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var value = true;\n    if (pmrl.equal(parent.discountCommonEmployer, 'YES') && pmrl.equal(parent.additionalFields.specialRestrictionEmployee, 'STUDENT')) {\n      value = 'Discounts are not allowed with the Student Program.';\n    }\n    return value;\n  });\n}" ],
        "required" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.equal(context, 'ADMIN')) {\n      value = true;\n    }\n    return value;\n  });\n}",
        "possibleValues" : [ {
          "value" : "YES",
          "displayValue" : "Yes"
        }, {
          "value" : "NO",
          "displayValue" : "No"
        } ]
      },
      "discountSelfEmployed" : {
        "type" : "ENUM",
        "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
        "referenceName" : "discountSelfEmployed",
        "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var value = true;\n    if (pmrl.equal(parent.discountSelfEmployed, 'YES') && pmrl.equal(parent.additionalFields.specialRestrictionEmployee, 'STUDENT')) {\n      value = 'Discounts are not allowed with the Student Program.';\n    }\n    return value;\n  });\n}" ],
        "required" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.equal(context, 'ADMIN')) {\n      value = true;\n    }\n    return value;\n  });\n}",
        "possibleValues" : [ {
          "value" : "YES",
          "displayValue" : "Yes"
        }, {
          "value" : "NO",
          "displayValue" : "No"
        } ]
      },
      "discountMultiPolicy" : {
        "type" : "ENUM",
        "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
        "referenceName" : "discountMultiPolicy",
        "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var value = true;\n    if (pmrl.equal(parent.discountMultiPolicy, 'YES') && pmrl.equal(parent.additionalFields.specialRestrictionEmployee, 'STUDENT')) {\n      value = 'Discounts are not allowed with the Student Program.';\n    }\n    return value;\n  });\n}" ],
        "required" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.equal(context, 'ADMIN')) {\n      value = true;\n    }\n    return value;\n  });\n}",
        "possibleValues" : [ {
          "value" : "YES",
          "displayValue" : "Yes"
        }, {
          "value" : "NO",
          "displayValue" : "No"
        } ]
      },
      "discountHousehold" : {
        "type" : "ENUM",
        "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
        "referenceName" : "discountHousehold",
        "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var value = true;\n    if (pmrl.equal(parent.discountHousehold, 'YES') && pmrl.equal(parent.additionalFields.specialRestrictionEmployee, 'STUDENT')) {\n      value = 'Discounts are not allowed with the Student Program.';\n    }\n    return value;\n  });\n}" ],
        "required" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.equal(context, 'ADMIN')) {\n      value = true;\n    }\n    return value;\n  });\n}",
        "possibleValues" : [ {
          "value" : "YES",
          "displayValue" : "Yes"
        }, {
          "value" : "NO",
          "displayValue" : "No"
        } ]
      },
      "sellingProducers" : {
        "type" : "LIST",
        "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
        "referenceName" : "sellingProducers",
        "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.sellingProducers), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.sellingProducers), Big('3'));\n  });\n}" ],
        "objectFields" : {
          "applicationSignature" : {
            "type" : "OBJECT",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "sellingProducers.applicationSignature",
            "validationRules" : [ ],
            "objectFields" : {
              "signatureType" : {
                "type" : "ENUM",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "sellingProducers.applicationSignature.signatureType",
                "validationRules" : [ ],
                "required" : "false",
                "possibleValues" : [ {
                  "value" : "ELECTRONIC",
                  "displayValue" : "Electronic"
                }, {
                  "value" : "VOICE",
                  "displayValue" : "Voice"
                }, {
                  "value" : "PAPER",
                  "displayValue" : "Paper"
                } ]
              },
              "signatureName" : {
                "type" : "STRING",
                "contexts" : [ "APPLICATION" ],
                "referenceName" : "sellingProducers.applicationSignature.signatureName",
                "validationRules" : [ ],
                "required" : "false"
              },
              "signatureCity" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "sellingProducers.applicationSignature.signatureCity",
                "validationRules" : [ ],
                "required" : "false"
              },
              "signatureState" : {
                "type" : "LOOKUP",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "sellingProducers.applicationSignature.signatureState",
                "validationRules" : [ ],
                "required" : "false",
                "tableName" : "stateTbl",
                "column" : "state"
              },
              "signatureDate" : {
                "type" : "DATE",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "sellingProducers.applicationSignature.signatureDate",
                "validationRules" : [ ],
                "required" : "false"
              },
              "signatureTimestamp" : {
                "type" : "DATETIME",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "sellingProducers.applicationSignature.signatureTimestamp",
                "validationRules" : [ ],
                "required" : "false"
              }
            }
          },
          "firstName" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "sellingProducers.firstName",
            "validationRules" : [ ],
            "required" : "true",
            "format" : "[a-zA-Z' -]+"
          },
          "middleName" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "sellingProducers.middleName",
            "validationRules" : [ ],
            "required" : "false",
            "format" : "[a-zA-Z]+"
          },
          "lastName" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "sellingProducers.lastName",
            "validationRules" : [ ],
            "required" : "true",
            "format" : "[a-zA-Z' -]+"
          },
          "additionalFields" : {
            "type" : "OBJECT",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "sellingProducers.additionalFields",
            "validationRules" : [ ],
            "objectFields" : {
              "commentsInstructions" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "sellingProducers.additionalFields.commentsInstructions",
                "validationRules" : [ ],
                "required" : "false"
              },
              "sellingProducersFullName" : {
                "type" : "STRING",
                "contexts" : [ "APPLICATION" ],
                "referenceName" : "sellingProducers.additionalFields.sellingProducersFullName",
                "validationRules" : [ ],
                "required" : "false",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var value = '';\n    if (pmrl.isDefined(parent.parent.firstName)) {\n      value = pmrl.concat(pmrl.concat(value, ''), parent.parent.firstName);\n    }\n    if (pmrl.isDefined(parent.parent.middleName)) {\n      value = pmrl.concat(pmrl.concat(value, ' '), parent.parent.middleName);\n    }\n    if (pmrl.isDefined(parent.parent.lastName)) {\n      value = pmrl.concat(pmrl.concat(value, ' '), parent.parent.lastName);\n    }\n    return value;\n  });\n}"
              },
              "officePhoneNumber" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "sellingProducers.additionalFields.officePhoneNumber",
                "validationRules" : [ ],
                "required" : "false"
              },
              "contactName" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "sellingProducers.additionalFields.contactName",
                "validationRules" : [ ],
                "required" : "false"
              },
              "contactPhone" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "sellingProducers.additionalFields.contactPhone",
                "validationRules" : [ ],
                "required" : "false"
              },
              "contactEmail" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "sellingProducers.additionalFields.contactEmail",
                "validationRules" : [ ],
                "required" : "false",
                "format" : "[a-zA-Z0-9!#$%&'*+-/=?^_`{|}~.]+[@]+[a-zA-Z0-9!#$%&'*+-/=?^_`{|}~.]+[.]+[a-zA-Z0-9!#$%&'*+-/=?^_`{|}~.]+"
              },
              "lastFourOfSocial" : {
                "type" : "NUMBER",
                "contexts" : [ "APPLICATION" ],
                "referenceName" : "sellingProducers.additionalFields.lastFourOfSocial",
                "validationRules" : [ ],
                "required" : "false"
              },
              "producerHierarchyName" : {
                "type" : "STRING",
                "contexts" : [ "ADMIN", "APPLICATION" ],
                "referenceName" : "sellingProducers.additionalFields.producerHierarchyName",
                "validationRules" : [ ],
                "required" : "false"
              }
            }
          },
          "producerType" : {
            "type" : "ENUM",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "sellingProducers.producerType",
            "validationRules" : [ ],
            "required" : "false",
            "possibleValues" : [ {
              "value" : "BROKER",
              "displayValue" : "Broker"
            }, {
              "value" : "AGENT",
              "displayValue" : "Agent"
            } ]
          },
          "producerNumber" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "sellingProducers.producerNumber",
            "validationRules" : [ ],
            "required" : "true"
          },
          "commissionPercentShare" : {
            "type" : "NUMBER",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "sellingProducers.commissionPercentShare",
            "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var value;\n    if (pmrl.greaterThan(pmrl.length(parent.parent.sellingProducers), Big('0')) && pmrl.lessThan(pmrl.length(parent.parent.sellingProducers), Big('2'))) {\n      if (pmrl.equal(pmrl.toNumber(parent.parent.sellingProducers[Big('0')].commissionPercentShare), Big('100'))) {\n        value = true;\n      } else {\n        value = 'Commission percentage must total to 100%';\n      }\n    } else if (pmrl.greaterThan(pmrl.length(parent.parent.sellingProducers), Big('1')) && pmrl.lessThan(pmrl.length(parent.parent.sellingProducers), Big('3'))) {\n      if (pmrl.equal(pmrl.plus(parent.parent.sellingProducers[Big('0')].commissionPercentShare, parent.parent.sellingProducers[Big('1')].commissionPercentShare), Big('100'))) {\n        value = true;\n      } else {\n        value = 'Commission percentage must total to 100%';\n      }\n    } else {\n      if (pmrl.equal(pmrl.plus(pmrl.plus(parent.parent.sellingProducers[Big('0')].commissionPercentShare, parent.parent.sellingProducers[Big('1')].commissionPercentShare), parent.parent.sellingProducers[Big('2')].commissionPercentShare), Big('100'))) {\n        value = true;\n      } else {\n        value = 'Commission percentage must total to 100%';\n      }\n    }\n    return value;\n  });\n}" ],
            "required" : "true"
          },
          "producerHierarchyId" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "sellingProducers.producerHierarchyId",
            "validationRules" : [ ],
            "required" : "false"
          }
        },
        "minItemCount" : "1",
        "maxItemCount" : "3"
      },
      "businessPurpose" : {
        "type" : "ENUM",
        "contexts" : [ "APPLICATION" ],
        "referenceName" : "businessPurpose",
        "validationRules" : [ ],
        "required" : "false",
        "defaultValue" : "NEW_BUSINESS",
        "possibleValues" : [ {
          "value" : "NEW_BUSINESS",
          "displayValue" : "New Business"
        } ]
      },
      "policyRenewability" : {
        "type" : "ENUM",
        "contexts" : [ "QUOTE", "ADMIN", "APPLICATION" ],
        "referenceName" : "policyRenewability",
        "validationRules" : [ ],
        "required" : "true",
        "defaultValue" : "GUARANTEED_RENEWABLE",
        "possibleValues" : [ {
          "value" : "GUARANTEED_RENEWABLE",
          "displayValue" : "Guaranteed Renewable"
        } ]
      },
      "paymentToken" : {
        "type" : "STRING",
        "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
        "referenceName" : "paymentToken",
        "validationRules" : [ ],
        "required" : "false"
      },
      "paymentSchedule" : {
        "type" : "ENUM",
        "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
        "referenceName" : "paymentSchedule",
        "validationRules" : [ ],
        "required" : "true",
        "possibleValues" : [ {
          "value" : "ANNUAL",
          "displayValue" : "Annual"
        }, {
          "value" : "MONTHLY",
          "displayValue" : "Monthly"
        } ]
      },
      "paymentMethod" : {
        "type" : "ENUM",
        "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
        "referenceName" : "paymentMethod",
        "validationRules" : [ ],
        "required" : "true",
        "defaultValue" : "ACH",
        "possibleValues" : [ {
          "value" : "ACH",
          "displayValue" : "Automatic Bank Deductions"
        } ]
      },
      "onWaiverOfPremium" : {
        "type" : "ENUM",
        "contexts" : [ "ADMIN" ],
        "referenceName" : "onWaiverOfPremium",
        "validationRules" : [ ],
        "required" : "false",
        "possibleValues" : [ {
          "value" : "YES",
          "displayValue" : "Yes"
        }, {
          "value" : "NO",
          "displayValue" : "No"
        } ]
      },
      "onMilitarySuspension" : {
        "type" : "ENUM",
        "contexts" : [ "ADMIN" ],
        "referenceName" : "onMilitarySuspension",
        "validationRules" : [ ],
        "required" : "false",
        "possibleValues" : [ {
          "value" : "YES",
          "displayValue" : "Yes"
        }, {
          "value" : "NO",
          "displayValue" : "No"
        } ]
      },
      "policyForm" : {
        "type" : "STRING",
        "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
        "referenceName" : "policyForm",
        "validationRules" : [ ],
        "required" : "false",
        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    return 'D90';\n  });\n}"
      },
      "policyEffectiveDate" : {
        "type" : "DATE",
        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
        "referenceName" : "policyEffectiveDate",
        "validationRules" : [ ],
        "required" : "false"
      },
      "beneficiaries" : {
        "type" : "LIST",
        "contexts" : [ "ADMIN", "APPLICATION" ],
        "referenceName" : "beneficiaries",
        "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.beneficiaries), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.beneficiaries), Big('1'));\n  });\n}" ],
        "objectFields" : {
          "relationshipToInsured" : {
            "type" : "ENUM",
            "contexts" : [ "ADMIN", "APPLICATION" ],
            "referenceName" : "beneficiaries.relationshipToInsured",
            "validationRules" : [ ],
            "required" : "true",
            "possibleValues" : [ {
              "value" : "SPOUSE",
              "displayValue" : "Spouse"
            }, {
              "value" : "CHILD",
              "displayValue" : "Child"
            }, {
              "value" : "FIANCE",
              "displayValue" : "Fiance"
            }, {
              "value" : "PARTNER",
              "displayValue" : "Partner"
            }, {
              "value" : "PARENT",
              "displayValue" : "Parent"
            }, {
              "value" : "SIBLING",
              "displayValue" : "Sibling"
            }, {
              "value" : "ESTATE",
              "displayValue" : "Estate"
            }, {
              "value" : "TRUST",
              "displayValue" : "Trust"
            }, {
              "value" : "OTHER",
              "displayValue" : "Other"
            } ]
          },
          "relationshipToInsuredOther" : {
            "type" : "STRING",
            "contexts" : [ "ADMIN", "APPLICATION" ],
            "referenceName" : "beneficiaries.relationshipToInsuredOther",
            "validationRules" : [ ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if (pmrl.equal(parent.relationshipToInsured, 'OTHER')) {\n      valid = true;\n    }\n    return valid;\n  });\n}"
          },
          "firstName" : {
            "type" : "STRING",
            "contexts" : [ "ADMIN", "APPLICATION" ],
            "referenceName" : "beneficiaries.firstName",
            "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.firstName), Big('40'));\n  });\n}" ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    var valid = true;\n    if (pmrl.equal(parent.relationshipToInsured, 'TRUST') || pmrl.equal(parent.relationshipToInsured, 'ESTATE')) {\n      valid = false;\n    }\n    return valid;\n  });\n}",
            "max" : "40",
            "format" : "[a-zA-Z' -]+"
          },
          "middleName" : {
            "type" : "STRING",
            "contexts" : [ "ADMIN", "APPLICATION" ],
            "referenceName" : "beneficiaries.middleName",
            "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.middleName), Big('25'));\n  });\n}" ],
            "required" : "false",
            "max" : "25",
            "format" : "[a-zA-Z]+"
          },
          "lastName" : {
            "type" : "STRING",
            "contexts" : [ "ADMIN", "APPLICATION" ],
            "referenceName" : "beneficiaries.lastName",
            "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.lastName), Big('40'));\n  });\n}" ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    var valid = true;\n    if (pmrl.equal(parent.relationshipToInsured, 'TRUST') || pmrl.equal(parent.relationshipToInsured, 'ESTATE')) {\n      valid = false;\n    }\n    return valid;\n  });\n}",
            "max" : "40",
            "format" : "[a-zA-Z' -]+"
          },
          "percentOfShare" : {
            "type" : "NUMBER",
            "contexts" : [ "APPLICATION" ],
            "referenceName" : "beneficiaries.percentOfShare",
            "validationRules" : [ ],
            "required" : "false",
            "defaultValue" : "100"
          },
          "additionalFields" : {
            "type" : "OBJECT",
            "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "beneficiaries.additionalFields",
            "validationRules" : [ ],
            "objectFields" : {
              "beneficiaryFullName" : {
                "type" : "STRING",
                "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "beneficiaries.additionalFields.beneficiaryFullName",
                "validationRules" : [ ],
                "required" : "false",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var value = '';\n    if (pmrl.isDefined(parent.parent.firstName)) {\n      value = pmrl.concat(pmrl.concat(value, ''), parent.parent.firstName);\n    }\n    if (pmrl.isDefined(parent.parent.middleName)) {\n      value = pmrl.concat(pmrl.concat(value, ' '), parent.parent.middleName);\n    }\n    if (pmrl.isDefined(parent.parent.lastName)) {\n      value = pmrl.concat(pmrl.concat(value, ' '), parent.parent.lastName);\n    }\n    return value;\n  });\n}"
              },
              "beneficiaryRelationshipCalculated" : {
                "type" : "STRING",
                "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "beneficiaries.additionalFields.beneficiaryRelationshipCalculated",
                "validationRules" : [ ],
                "required" : "false",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.parent.relationshipToInsured), 'OTHER')) {\n      returnValue = parent.parent.relationshipToInsuredOther;\n    } else {\n      returnValue = parent.parent.relationshipToInsured;\n    }\n    return returnValue;\n  });\n}"
              }
            }
          },
          "partyId" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "beneficiaries.partyId",
            "validationRules" : [ ],
            "required" : "false"
          }
        },
        "minItemCount" : "1",
        "maxItemCount" : "1"
      },
      "benefitPeriod" : {
        "type" : "LOOKUP",
        "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
        "referenceName" : "benefitPeriod",
        "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid = true;\n    if (pmrl.isDefined(parent.insureds[Big('0')].occupationClass) && pmrl.isDefined(parent.insureds[Big('0')].birthDate) && pmrl.isDefined(parent.insureds[Big('0')].riskClass) && pmrl.isDefined(parent.benefitPeriod)) {\n      if (pmrl.equal(parent.insureds[Big('0')].occupationClass, \"OCCUPATION_CLASS_1A\") && (pmrl.equal(parent.benefitPeriod, \"BENEFIT_PERIOD_10YR\") || pmrl.equal(parent.benefitPeriod, \"BENEFIT_PERIOD_TO_AGE_65\") || pmrl.equal(parent.benefitPeriod, \"BENEFIT_PERIOD_TO_AGE_67\") || pmrl.equal(parent.benefitPeriod, \"BENEFIT_PERIOD_TO_AGE_70\"))) {\n        valid = \"Occ Class chosen does not allow this benefit period\";\n      }\n      if (pmrl.equal(parent.insureds[Big('0')].riskClass, \"RISK_CLASS_1_75\") && (pmrl.equal(parent.benefitPeriod, \"BENEFIT_PERIOD_10YR\") || pmrl.equal(parent.benefitPeriod, \"BENEFIT_PERIOD_TO_AGE_65\") || pmrl.equal(parent.benefitPeriod, \"BENEFIT_PERIOD_TO_AGE_67\") || pmrl.equal(parent.benefitPeriod, \"BENEFIT_PERIOD_TO_AGE_70\"))) {\n        valid = \"Risk Class chosen does not allow this benefit period\";\n      }\n      if (pmrl.equal(parent.insureds[Big('0')].riskClass, \"RISK_CLASS_2\") && (pmrl.equal(parent.benefitPeriod, \"BENEFIT_PERIOD_5YR\") || pmrl.equal(parent.benefitPeriod, \"BENEFIT_PERIOD_10YR\") || pmrl.equal(parent.benefitPeriod, \"BENEFIT_PERIOD_TO_AGE_65\") || pmrl.equal(parent.benefitPeriod, \"BENEFIT_PERIOD_TO_AGE_67\") || pmrl.equal(parent.benefitPeriod, \"BENEFIT_PERIOD_TO_AGE_70\"))) {\n        valid = \"Risk Class chosen does not allow this benefit period\";\n      }\n      if (pmrl.greaterThan(parent.insureds[Big('0')].additionalFields.issueAge, Big('56')) && pmrl.equal(parent.benefitPeriod, \"BENEFIT_PERIOD_10YR\")) {\n        valid = \"Issue age does not allow this benefit period\";\n      }\n    }\n    return valid;\n  });\n}" ],
        "required" : "true",
        "tableName" : "benefitPrdTbl",
        "column" : "benefitPeriod"
      },
      "eliminationPeriod" : {
        "type" : "LOOKUP",
        "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
        "referenceName" : "eliminationPeriod",
        "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if ((pmrl.equal(parent.eliminationPeriod, 'ELIMINATION_PERIOD_180_DAYS') || pmrl.equal(parent.eliminationPeriod, 'ELIMINATION_PERIOD_365_DAYS') || pmrl.equal(parent.eliminationPeriod, 'ELIMINATION_PERIOD_730_DAYS')) && (pmrl.equal(parent.benefitPeriod, 'BENEFIT_PERIOD_6MO') || pmrl.equal(parent.benefitPeriod, 'BENEFIT_PERIOD_1YR') || pmrl.equal(parent.benefitPeriod, 'BENEFIT_PERIOD_2YR'))) {\n      valid = 'Benefit period chosen does not allow this elimination period';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
        "required" : "true",
        "tableName" : "elimPrdTbl",
        "column" : "eliminationPeriod",
        "filters" : [ "parent.additionalFields.specialRestrictionEmployee", "parent.issueState", "parent.benefitPeriod" ]
      },
      "paidToDate" : {
        "type" : "DATE",
        "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
        "referenceName" : "paidToDate",
        "validationRules" : [ ],
        "required" : "false"
      },
      "policyStatus" : {
        "type" : "ENUM",
        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
        "referenceName" : "policyStatus",
        "validationRules" : [ ],
        "required" : "false",
        "possibleValues" : [ {
          "value" : "PENDING",
          "displayValue" : "Pending"
        }, {
          "value" : "INFORCE",
          "displayValue" : "InForce"
        }, {
          "value" : "TERMINATED",
          "displayValue" : "Terminated"
        }, {
          "value" : "SUSPENDED",
          "displayValue" : "Suspended"
        } ]
      },
      "paymentWithdrawalDay" : {
        "type" : "NUMBER",
        "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
        "referenceName" : "paymentWithdrawalDay",
        "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.lessThanEqual(parent.paymentWithdrawalDay, Big('28')) && pmrl.greaterThanEqual(parent.paymentWithdrawalDay, Big('1'))) {\n      valid = true;\n    } else {\n      valid = 'Please specify a recurring payment date between the 1st and 28th of each month';\n    }\n    return valid;\n  });\n}" ],
        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.payors[Big('0')].additionalFields.proposedInsuredInsuredThePayor), 'YES');\n  });\n}"
      },
      "payors" : {
        "type" : "LIST",
        "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
        "referenceName" : "payors",
        "validationRules" : [ ],
        "objectFields" : {
          "firstName" : {
            "type" : "STRING",
            "contexts" : [ "APPLICATION" ],
            "referenceName" : "payors.firstName",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var firstName;\n    if (pmrl.equal(parent.additionalFields.proposedInsuredInsuredThePayor, 'YES')) {\n      var firstName = parent.parent.insureds[Big('0')].firstName;\n    }\n    return firstName;\n  });\n}",
            "format" : "[a-zA-Z' -]+"
          },
          "middleName" : {
            "type" : "STRING",
            "contexts" : [ "APPLICATION" ],
            "referenceName" : "payors.middleName",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.additionalFields.proposedInsuredInsuredThePayor, 'YES')) {\n      var name = parent.parent.insureds[Big('0')].middleName;\n    }\n    return name;\n  });\n}",
            "format" : "[a-zA-Z' -]+"
          },
          "lastName" : {
            "type" : "STRING",
            "contexts" : [ "APPLICATION" ],
            "referenceName" : "payors.lastName",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.additionalFields.proposedInsuredInsuredThePayor, 'YES')) {\n      var name = parent.parent.insureds[Big('0')].lastName;\n    }\n    return name;\n  });\n}",
            "format" : "[a-zA-Z' -]+"
          },
          "emailAddress" : {
            "type" : "STRING",
            "contexts" : [ "APPLICATION" ],
            "referenceName" : "payors.emailAddress",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var email;\n    if (pmrl.equal(parent.additionalFields.proposedInsuredInsuredThePayor, 'YES')) {\n      var email = parent.parent.insureds[Big('0')].emailAddress;\n    }\n    return email;\n  });\n}",
            "format" : "[a-zA-Z0-9!#$%&'*+-/=?^_`{|}~.]+[@]+[a-zA-Z0-9!#$%&'*+-/=?^_`{|}~.]+[.]+[a-zA-Z0-9!#$%&'*+-/=?^_`{|}~.]+"
          },
          "authorizationSignature" : {
            "type" : "OBJECT",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "payors.authorizationSignature",
            "validationRules" : [ ],
            "objectFields" : {
              "signatureType" : {
                "type" : "ENUM",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "payors.authorizationSignature.signatureType",
                "validationRules" : [ ],
                "required" : "false",
                "possibleValues" : [ {
                  "value" : "ELECTRONIC",
                  "displayValue" : "Electronic"
                }, {
                  "value" : "VOICE",
                  "displayValue" : "Voice"
                }, {
                  "value" : "PAPER",
                  "displayValue" : "Paper"
                } ]
              },
              "signatureName" : {
                "type" : "STRING",
                "contexts" : [ "APPLICATION" ],
                "referenceName" : "payors.authorizationSignature.signatureName",
                "validationRules" : [ ],
                "required" : "false"
              },
              "signatureCity" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "payors.authorizationSignature.signatureCity",
                "validationRules" : [ ],
                "required" : "false"
              },
              "signatureState" : {
                "type" : "LOOKUP",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "payors.authorizationSignature.signatureState",
                "validationRules" : [ ],
                "required" : "false",
                "tableName" : "stateTbl",
                "column" : "state"
              },
              "signatureDate" : {
                "type" : "DATE",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "payors.authorizationSignature.signatureDate",
                "validationRules" : [ ],
                "required" : "false"
              },
              "signatureTimestamp" : {
                "type" : "DATETIME",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "payors.authorizationSignature.signatureTimestamp",
                "validationRules" : [ ],
                "required" : "false"
              }
            }
          },
          "achAccountNumber" : {
            "type" : "STRING",
            "contexts" : [ "APPLICATION" ],
            "referenceName" : "payors.achAccountNumber",
            "validationRules" : [ ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.additionalFields.proposedInsuredInsuredThePayor), 'YES');\n  });\n}"
          },
          "achRoutingNumber" : {
            "type" : "STRING",
            "contexts" : [ "APPLICATION" ],
            "referenceName" : "payors.achRoutingNumber",
            "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.isDefined(parent.achRoutingNumber) && (pmrl.lessThan(pmrl.length(parent.achRoutingNumber), Big('10')) && pmrl.greaterThan(pmrl.length(parent.achRoutingNumber), Big('8')))) {\n      valid = true;\n    } else {\n      valid = 'Please enter a valid 9 digit routing number';\n    }\n    return valid;\n  });\n}", "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.achRoutingNumber), Big('9'));\n  });\n}" ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.additionalFields.proposedInsuredInsuredThePayor), 'YES');\n  });\n}",
            "max" : "9"
          },
          "achAccountType" : {
            "type" : "ENUM",
            "contexts" : [ "APPLICATION" ],
            "referenceName" : "payors.achAccountType",
            "validationRules" : [ ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.additionalFields.proposedInsuredInsuredThePayor), 'YES');\n  });\n}",
            "possibleValues" : [ {
              "value" : "CHECKING",
              "displayValue" : "Checking"
            }, {
              "value" : "SAVINGS",
              "displayValue" : "Savings"
            } ]
          },
          "achInstitutionName" : {
            "type" : "STRING",
            "contexts" : [ "APPLICATION" ],
            "referenceName" : "payors.achInstitutionName",
            "validationRules" : [ ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.additionalFields.proposedInsuredInsuredThePayor), 'YES');\n  });\n}"
          },
          "mailingAddress" : {
            "type" : "OBJECT",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "payors.mailingAddress",
            "validationRules" : [ ],
            "objectFields" : {
              "addressLine1" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "payors.mailingAddress.addressLine1",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.addressLine1), Big('40'));\n  });\n}" ],
                "required" : "false",
                "max" : "40"
              },
              "addressLine2" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "payors.mailingAddress.addressLine2",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.addressLine2), Big('40'));\n  });\n}" ],
                "required" : "false",
                "max" : "40"
              },
              "city" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "payors.mailingAddress.city",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.city), Big('40'));\n  });\n}" ],
                "required" : "false",
                "max" : "40"
              },
              "state" : {
                "type" : "LOOKUP",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "payors.mailingAddress.state",
                "validationRules" : [ ],
                "required" : "false",
                "tableName" : "stateTbl",
                "column" : "state"
              },
              "zipCode" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "payors.mailingAddress.zipCode",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.zipCode), Big('5'));\n  });\n}" ],
                "required" : "false",
                "min" : "5",
                "format" : "[0-9-]+"
              },
              "zipCodePlus4" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "payors.mailingAddress.zipCodePlus4",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.zipCodePlus4), Big('9'));\n  });\n}" ],
                "required" : "false",
                "min" : "9",
                "format" : "[0-9-]+"
              }
            }
          },
          "billingAddress" : {
            "type" : "OBJECT",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "payors.billingAddress",
            "validationRules" : [ ],
            "objectFields" : {
              "addressLine1" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "payors.billingAddress.addressLine1",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.addressLine1), Big('40'));\n  });\n}" ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.proposedInsuredInsuredThePayor), 'YES') && pmrl.isDefined(parent.parent.additionalFields.billingAddressIndicator) && pmrl.equal(parent.parent.additionalFields.billingAddressIndicator, 'YES');\n  });\n}",
                "max" : "40"
              },
              "addressLine2" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "payors.billingAddress.addressLine2",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.addressLine2), Big('25'));\n  });\n}" ],
                "required" : "false",
                "max" : "25"
              },
              "city" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "payors.billingAddress.city",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.city), Big('40'));\n  });\n}" ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.proposedInsuredInsuredThePayor), 'YES') && pmrl.isDefined(parent.parent.additionalFields.billingAddressIndicator) && pmrl.equal(parent.parent.additionalFields.billingAddressIndicator, 'YES');\n  });\n}",
                "max" : "40"
              },
              "state" : {
                "type" : "LOOKUP",
                "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "payors.billingAddress.state",
                "validationRules" : [ ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.proposedInsuredInsuredThePayor), 'YES') && pmrl.isDefined(parent.parent.additionalFields.billingAddressIndicator) && pmrl.equal(parent.parent.additionalFields.billingAddressIndicator, 'YES');\n  });\n}",
                "tableName" : "stateTbl",
                "column" : "state"
              },
              "zipCode" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "payors.billingAddress.zipCode",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.zipCode), Big('5'));\n  });\n}" ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.proposedInsuredInsuredThePayor), 'YES') && pmrl.isDefined(parent.parent.additionalFields.billingAddressIndicator) && pmrl.equal(parent.parent.additionalFields.billingAddressIndicator, 'YES');\n  });\n}",
                "min" : "5",
                "format" : "[0-9-]+"
              },
              "zipCodePlus4" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "payors.billingAddress.zipCodePlus4",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.zipCodePlus4), Big('9'));\n  });\n}" ],
                "required" : "false",
                "min" : "9",
                "format" : "[0-9-]+"
              }
            }
          },
          "additionalFields" : {
            "type" : "OBJECT",
            "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "payors.additionalFields",
            "validationRules" : [ ],
            "objectFields" : {
              "premiumNotPaidEmployer" : {
                "type" : "ENUM",
                "contexts" : [ "APPLICATION" ],
                "referenceName" : "payors.additionalFields.premiumNotPaidEmployer",
                "validationRules" : [ ],
                "required" : "false",
                "possibleValues" : [ {
                  "value" : "YES",
                  "displayValue" : "Yes"
                }, {
                  "value" : "NO",
                  "displayValue" : "No"
                } ]
              },
              "premiumNotPaidTaxId" : {
                "type" : "STRING",
                "contexts" : [ "APPLICATION" ],
                "referenceName" : "payors.additionalFields.premiumNotPaidTaxId",
                "validationRules" : [ ],
                "required" : "false"
              },
              "premiumNotPaidBusinessOwned" : {
                "type" : "ENUM",
                "contexts" : [ "APPLICATION" ],
                "referenceName" : "payors.additionalFields.premiumNotPaidBusinessOwned",
                "validationRules" : [ ],
                "required" : "false",
                "possibleValues" : [ {
                  "value" : "YES",
                  "displayValue" : "Yes"
                }, {
                  "value" : "NO",
                  "displayValue" : "No"
                } ]
              },
              "premiumNotPaidSpouse" : {
                "type" : "ENUM",
                "contexts" : [ "APPLICATION" ],
                "referenceName" : "payors.additionalFields.premiumNotPaidSpouse",
                "validationRules" : [ ],
                "required" : "false",
                "possibleValues" : [ {
                  "value" : "YES",
                  "displayValue" : "Yes"
                }, {
                  "value" : "NO",
                  "displayValue" : "No"
                } ]
              },
              "premiumNotPaidOther" : {
                "type" : "ENUM",
                "contexts" : [ "APPLICATION" ],
                "referenceName" : "payors.additionalFields.premiumNotPaidOther",
                "validationRules" : [ ],
                "required" : "false",
                "possibleValues" : [ {
                  "value" : "YES",
                  "displayValue" : "Yes"
                }, {
                  "value" : "NO",
                  "displayValue" : "No"
                } ]
              },
              "premiumNotPaidOtherText" : {
                "type" : "STRING",
                "contexts" : [ "APPLICATION" ],
                "referenceName" : "payors.additionalFields.premiumNotPaidOtherText",
                "validationRules" : [ ],
                "required" : "false"
              },
              "proposedInsuredInsuredThePayor" : {
                "type" : "ENUM",
                "contexts" : [ "QUOTE", "ADMIN", "APPLICATION" ],
                "referenceName" : "payors.additionalFields.proposedInsuredInsuredThePayor",
                "validationRules" : [ ],
                "required" : "true",
                "possibleValues" : [ {
                  "value" : "YES",
                  "displayValue" : "Yes"
                }, {
                  "value" : "NO",
                  "displayValue" : "No"
                } ]
              },
              "achAccountNumberConfirm" : {
                "type" : "STRING",
                "contexts" : [ "APPLICATION" ],
                "referenceName" : "payors.additionalFields.achAccountNumberConfirm",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(pmrl.toUpperCase(parent.parent.achAccountNumber), pmrl.toUpperCase(parent.achAccountNumberConfirm))) {\n      valid = true;\n    } else {\n      valid = 'Account numbers do not match';\n    }\n    return valid;\n  });\n}" ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.proposedInsuredInsuredThePayor), 'YES');\n  });\n}"
              },
              "achRoutingNumberConfirm" : {
                "type" : "STRING",
                "contexts" : [ "APPLICATION" ],
                "referenceName" : "payors.additionalFields.achRoutingNumberConfirm",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(pmrl.toUpperCase(parent.parent.achRoutingNumber), pmrl.toUpperCase(parent.achRoutingNumberConfirm))) {\n      valid = true;\n    } else {\n      valid = 'Routing numbers do not match';\n    }\n    return valid;\n  });\n}", "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.achRoutingNumberConfirm), Big('9')) && pmrl.lessThanEqual(pmrl.length(parent.achRoutingNumberConfirm), Big('9'));\n  });\n}" ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.proposedInsuredInsuredThePayor), 'YES');\n  });\n}",
                "min" : "9",
                "max" : "9"
              },
              "nameOnBankAccount" : {
                "type" : "STRING",
                "contexts" : [ "ADMIN", "APPLICATION" ],
                "referenceName" : "payors.additionalFields.nameOnBankAccount",
                "validationRules" : [ ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.proposedInsuredInsuredThePayor), 'YES');\n  });\n}"
              },
              "payorAddressCalculation" : {
                "type" : "STRING",
                "contexts" : [ "APPLICATION" ],
                "referenceName" : "payors.additionalFields.payorAddressCalculation",
                "validationRules" : [ ],
                "required" : "false",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var value = parent.parent.billingAddress.addressLine1;\n    if (pmrl.isDefined(parent.parent.billingAddress.addressLine2)) {\n      value = pmrl.concat(pmrl.concat(value, ' '), parent.parent.billingAddress.addressLine2);\n    }\n    if (pmrl.isDefined(parent.parent.billingAddress.city)) {\n      value = pmrl.concat(pmrl.concat(value, ' '), parent.parent.billingAddress.city);\n    }\n    if (pmrl.isDefined(parent.parent.billingAddress.state)) {\n      value = pmrl.concat(pmrl.concat(value, ' '), parent.parent.billingAddress.state);\n    }\n    if (pmrl.isDefined(parent.parent.billingAddress.zipCode)) {\n      value = pmrl.concat(pmrl.concat(value, ' '), parent.parent.billingAddress.zipCode);\n    }\n    return value;\n  });\n}"
              },
              "payorsFullName" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "payors.additionalFields.payorsFullName",
                "validationRules" : [ ],
                "required" : "false",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var value = '';\n    if (pmrl.isDefined(parent.parent.firstName)) {\n      value = pmrl.concat(pmrl.concat(value, ''), parent.parent.firstName);\n    }\n    if (pmrl.isDefined(parent.parent.middleName)) {\n      value = pmrl.concat(pmrl.concat(value, ' '), parent.parent.middleName);\n    }\n    if (pmrl.isDefined(parent.parent.lastName)) {\n      value = pmrl.concat(pmrl.concat(value, ' '), parent.parent.lastName);\n    }\n    return value;\n  });\n}"
              },
              "billingAddressIndicator" : {
                "type" : "ENUM",
                "contexts" : [ "APPLICATION" ],
                "referenceName" : "payors.additionalFields.billingAddressIndicator",
                "validationRules" : [ ],
                "required" : "true",
                "possibleValues" : [ {
                  "value" : "YES",
                  "displayValue" : "Yes"
                }, {
                  "value" : "NO",
                  "displayValue" : "No"
                } ]
              }
            }
          },
          "partyId" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "payors.partyId",
            "validationRules" : [ ],
            "required" : "false"
          }
        }
      },
      "issuingCompany" : {
        "type" : "ENUM",
        "contexts" : [ "ADMIN", "APPLICATION" ],
        "referenceName" : "issuingCompany",
        "validationRules" : [ ],
        "required" : "true",
        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    return 'MUTUAL';\n  });\n}",
        "possibleValues" : [ {
          "value" : "MUTUAL",
          "displayValue" : "Mutual"
        } ]
      },
      "distributionChannel" : {
        "type" : "ENUM",
        "contexts" : [ "UNDERWRITING", "ADMIN" ],
        "referenceName" : "distributionChannel",
        "validationRules" : [ ],
        "required" : "true",
        "possibleValues" : [ {
          "value" : "BROKERAGE",
          "displayValue" : "Brokerage"
        }, {
          "value" : "AGENCY",
          "displayValue" : "Agency"
        } ]
      },
      "issueState" : {
        "type" : "STRING",
        "contexts" : [ "QUOTE", "ADMIN", "APPLICATION" ],
        "referenceName" : "issueState",
        "validationRules" : [ ],
        "required" : "true",
        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var issueState = parent.insureds[Big('0')].residentialAddress.state;\n    return issueState;\n  });\n}"
      },
      "owner" : {
        "type" : "OBJECT",
        "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
        "referenceName" : "owner",
        "validationRules" : [ ],
        "objectFields" : {
          "namePrefix" : {
            "type" : "STRING",
            "contexts" : [ "APPLICATION" ],
            "referenceName" : "owner.namePrefix",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var namePrefix = parent.parent.insureds[Big('0')].namePrefix;\n    return namePrefix;\n  });\n}"
          },
          "firstName" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "owner.firstName",
            "validationRules" : [ ],
            "required" : "true",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var firstName = parent.parent.insureds[Big('0')].firstName;\n    return firstName;\n  });\n}",
            "format" : "[a-zA-Z' -]+"
          },
          "middleName" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "owner.middleName",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var middleName = parent.parent.insureds[Big('0')].middleName;\n    return middleName;\n  });\n}",
            "format" : "[a-zA-Z' -]+"
          },
          "lastName" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "owner.lastName",
            "validationRules" : [ ],
            "required" : "true",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var lastName = parent.parent.insureds[Big('0')].lastName;\n    return lastName;\n  });\n}",
            "format" : "[a-zA-Z' -]+"
          },
          "nameSuffix" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "owner.nameSuffix",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var nameSuffix = parent.parent.insureds[Big('0')].nameSuffix;\n    return nameSuffix;\n  });\n}"
          },
          "partyId" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "owner.partyId",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var partyId = parent.parent.insureds[Big('0')].partyId;\n    return partyId;\n  });\n}"
          },
          "residentialAddress" : {
            "type" : "OBJECT",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "owner.residentialAddress",
            "validationRules" : [ ],
            "objectFields" : {
              "addressLine1" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "owner.residentialAddress.addressLine1",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.addressLine1), Big('40'));\n  });\n}" ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.parent.insureds[Big('0')].additionalFields.mailingAddressIndicator), 'YES');\n  });\n}",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var addressLine1 = parent.parent.parent.insureds[Big('0')].residentialAddress.addressLine1;\n    return addressLine1;\n  });\n}",
                "max" : "40",
                "format" : "[a-zA-Z0-9' -/;,.#&*()]+"
              },
              "addressLine2" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "owner.residentialAddress.addressLine2",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.addressLine2), Big('25'));\n  });\n}" ],
                "required" : "false",
                "max" : "25",
                "format" : "[a-zA-Z0-9' -/;,.#&*()]+"
              },
              "city" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "owner.residentialAddress.city",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.city), Big('40'));\n  });\n}" ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.parent.insureds[Big('0')].additionalFields.mailingAddressIndicator), 'YES');\n  });\n}",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var city = parent.parent.parent.insureds[Big('0')].residentialAddress.city;\n    return city;\n  });\n}",
                "max" : "40",
                "format" : "[a-zA-Z0-9' -]+"
              },
              "state" : {
                "type" : "LOOKUP",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "owner.residentialAddress.state",
                "validationRules" : [ ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.parent.insureds[Big('0')].additionalFields.mailingAddressIndicator), 'YES');\n  });\n}",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var state = parent.parent.parent.insureds[Big('0')].residentialAddress.state;\n    return state;\n  });\n}",
                "tableName" : "stateTbl",
                "column" : "state"
              },
              "zipCode" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "owner.residentialAddress.zipCode",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.zipCode), Big('5'));\n  });\n}" ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.parent.insureds[Big('0')].additionalFields.mailingAddressIndicator), 'YES');\n  });\n}",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var zip = parent.parent.parent.insureds[Big('0')].residentialAddress.zipCode;\n    return zip;\n  });\n}",
                "min" : "5",
                "format" : "[0-9-]+"
              },
              "zipCodePlus4" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "owner.residentialAddress.zipCodePlus4",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.zipCodePlus4), Big('9'));\n  });\n}" ],
                "required" : "false",
                "min" : "9",
                "format" : "[0-9-]+"
              }
            }
          },
          "mailingAddress" : {
            "type" : "OBJECT",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "owner.mailingAddress",
            "validationRules" : [ ],
            "objectFields" : {
              "addressLine1" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "owner.mailingAddress.addressLine1",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.addressLine1), Big('40'));\n  });\n}" ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.parent.insureds[Big('0')].additionalFields.mailingAddressIndicator), 'YES');\n  });\n}",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var addressLine1 = parent.parent.parent.insureds[Big('0')].mailingAddress.addressLine1;\n    return addressLine1;\n  });\n}",
                "max" : "40",
                "format" : "[a-zA-Z0-9' -/;,.#&*()]+"
              },
              "addressLine2" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "owner.mailingAddress.addressLine2",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.addressLine2), Big('40'));\n  });\n}" ],
                "required" : "false",
                "max" : "40",
                "format" : "[a-zA-Z0-9' -/;,.#&*()]+"
              },
              "city" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "owner.mailingAddress.city",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.city), Big('40'));\n  });\n}" ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.parent.insureds[Big('0')].additionalFields.mailingAddressIndicator), 'YES');\n  });\n}",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var city = parent.parent.parent.insureds[Big('0')].mailingAddress.city;\n    return city;\n  });\n}",
                "max" : "40",
                "format" : "[a-zA-Z0-9' -]+"
              },
              "state" : {
                "type" : "LOOKUP",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "owner.mailingAddress.state",
                "validationRules" : [ ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.parent.insureds[Big('0')].additionalFields.mailingAddressIndicator), 'YES');\n  });\n}",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var state = parent.parent.parent.insureds[Big('0')].mailingAddress.state;\n    return state;\n  });\n}",
                "tableName" : "stateTbl",
                "column" : "state"
              },
              "zipCode" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "owner.mailingAddress.zipCode",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.zipCode), Big('5'));\n  });\n}" ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.parent.insureds[Big('0')].additionalFields.mailingAddressIndicator), 'YES');\n  });\n}",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var zip = parent.parent.parent.insureds[Big('0')].mailingAddress.zipCode;\n    return zip;\n  });\n}",
                "min" : "5",
                "format" : "[0-9-]+"
              },
              "zipCodePlus4" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "owner.mailingAddress.zipCodePlus4",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.zipCodePlus4), Big('9'));\n  });\n}" ],
                "required" : "false",
                "min" : "9",
                "format" : "[0-9-]+"
              }
            }
          },
          "cellPhoneNumber" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "owner.cellPhoneNumber",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var cell = parent.parent.insureds[Big('0')].cellPhoneNumber;\n    return cell;\n  });\n}"
          },
          "homePhoneNumber" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "owner.homePhoneNumber",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var home = parent.parent.insureds[Big('0')].homePhoneNumber;\n    return home;\n  });\n}"
          },
          "gender" : {
            "type" : "ENUM",
            "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "owner.gender",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var gender = parent.parent.insureds[Big('0')].gender;\n    return gender;\n  });\n}",
            "possibleValues" : [ {
              "value" : "MALE",
              "displayValue" : "Male"
            }, {
              "value" : "FEMALE",
              "displayValue" : "Female"
            } ]
          },
          "socialSecurityNumber" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "owner.socialSecurityNumber",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var ssn = parent.parent.insureds[Big('0')].socialSecurityNumber;\n    return ssn;\n  });\n}",
            "format" : "[0-9-]+"
          },
          "birthDate" : {
            "type" : "DATE",
            "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "owner.birthDate",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var dob = parent.parent.insureds[Big('0')].birthDate;\n    return dob;\n  });\n}"
          }
        }
      },
      "insureds" : {
        "type" : "LIST",
        "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
        "referenceName" : "insureds",
        "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.insureds), Big('1'));\n  });\n}" ],
        "objectFields" : {
          "namePrefix" : {
            "type" : "STRING",
            "contexts" : [ "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.namePrefix",
            "validationRules" : [ ],
            "required" : "false"
          },
          "firstName" : {
            "type" : "STRING",
            "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.firstName",
            "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.firstName), Big('40'));\n  });\n}" ],
            "required" : "true",
            "max" : "40",
            "format" : "[a-zA-Z' -]+"
          },
          "middleName" : {
            "type" : "STRING",
            "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.middleName",
            "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.middleName), Big('25'));\n  });\n}" ],
            "required" : "false",
            "max" : "25",
            "format" : "[a-zA-Z' -]+"
          },
          "lastName" : {
            "type" : "STRING",
            "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.lastName",
            "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.lastName), Big('40'));\n  });\n}" ],
            "required" : "true",
            "max" : "40",
            "format" : "[a-zA-Z' -]+"
          },
          "nameSuffix" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.nameSuffix",
            "validationRules" : [ ],
            "required" : "false"
          },
          "emailAddress" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.emailAddress",
            "validationRules" : [ ],
            "required" : "true",
            "format" : "[a-zA-Z0-9!#$%&'*+-/=?^_`{|}~.]+[@]+[a-zA-Z0-9!#$%&'*+-/=?^_`{|}~.]+[.]+[a-zA-Z0-9!#$%&'*+-/=?^_`{|}~.]+"
          },
          "ratedGender" : {
            "type" : "ENUM",
            "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.ratedGender",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var ratedGender = parent.gender;\n    return ratedGender;\n  });\n}",
            "possibleValues" : [ {
              "value" : "MALE",
              "displayValue" : "Male"
            }, {
              "value" : "FEMALE",
              "displayValue" : "Female"
            } ]
          },
          "gender" : {
            "type" : "ENUM",
            "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.gender",
            "validationRules" : [ ],
            "required" : "true",
            "possibleValues" : [ {
              "value" : "MALE",
              "displayValue" : "Male"
            }, {
              "value" : "FEMALE",
              "displayValue" : "Female"
            } ]
          },
          "socialSecurityNumber" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.socialSecurityNumber",
            "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.socialSecurityNumber), Big('9')) && pmrl.lessThanEqual(pmrl.length(parent.socialSecurityNumber), Big('11'));\n  });\n}" ],
            "required" : "true",
            "min" : "9",
            "max" : "11",
            "format" : "[0-9]+[-]+[0-9]+[-]+[0-9]+"
          },
          "birthDate" : {
            "type" : "DATE",
            "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.birthDate",
            "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.lessThanEqual(parent.additionalFields.issueAge, Big('61')) && pmrl.greaterThanEqual(parent.additionalFields.issueAge, Big('18'))) {\n      valid = true;\n    } else {\n      valid = 'Insured age must be between 18 and 61';\n    }\n    return valid;\n  });\n}" ],
            "required" : "true"
          },
          "cellPhoneNumber" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.cellPhoneNumber",
            "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.cellPhoneNumber), Big('10')) && pmrl.lessThanEqual(pmrl.length(parent.cellPhoneNumber), Big('12'));\n  });\n}" ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.lessThan(pmrl.length(parent.cellPhoneNumber), Big('1'))) {\n      if (pmrl.lessThan(pmrl.length(parent.homePhoneNumber), Big('1'))) {\n        valid = true;\n      } else {\n        valid = false;\n      }\n    } else {\n      valid = false;\n    }\n    return valid;\n  });\n}",
            "min" : "10",
            "max" : "12",
            "format" : "[0-9-]+"
          },
          "homePhoneNumber" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.homePhoneNumber",
            "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.homePhoneNumber), Big('10')) && pmrl.lessThanEqual(pmrl.length(parent.homePhoneNumber), Big('12'));\n  });\n}" ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.lessThan(pmrl.length(parent.homePhoneNumber), Big('1'))) {\n      if (pmrl.lessThan(pmrl.length(parent.cellPhoneNumber), Big('1'))) {\n        valid = true;\n      } else {\n        valid = false;\n      }\n    } else {\n      valid = false;\n    }\n    return valid;\n  });\n}",
            "min" : "10",
            "max" : "12",
            "format" : "[0-9-]+"
          },
          "residentialAddress" : {
            "type" : "OBJECT",
            "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.residentialAddress",
            "validationRules" : [ ],
            "objectFields" : {
              "addressLine1" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.residentialAddress.addressLine1",
                "validationRules" : [ ],
                "required" : "true",
                "format" : "[a-zA-Z0-9' -/;,.#&*()]+"
              },
              "addressLine2" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.residentialAddress.addressLine2",
                "validationRules" : [ ],
                "required" : "false",
                "format" : "[a-zA-Z0-9' -/;,.#&*()]+"
              },
              "city" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.residentialAddress.city",
                "validationRules" : [ ],
                "required" : "true",
                "format" : "[a-zA-Z' -]+"
              },
              "state" : {
                "type" : "LOOKUP",
                "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.residentialAddress.state",
                "validationRules" : [ ],
                "required" : "true",
                "tableName" : "productStateApproveTbl",
                "column" : "approvedState"
              },
              "zipCode" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.residentialAddress.zipCode",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.lessThan(pmrl.length(parent.zipCode), Big('5'))) {\n      valid = 'Please enter a valid 5 or 9 digit zip code';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                "required" : "true",
                "format" : "[0-9-]+"
              },
              "zipCodePlus4" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.residentialAddress.zipCodePlus4",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.zipCodePlus4), Big('9'));\n  });\n}" ],
                "required" : "false",
                "min" : "9",
                "format" : "[0-9-]+"
              }
            }
          },
          "mailingAddress" : {
            "type" : "OBJECT",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.mailingAddress",
            "validationRules" : [ ],
            "objectFields" : {
              "addressLine1" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.mailingAddress.addressLine1",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.addressLine1), Big('40'));\n  });\n}" ],
                "required" : "true",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var addressLine1 = parent.parent.parent.insureds[Big('0')].residentialAddress.addressLine1;\n    return addressLine1;\n  });\n}",
                "calculationCondition" : "{\n  (function (parent, context, tables, rates) {\n    var calculateOrNot = true;\n    if (pmrl.isDefined(parent.parent.additionalFields.mailingAddressIndicator)) {\n      if (pmrl.equal(parent.parent.additionalFields.mailingAddressIndicator, 'NO')) {\n        calculateOrNot = true;\n      } else {\n        calculateOrNot = false;\n      }\n      return calculateOrNot;\n    }\n  });\n}",
                "max" : "40",
                "format" : "[a-zA-Z0-9' -/;,.#&*()]+"
              },
              "addressLine2" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.mailingAddress.addressLine2",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.addressLine2), Big('40'));\n  });\n}" ],
                "required" : "false",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var addressLine2 = parent.parent.parent.insureds[Big('0')].residentialAddress.addressLine2;\n    return addressLine2;\n  });\n}",
                "calculationCondition" : "{\n  (function (parent, context, tables, rates) {\n    var calculateOrNot = true;\n    if (pmrl.isDefined(parent.parent.additionalFields.mailingAddressIndicator)) {\n      if (pmrl.equal(parent.parent.additionalFields.mailingAddressIndicator, 'NO')) {\n        calculateOrNot = true;\n      } else {\n        calculateOrNot = false;\n      }\n      return calculateOrNot;\n    }\n  });\n}",
                "max" : "40",
                "format" : "[a-zA-Z0-9' -/;,.#&*()]+"
              },
              "city" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.mailingAddress.city",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.city), Big('40'));\n  });\n}" ],
                "required" : "true",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var city = parent.parent.parent.insureds[Big('0')].residentialAddress.city;\n    return city;\n  });\n}",
                "calculationCondition" : "{\n  (function (parent, context, tables, rates) {\n    var calculateOrNot = true;\n    if (pmrl.isDefined(parent.parent.additionalFields.mailingAddressIndicator)) {\n      if (pmrl.equal(parent.parent.additionalFields.mailingAddressIndicator, 'NO')) {\n        calculateOrNot = true;\n      } else {\n        calculateOrNot = false;\n      }\n      return calculateOrNot;\n    }\n  });\n}",
                "max" : "40",
                "format" : "[a-zA-Z' -]+"
              },
              "state" : {
                "type" : "LOOKUP",
                "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.mailingAddress.state",
                "validationRules" : [ ],
                "required" : "true",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var state = parent.parent.parent.insureds[Big('0')].residentialAddress.state;\n    return state;\n  });\n}",
                "calculationCondition" : "{\n  (function (parent, context, tables, rates) {\n    var calculateOrNot = true;\n    if (pmrl.isDefined(parent.parent.additionalFields.mailingAddressIndicator)) {\n      if (pmrl.equal(parent.parent.additionalFields.mailingAddressIndicator, 'NO')) {\n        calculateOrNot = true;\n      } else {\n        calculateOrNot = false;\n      }\n      return calculateOrNot;\n    }\n  });\n}",
                "tableName" : "stateTbl",
                "column" : "state"
              },
              "zipCode" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.mailingAddress.zipCode",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.lessThan(pmrl.length(parent.zipCode), Big('5'))) {\n      valid = 'Please enter a valid 5 or 9 digit zip code';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                "required" : "true",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var zip = parent.parent.parent.insureds[Big('0')].residentialAddress.zipCode;\n    return zip;\n  });\n}",
                "calculationCondition" : "{\n  (function (parent, context, tables, rates) {\n    var calculateOrNot = true;\n    if (pmrl.isDefined(parent.parent.additionalFields.mailingAddressIndicator)) {\n      if (pmrl.equal(parent.parent.additionalFields.mailingAddressIndicator, 'NO')) {\n        calculateOrNot = true;\n      } else {\n        calculateOrNot = false;\n      }\n      return calculateOrNot;\n    }\n  });\n}",
                "format" : "[0-9-]+"
              },
              "zipCodePlus4" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.mailingAddress.zipCodePlus4",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.zipCodePlus4), Big('9'));\n  });\n}" ],
                "required" : "false",
                "min" : "9",
                "format" : "[0-9-]+"
              }
            }
          },
          "occupationClass" : {
            "type" : "LOOKUP",
            "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.occupationClass",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var occClass = pmrl.exactLookup(tables, 'occSpecClassTbl', {\n      occupationSpecialty: parent.additionalFields.occupationSpecialty\n    }, 'occupationClass');\n    return occClass;\n  });\n}",
            "tableName" : "occSpecClassTbl",
            "column" : "occupationClass",
            "filters" : [ "parent.additionalFields.occupationSpecialty" ]
          },
          "riskClass" : {
            "type" : "ENUM",
            "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.riskClass",
            "validationRules" : [ ],
            "required" : "true",
            "possibleValues" : [ {
              "value" : "RISK_CLASS_1",
              "displayValue" : "Standard"
            }, {
              "value" : "RISK_CLASS_1_25",
              "displayValue" : "25%"
            }, {
              "value" : "RISK_CLASS_1_50",
              "displayValue" : "50%"
            }, {
              "value" : "RISK_CLASS_1_75",
              "displayValue" : "75%"
            }, {
              "value" : "RISK_CLASS_2",
              "displayValue" : "100%"
            } ]
          },
          "annualEarnedIncome" : {
            "type" : "NUMBER",
            "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.annualEarnedIncome",
            "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid = true;\n    if (pmrl.lessThan(parent.annualEarnedIncome, Big('15000')) && pmrl.notEqual(parent.parent.additionalFields.specialRestrictionEmployee, 'STUDENT')) {\n      valid = \"Minimum of $15,000 Annual Earned Income. If client is a student, select that option in the special restriction field.\";\n    }\n    return valid;\n  });\n}" ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.notEqual(parent.parent.additionalFields.specialRestrictionEmployee, 'STUDENT');\n  });\n}"
          },
          "applicationSignature" : {
            "type" : "OBJECT",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "insureds.applicationSignature",
            "validationRules" : [ ],
            "objectFields" : {
              "signatureType" : {
                "type" : "ENUM",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.applicationSignature.signatureType",
                "validationRules" : [ ],
                "required" : "false",
                "possibleValues" : [ {
                  "value" : "ELECTRONIC",
                  "displayValue" : "Electronic"
                }, {
                  "value" : "VOICE",
                  "displayValue" : "Voice"
                }, {
                  "value" : "PAPER",
                  "displayValue" : "Paper"
                } ]
              },
              "signatureName" : {
                "type" : "STRING",
                "contexts" : [ "APPLICATION" ],
                "referenceName" : "insureds.applicationSignature.signatureName",
                "validationRules" : [ ],
                "required" : "false"
              },
              "signatureCity" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.applicationSignature.signatureCity",
                "validationRules" : [ ],
                "required" : "false"
              },
              "signatureState" : {
                "type" : "LOOKUP",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.applicationSignature.signatureState",
                "validationRules" : [ ],
                "required" : "false",
                "tableName" : "stateTbl",
                "column" : "state"
              },
              "signatureDate" : {
                "type" : "DATE",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.applicationSignature.signatureDate",
                "validationRules" : [ ],
                "required" : "false"
              },
              "signatureTimestamp" : {
                "type" : "DATETIME",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.applicationSignature.signatureTimestamp",
                "validationRules" : [ ],
                "required" : "false"
              }
            }
          },
          "electronicConsentSignature" : {
            "type" : "OBJECT",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "insureds.electronicConsentSignature",
            "validationRules" : [ ],
            "objectFields" : {
              "signatureType" : {
                "type" : "ENUM",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.electronicConsentSignature.signatureType",
                "validationRules" : [ ],
                "required" : "false",
                "possibleValues" : [ {
                  "value" : "ELECTRONIC",
                  "displayValue" : "Electronic"
                }, {
                  "value" : "VOICE",
                  "displayValue" : "Voice"
                }, {
                  "value" : "PAPER",
                  "displayValue" : "Paper"
                } ]
              },
              "signatureName" : {
                "type" : "STRING",
                "contexts" : [ "APPLICATION" ],
                "referenceName" : "insureds.electronicConsentSignature.signatureName",
                "validationRules" : [ ],
                "required" : "false"
              },
              "signatureCity" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.electronicConsentSignature.signatureCity",
                "validationRules" : [ ],
                "required" : "false"
              },
              "signatureState" : {
                "type" : "LOOKUP",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.electronicConsentSignature.signatureState",
                "validationRules" : [ ],
                "required" : "false",
                "tableName" : "stateTbl",
                "column" : "state"
              },
              "signatureDate" : {
                "type" : "DATE",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.electronicConsentSignature.signatureDate",
                "validationRules" : [ ],
                "required" : "false"
              },
              "signatureTimestamp" : {
                "type" : "DATETIME",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.electronicConsentSignature.signatureTimestamp",
                "validationRules" : [ ],
                "required" : "false"
              }
            }
          },
          "hipaaAuthorizationSignature" : {
            "type" : "OBJECT",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "insureds.hipaaAuthorizationSignature",
            "validationRules" : [ ],
            "objectFields" : {
              "signatureType" : {
                "type" : "ENUM",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.hipaaAuthorizationSignature.signatureType",
                "validationRules" : [ ],
                "required" : "false",
                "possibleValues" : [ {
                  "value" : "ELECTRONIC",
                  "displayValue" : "Electronic"
                }, {
                  "value" : "VOICE",
                  "displayValue" : "Voice"
                }, {
                  "value" : "PAPER",
                  "displayValue" : "Paper"
                } ]
              },
              "signatureName" : {
                "type" : "STRING",
                "contexts" : [ "APPLICATION" ],
                "referenceName" : "insureds.hipaaAuthorizationSignature.signatureName",
                "validationRules" : [ ],
                "required" : "false"
              },
              "signatureCity" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.hipaaAuthorizationSignature.signatureCity",
                "validationRules" : [ ],
                "required" : "false"
              },
              "signatureState" : {
                "type" : "LOOKUP",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.hipaaAuthorizationSignature.signatureState",
                "validationRules" : [ ],
                "required" : "false",
                "tableName" : "stateTbl",
                "column" : "state"
              },
              "signatureDate" : {
                "type" : "DATE",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.hipaaAuthorizationSignature.signatureDate",
                "validationRules" : [ ],
                "required" : "false"
              },
              "signatureTimestamp" : {
                "type" : "DATETIME",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.hipaaAuthorizationSignature.signatureTimestamp",
                "validationRules" : [ ],
                "required" : "false"
              }
            }
          },
          "inGoodHealthSignature" : {
            "type" : "OBJECT",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "insureds.inGoodHealthSignature",
            "validationRules" : [ ],
            "objectFields" : {
              "signatureType" : {
                "type" : "ENUM",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.inGoodHealthSignature.signatureType",
                "validationRules" : [ ],
                "required" : "false",
                "possibleValues" : [ {
                  "value" : "ELECTRONIC",
                  "displayValue" : "Electronic"
                }, {
                  "value" : "VOICE",
                  "displayValue" : "Voice"
                }, {
                  "value" : "PAPER",
                  "displayValue" : "Paper"
                } ]
              },
              "signatureName" : {
                "type" : "STRING",
                "contexts" : [ "APPLICATION" ],
                "referenceName" : "insureds.inGoodHealthSignature.signatureName",
                "validationRules" : [ ],
                "required" : "false"
              },
              "signatureCity" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.inGoodHealthSignature.signatureCity",
                "validationRules" : [ ],
                "required" : "false"
              },
              "signatureState" : {
                "type" : "LOOKUP",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.inGoodHealthSignature.signatureState",
                "validationRules" : [ ],
                "required" : "false",
                "tableName" : "stateTbl",
                "column" : "state"
              },
              "signatureDate" : {
                "type" : "DATE",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.inGoodHealthSignature.signatureDate",
                "validationRules" : [ ],
                "required" : "false"
              },
              "signatureTimestamp" : {
                "type" : "DATETIME",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.inGoodHealthSignature.signatureTimestamp",
                "validationRules" : [ ],
                "required" : "false"
              }
            }
          },
          "birthState" : {
            "type" : "LOOKUP",
            "contexts" : [ "APPLICATION" ],
            "referenceName" : "insureds.birthState",
            "validationRules" : [ ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.birthCountry), 'UNITED STATES');\n  });\n}",
            "tableName" : "stateTbl",
            "column" : "state"
          },
          "birthCountry" : {
            "type" : "LOOKUP",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.birthCountry",
            "validationRules" : [ ],
            "required" : "true",
            "tableName" : "birthCountryTbl",
            "column" : "birthCountry"
          },
          "driversLicenseNumber" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.driversLicenseNumber",
            "validationRules" : [ ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    var value;\n    if (pmrl.isDefined(parent.driversLicenseIssueState)) {\n      value = true;\n    } else {\n      value = false;\n    }\n    return value;\n  });\n}"
          },
          "driversLicenseIssueState" : {
            "type" : "LOOKUP",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.driversLicenseIssueState",
            "validationRules" : [ ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    var value;\n    if (pmrl.isDefined(parent.driversLicenseNumber)) {\n      value = true;\n    } else {\n      value = false;\n    }\n    return value;\n  });\n}",
            "tableName" : "stateTbl",
            "column" : "state"
          },
          "otherCoverages" : {
            "type" : "LIST",
            "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "insureds.otherCoverages",
            "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var value = true;\n    if (pmrl.equal(context, 'QUOTE')) {\n      if (pmrl.equal(parent.additionalFields.otherCoverageQuestion, 'YES') && pmrl.equal(pmrl.length(parent.otherCoverages), Big('0'))) {\n        value = 'Please enter information for at least one policy.';\n      }\n    } else if (pmrl.equal(context, 'APPLICATION')) {\n      if (pmrl.equal(pmrl.length(parent.otherCoverages), Big('0')) && pmrl.isDefined(parent.additionalFields.insuranceInForce) && pmrl.isDefined(parent.additionalFields.insurancePendingOrAppliedFor) && pmrl.isDefined(parent.additionalFields.eligibleForAnyOtherInsurance) && (pmrl.equal(parent.additionalFields.insuranceInForce, 'YES') || pmrl.equal(parent.additionalFields.insurancePendingOrAppliedFor, 'YES') || pmrl.equal(parent.additionalFields.eligibleForAnyOtherInsurance, 'YES'))) {\n        value = 'Please enter information for at least one policy.';\n      }\n    }\n    return value;\n  });\n}", "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.otherCoverages), Big('0')) && pmrl.lessThanEqual(pmrl.length(parent.otherCoverages), Big('5'));\n  });\n}" ],
            "objectFields" : {
              "companyName" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.otherCoverages.companyName",
                "validationRules" : [ ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.parent.additionalFields.insuranceInForce, 'YES') || pmrl.equal(parent.parent.additionalFields.insurancePendingOrAppliedFor, 'YES') || pmrl.equal(parent.parent.additionalFields.eligibleForAnyOtherInsurance, 'YES');\n  });\n}"
              },
              "policyNumber" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.otherCoverages.policyNumber",
                "validationRules" : [ ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.parent.additionalFields.insuranceInForce, 'YES') || pmrl.equal(parent.parent.additionalFields.insurancePendingOrAppliedFor, 'YES') || pmrl.equal(parent.parent.additionalFields.eligibleForAnyOtherInsurance, 'YES');\n  });\n}"
              },
              "coverageType" : {
                "type" : "ENUM",
                "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.otherCoverages.coverageType",
                "validationRules" : [ ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.equal(context, 'QUOTE')) {\n      if (pmrl.equal(parent.parent.additionalFields.otherCoverageQuestion, 'YES')) {\n        value = true;\n      }\n    } else if (pmrl.equal(context, 'APPLICATION')) {\n      if (pmrl.isDefined(parent.parent.additionalFields.insuranceInForce) && pmrl.isDefined(parent.parent.additionalFields.insurancePendingOrAppliedFor) && pmrl.isDefined(parent.parent.additionalFields.eligibleForAnyOtherInsurance) && (pmrl.equal(parent.parent.additionalFields.insuranceInForce, 'YES') || pmrl.equal(parent.parent.additionalFields.insurancePendingOrAppliedFor, 'YES') || pmrl.equal(parent.parent.additionalFields.eligibleForAnyOtherInsurance, 'YES'))) {\n        value = true;\n      }\n    }\n    return value;\n  });\n}",
                "possibleValues" : [ {
                  "value" : "INDIVIDUAL",
                  "displayValue" : "Individual - EE Pay"
                }, {
                  "value" : "GROUP",
                  "displayValue" : "Group - ER Pay"
                }, {
                  "value" : "ASSOCIATION",
                  "displayValue" : "Association"
                }, {
                  "value" : "OVERHEAD_EXPENSE",
                  "displayValue" : "Overhead Expense"
                }, {
                  "value" : "OTHER",
                  "displayValue" : "Other"
                } ]
              },
              "coverageStatus" : {
                "type" : "ENUM",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.otherCoverages.coverageStatus",
                "validationRules" : [ ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.parent.additionalFields.insuranceInForce, 'YES') || pmrl.equal(parent.parent.additionalFields.insurancePendingOrAppliedFor, 'YES') || pmrl.equal(parent.parent.additionalFields.eligibleForAnyOtherInsurance, 'YES');\n  });\n}",
                "possibleValues" : [ {
                  "value" : "IN_FORCE",
                  "displayValue" : "In-Force"
                }, {
                  "value" : "PENDING",
                  "displayValue" : "Pending"
                }, {
                  "value" : "APPLIED_FOR_IN_LAST_12_MONTHS",
                  "displayValue" : "Applied for in last 12 months"
                }, {
                  "value" : "ELIGIBLE_IN_NEXT_36_MONTHS",
                  "displayValue" : "Eligible in next 36 months"
                } ]
              },
              "coverageReplacing" : {
                "type" : "ENUM",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.otherCoverages.coverageReplacing",
                "validationRules" : [ ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.parent.additionalFields.insuranceInForce, 'YES') || pmrl.equal(parent.parent.additionalFields.insurancePendingOrAppliedFor, 'YES') || pmrl.equal(parent.parent.additionalFields.eligibleForAnyOtherInsurance, 'YES');\n  });\n}",
                "possibleValues" : [ {
                  "value" : "YES",
                  "displayValue" : "Yes"
                }, {
                  "value" : "NO",
                  "displayValue" : "No"
                } ]
              },
              "payorType" : {
                "type" : "ENUM",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.otherCoverages.payorType",
                "validationRules" : [ ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.parent.additionalFields.insuranceInForce, 'YES') || pmrl.equal(parent.parent.additionalFields.insurancePendingOrAppliedFor, 'YES') || pmrl.equal(parent.parent.additionalFields.eligibleForAnyOtherInsurance, 'YES');\n  });\n}",
                "possibleValues" : [ {
                  "value" : "INDIVIDUAL",
                  "displayValue" : "Individual"
                }, {
                  "value" : "EMPLOYER",
                  "displayValue" : "Employer"
                }, {
                  "value" : "OTHER",
                  "displayValue" : "Other"
                } ]
              },
              "additionalFields" : {
                "type" : "OBJECT",
                "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.otherCoverages.additionalFields",
                "validationRules" : [ ],
                "objectFields" : {
                  "benefitAmountPercentageIncome" : {
                    "type" : "NUMBER",
                    "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.otherCoverages.additionalFields.benefitAmountPercentageIncome",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var otherCoverageAmount = Big('0');\n    var benefitType = parent.otherCoverageMonthlyBenefitType;\n    var specifiedAmount = parent.otherCoverageSpecifiedAmount;\n    var percentOfIncome = parent.otherCoveragePercentOfIncome;\n    var monthlyCap = parent.otherCoveragePercentMonthlyCap;\n    var annualIncome = parent.parent.parent.annualEarnedIncome;\n    if (pmrl.isDefined(benefitType)) {\n      if (pmrl.equal(benefitType, 'SPECIFIED_AMOUNT') && pmrl.isDefined(specifiedAmount)) {\n        otherCoverageAmount = specifiedAmount;\n      } else if (pmrl.equal(benefitType, 'PERCENT_OF_INCOME') && pmrl.isDefined(percentOfIncome) && pmrl.isDefined(annualIncome)) {\n        var monthlyIncome = pmrl.div(annualIncome, Big('12'));\n        otherCoverageAmount = pmrl.times(pmrl.div(percentOfIncome, Big('100')), monthlyIncome);\n        if (pmrl.isDefined(monthlyCap) && pmrl.lessThan(monthlyCap, otherCoverageAmount)) {\n          otherCoverageAmount = monthlyCap;\n        }\n      }\n    }\n    return otherCoverageAmount;\n  });\n}"
                  },
                  "eliminationPeriod" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.otherCoverages.additionalFields.eliminationPeriod",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.parent.parent.parent.insureds[Big('0')].additionalFields.insuranceInForce, 'YES') || pmrl.equal(parent.parent.parent.parent.insureds[Big('0')].additionalFields.insurancePendingOrAppliedFor, 'YES') || pmrl.equal(parent.parent.parent.parent.insureds[Big('0')].additionalFields.eligibleForAnyOtherInsurance, 'YES');\n  });\n}"
                  },
                  "benefitPeriod" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.otherCoverages.additionalFields.benefitPeriod",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.parent.parent.parent.insureds[Big('0')].additionalFields.insuranceInForce, 'YES') || pmrl.equal(parent.parent.parent.parent.insureds[Big('0')].additionalFields.insurancePendingOrAppliedFor, 'YES') || pmrl.equal(parent.parent.parent.parent.insureds[Big('0')].additionalFields.eligibleForAnyOtherInsurance, 'YES');\n  });\n}"
                  },
                  "coverageTypeCalculatedRule" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.otherCoverages.additionalFields.coverageTypeCalculatedRule",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(parent.parent.coverageType, 'INDIVIDUAL')) {\n      valid = 'I';\n    } else if (pmrl.equal(parent.parent.coverageType, 'GROUP')) {\n      valid = 'G';\n    } else if (pmrl.equal(parent.parent.coverageType, 'ASSOCIATION')) {\n      valid = 'A';\n    } else if (pmrl.equal(parent.parent.coverageType, 'OVERHEAD_EXPENSE')) {\n      valid = 'OE';\n    } else if (pmrl.equal(parent.parent.coverageType, 'OTHER')) {\n      valid = 'O';\n    }\n    return valid;\n  });\n}"
                  },
                  "coverageStatusCalculationRule" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.otherCoverages.additionalFields.coverageStatusCalculationRule",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(parent.parent.coverageStatus, 'IN_FORCE')) {\n      valid = 'I';\n    } else if (pmrl.equal(parent.parent.coverageStatus, 'PENDING')) {\n      valid = 'P';\n    } else if (pmrl.equal(parent.parent.coverageStatus, 'APPLIED_FOR_IN_LAST_12_MONTHS')) {\n      valid = 'A';\n    } else if (pmrl.equal(parent.parent.coverageStatus, 'ELIGIBLE_IN_NEXT_36_MONTHS')) {\n      valid = 'E';\n    }\n    return valid;\n  });\n}"
                  },
                  "payorTypeCalculationRule" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.otherCoverages.additionalFields.payorTypeCalculationRule",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(parent.parent.payorType, 'INDIVIDUAL')) {\n      valid = 'Individual';\n    } else if (pmrl.equal(parent.parent.payorType, 'EMPLOYER')) {\n      valid = 'Employer';\n    } else if (pmrl.equal(parent.parent.payorType, 'OTHER')) {\n      valid = 'Other';\n    }\n    return valid;\n  });\n}"
                  },
                  "otherCoverageMonthlyBenefitType" : {
                    "type" : "ENUM",
                    "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.otherCoverages.additionalFields.otherCoverageMonthlyBenefitType",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if (pmrl.equal(context, 'QUOTE')) {\n      if (pmrl.equal(parent.parent.parent.additionalFields.otherCoverageQuestion, 'YES')) {\n        valid = true;\n      }\n    } else if (pmrl.equal(context, 'APPLICATION')) {\n      if (pmrl.isDefined(parent.parent.parent.additionalFields.insuranceInForce) && pmrl.isDefined(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor) && pmrl.isDefined(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance) && (pmrl.equal(parent.parent.parent.additionalFields.insuranceInForce, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance, 'YES'))) {\n        valid = true;\n      }\n    }\n    return valid;\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "SPECIFIED_AMOUNT",
                      "displayValue" : "Specified Amount"
                    }, {
                      "value" : "PERCENT_OF_INCOME",
                      "displayValue" : "Percent of Income"
                    } ]
                  },
                  "otherCoverageSpecifiedAmount" : {
                    "type" : "NUMBER",
                    "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.otherCoverages.additionalFields.otherCoverageSpecifiedAmount",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if (pmrl.equal(context, 'QUOTE')) {\n      if (pmrl.equal(parent.parent.parent.additionalFields.otherCoverageQuestion, 'YES') && pmrl.equal(parent.otherCoverageMonthlyBenefitType, 'SPECIFIED_AMOUNT')) {\n        valid = true;\n      }\n    } else if (pmrl.equal(context, 'APPLICATION')) {\n      if ((pmrl.equal(parent.parent.parent.additionalFields.insuranceInForce, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance, 'YES')) && pmrl.equal(parent.otherCoverageMonthlyBenefitType, 'SPECIFIED_AMOUNT')) {\n        valid = true;\n      }\n    }\n    return valid;\n  });\n}"
                  },
                  "otherCoveragePercentOfIncome" : {
                    "type" : "NUMBER",
                    "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.otherCoverages.additionalFields.otherCoveragePercentOfIncome",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var value = true;\n    if (pmrl.lessThan(parent.otherCoveragePercentOfIncome, Big('1')) || pmrl.greaterThan(parent.otherCoveragePercentOfIncome, Big('100'))) {\n      value = 'Percentage amount must be a whole number between 1-100';\n    }\n    return value;\n  });\n}" ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if (pmrl.equal(context, 'QUOTE')) {\n      if (pmrl.equal(parent.parent.parent.additionalFields.otherCoverageQuestion, 'YES') && pmrl.equal(parent.otherCoverageMonthlyBenefitType, 'PERCENT_OF_INCOME')) {\n        valid = true;\n      }\n    } else if (pmrl.equal(context, 'APPLICATION')) {\n      if ((pmrl.equal(parent.parent.parent.additionalFields.insuranceInForce, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance, 'YES')) && pmrl.equal(parent.otherCoverageMonthlyBenefitType, 'PERCENT_OF_INCOME')) {\n        valid = true;\n      }\n    }\n    return valid;\n  });\n}"
                  },
                  "otherCoveragePercentMonthlyCap" : {
                    "type" : "NUMBER",
                    "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.otherCoverages.additionalFields.otherCoveragePercentMonthlyCap",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var value = true;\n    if (pmrl.lessThan(parent.otherCoveragePercentMonthlyCap, Big('1'))) {\n      value = 'Monthly cap must be greater than 0. If no cap exists, delete input.';\n    }\n    return value;\n  });\n}" ],
                    "required" : "false"
                  },
                  "scReplFormBenefitsOurPlan" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.otherCoverages.additionalFields.scReplFormBenefitsOurPlan",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if ((pmrl.equal(parent.parent.parent.additionalFields.insuranceInForce, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance, 'YES')) && pmrl.equal(parent.parent.parent.residentialAddress.state, 'SC') && pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) && pmrl.equal(parent.parent.coverageReplacing, 'YES')) {\n      valid = true;\n    }\n    return valid;\n  });\n}"
                  },
                  "scReplFormBenefitsExisitingPlan" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.otherCoverages.additionalFields.scReplFormBenefitsExisitingPlan",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if ((pmrl.equal(parent.parent.parent.additionalFields.insuranceInForce, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance, 'YES')) && pmrl.equal(parent.parent.parent.residentialAddress.state, 'SC') && pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) && pmrl.equal(parent.parent.coverageReplacing, 'YES')) {\n      valid = true;\n    }\n    return valid;\n  });\n}"
                  },
                  "scReplFormRenewalOurPlan" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.otherCoverages.additionalFields.scReplFormRenewalOurPlan",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if ((pmrl.equal(parent.parent.parent.additionalFields.insuranceInForce, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance, 'YES')) && pmrl.equal(parent.parent.parent.residentialAddress.state, 'SC') && pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) && pmrl.equal(parent.parent.coverageReplacing, 'YES')) {\n      valid = true;\n    }\n    return valid;\n  });\n}"
                  },
                  "scReplFormRenewalExisitingPlan" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.otherCoverages.additionalFields.scReplFormRenewalExisitingPlan",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if ((pmrl.equal(parent.parent.parent.additionalFields.insuranceInForce, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance, 'YES')) && pmrl.equal(parent.parent.parent.residentialAddress.state, 'SC') && pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) && pmrl.equal(parent.parent.coverageReplacing, 'YES')) {\n      valid = true;\n    }\n    return valid;\n  });\n}"
                  },
                  "scReplFormDefinitionOurPlan" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.otherCoverages.additionalFields.scReplFormDefinitionOurPlan",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if ((pmrl.equal(parent.parent.parent.additionalFields.insuranceInForce, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance, 'YES')) && pmrl.equal(parent.parent.parent.residentialAddress.state, 'SC') && pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) && pmrl.equal(parent.parent.coverageReplacing, 'YES')) {\n      valid = true;\n    }\n    return valid;\n  });\n}"
                  },
                  "scReplFormDefinitionExisitingPlan" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.otherCoverages.additionalFields.scReplFormDefinitionExisitingPlan",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if ((pmrl.equal(parent.parent.parent.additionalFields.insuranceInForce, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance, 'YES')) && pmrl.equal(parent.parent.parent.residentialAddress.state, 'SC') && pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) && pmrl.equal(parent.parent.coverageReplacing, 'YES')) {\n      valid = true;\n    }\n    return valid;\n  });\n}"
                  },
                  "scReplFormComparisonExplained" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.otherCoverages.additionalFields.scReplFormComparisonExplained",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if ((pmrl.equal(parent.parent.parent.additionalFields.insuranceInForce, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance, 'YES')) && pmrl.equal(parent.parent.parent.residentialAddress.state, 'SC') && pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) && pmrl.equal(parent.parent.coverageReplacing, 'YES')) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "PRODUCER",
                      "displayValue" : "The producer's review of my existing plan"
                    }, {
                      "value" : "SELF_PROVIDED",
                      "displayValue" : "Explanations I provided to the producer"
                    }, {
                      "value" : "WAIVE",
                      "displayValue" : "I have chosen to waive my right to have my exisiting plans reviewed"
                    } ]
                  },
                  "scReplFormPolicyApplyingCalc" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.otherCoverages.additionalFields.scReplFormPolicyApplyingCalc",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    return 'Accident Only Disability Insurance';\n  });\n}"
                  },
                  "premiumAmount" : {
                    "type" : "NUMBER",
                    "contexts" : [ "ADMIN" ],
                    "referenceName" : "insureds.otherCoverages.additionalFields.premiumAmount",
                    "validationRules" : [ ],
                    "required" : "false"
                  }
                }
              },
              "internalReplacement" : {
                "type" : "ENUM",
                "contexts" : [ "ADMIN" ],
                "referenceName" : "insureds.otherCoverages.internalReplacement",
                "validationRules" : [ ],
                "required" : "false",
                "possibleValues" : [ {
                  "value" : "YES",
                  "displayValue" : "Yes"
                }, {
                  "value" : "NO",
                  "displayValue" : "No"
                } ]
              }
            },
            "minItemCount" : "0",
            "maxItemCount" : "5"
          },
          "partyId" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.partyId",
            "validationRules" : [ ],
            "required" : "false"
          },
          "coverages" : {
            "type" : "OBJECT",
            "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.coverages",
            "validationRules" : [ ],
            "objectFields" : {
              "base" : {
                "type" : "LIST",
                "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.coverages.base",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.base), Big('1'));\n  });\n}" ],
                "objectFields" : {
                  "benefitAmount" : {
                    "type" : "NUMBER",
                    "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                    "referenceName" : "insureds.coverages.base.benefitAmount",
                    "validationRules" : [ ],
                    "required" : "true",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var startingTotalBenefit = Big('0');\n    if (pmrl.equal(context, 'APPLICATION') || pmrl.equal(context, 'QUOTE')) {\n      if (pmrl.isDefined(parent.additionalFields.benefitAmountType) && pmrl.equal(parent.additionalFields.benefitAmountType, 'MAXIMUM')) {\n        startingTotalBenefit = parent.additionalFields.baseMaximumBenefitAmount;\n      } else if (pmrl.isDefined(parent.additionalFields.benefitAmountType) && pmrl.equal(parent.additionalFields.benefitAmountType, 'SPECIFY')) {\n        startingTotalBenefit = parent.additionalFields.specifiedBenefitAmount;\n      }\n    }\n    return startingTotalBenefit;\n  });\n}",
                    "calculationCondition" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.notEqual(context, 'ADMIN');\n  });\n}"
                  },
                  "additionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                    "referenceName" : "insureds.coverages.base.additionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "description" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "ADMIN" ],
                        "referenceName" : "insureds.coverages.base.additionalFields.description",
                        "validationRules" : [ ],
                        "required" : "false",
                        "possibleValues" : [ {
                          "value" : "AIB",
                          "displayValue" : "AIB"
                        }, {
                          "value" : "BENEFIT_CHANGE",
                          "displayValue" : "Benefit Change"
                        }, {
                          "value" : "FIO",
                          "displayValue" : "FIO"
                        }, {
                          "value" : "SIS",
                          "displayValue" : "SIS"
                        } ]
                      },
                      "commentsInstructions" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "ADMIN" ],
                        "referenceName" : "insureds.coverages.base.additionalFields.commentsInstructions",
                        "validationRules" : [ ],
                        "required" : "false"
                      },
                      "discountAmount" : {
                        "type" : "NUMBER",
                        "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                        "referenceName" : "insureds.coverages.base.additionalFields.discountAmount",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var discountAmount = Big('0');\n    if (pmrl.isDefined(rates) && pmrl.isDefined(parent.parent.benefitAmount)) {\n      var discountAmount = pmrl.minus(parent.premBeforeDiscount, parent.parent.premiumAmount);\n    }\n    return discountAmount;\n  });\n}"
                      },
                      "premBeforeDiscount" : {
                        "type" : "NUMBER",
                        "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                        "referenceName" : "insureds.coverages.base.additionalFields.premBeforeDiscount",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var premiumAmountBeforeDiscount = Big('0');\n    if (pmrl.isDefined(rates) && pmrl.isDefined(parent.parent.benefitAmount)) {\n      var premiumAmountBeforeDiscount = pmrl.times(pmrl.times(rates[Big('0')].baseAo, parent.parent.benefitAmount), parent.parent.parent.parent.parent.additionalFields.policyFactorPercent);\n    }\n    return premiumAmountBeforeDiscount;\n  });\n}"
                      },
                      "benefitAmountType" : {
                        "type" : "ENUM",
                        "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.coverages.base.additionalFields.benefitAmountType",
                        "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var value = true;\n    if (pmrl.isDefined(parent.benefitAmountType) && (!pmrl.isDefined(parent.parent.parent.parent.parent.benefitPeriod) || !pmrl.isDefined(parent.parent.parent.parent.parent.additionalFields.specialRestrictionEmployee) || !pmrl.isDefined(parent.parent.parent.parent.annualEarnedIncome) || !pmrl.isDefined(parent.parent.parent.parent.occupationClass) || !pmrl.isDefined(parent.parent.parent.parent.additionalFields.selfEmployed) || !pmrl.isDefined(parent.parent.parent.parent.birthDate) || !pmrl.isDefined(parent.parent.parent.parent.parent.payors[Big('0')].additionalFields.proposedInsuredInsuredThePayor))) {\n      value = 'The following fields must be completed before selecting a benefit amount: Date of Birth, Benefit Period, Special Restriction Employee Status, Occupation Class, Annual Earned Income, Payor, and the Self Employed Question.';\n    }\n    return value;\n  });\n}" ],
                        "required" : "true",
                        "possibleValues" : [ {
                          "value" : "MAXIMUM",
                          "displayValue" : "Maximum Monthly Benefit"
                        }, {
                          "value" : "SPECIFY",
                          "displayValue" : "Specified Monthly Base Benefit"
                        } ]
                      },
                      "specifiedBenefitAmount" : {
                        "type" : "STRING",
                        "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.coverages.base.additionalFields.specifiedBenefitAmount",
                        "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var benefitPeriod = parent.parent.parent.parent.parent.benefitPeriod;\n    var annualEarnedIncome = parent.parent.parent.parent.annualEarnedIncome;\n    var occupationClass = parent.parent.parent.parent.occupationClass;\n    var selfEmployed = parent.parent.parent.parent.additionalFields.selfEmployed;\n    var isIndividualPaying;\n    var benefitAmount = parent.specifiedBenefitAmount;\n    var sisBenefitAmount;\n    var totalMonthlyMax = parent.parent.parent.parent.parent.additionalFields.totalMonthlyMaximumCalc;\n    var specialRestrictionEmployee = parent.parent.parent.parent.parent.additionalFields.specialRestrictionEmployee;\n    var startingTotalBenefit = Big('0');\n    if (pmrl.isDefined(parent.parent.parent.parent.parent.payors)) {\n      isIndividualPaying = parent.parent.parent.parent.parent.payors[Big('0')].additionalFields.proposedInsuredInsuredThePayor;\n    }\n    if (pmrl.isDefined(benefitPeriod) && pmrl.isDefined(annualEarnedIncome) && pmrl.greaterThanEqual(annualEarnedIncome, Big('15000')) && pmrl.isDefined(occupationClass) && pmrl.isDefined(selfEmployed) && pmrl.isDefined(specialRestrictionEmployee) && pmrl.isDefined(parent.parent.parent.parent.birthDate) && pmrl.isDefined(isIndividualPaying)) {\n      if (pmrl.equal(selfEmployed, \"NO\")) {\n        if (pmrl.equal(isIndividualPaying, \"YES\")) {\n          if (pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_6MO\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_1YR\")) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeQualTotalTbl\", {\n              annualEarnedIncome\n            }, \"total\");\n          } else if (pmrl.notEqual(occupationClass, \"OCCUPATION_CLASS_2A\") && pmrl.notEqual(occupationClass, \"OCCUPATION_CLASS_2M\") && pmrl.notEqual(occupationClass, \"OCCUPATION_CLASS_1A\") && (pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_2YR\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_5YR\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_10YR\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_TO_AGE_65\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_TO_AGE_67\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_TO_AGE_70\"))) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeQualTotalTbl\", {\n              annualEarnedIncome\n            }, \"total\");\n          } else {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeQualBaseTbl\", {\n              annualEarnedIncome\n            }, \"base\");\n          }\n        } else {\n          if (pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_6MO\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_1YR\")) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeErQualTotalTbl\", {\n              annualEarnedIncome\n            }, \"total\");\n          } else if (pmrl.notEqual(occupationClass, \"OCCUPATION_CLASS_2A\") && pmrl.notEqual(occupationClass, \"OCCUPATION_CLASS_2M\") && pmrl.notEqual(occupationClass, \"OCCUPATION_CLASS_1A\") && (pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_2YR\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_5YR\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_10YR\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_TO_AGE_65\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_TO_AGE_67\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_TO_AGE_70\"))) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeErQualTotalTbl\", {\n              annualEarnedIncome\n            }, \"total\");\n          } else {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeErQualBaseTbl\", {\n              annualEarnedIncome\n            }, \"base\");\n          }\n        }\n      } else {\n        if (pmrl.equal(isIndividualPaying, \"YES\")) {\n          if (pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_6MO\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_1YR\")) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeSeQualTotalTbl\", {\n              annualEarnedIncome\n            }, \"total\");\n          } else if (pmrl.notEqual(occupationClass, \"OCCUPATION_CLASS_2A\") && pmrl.notEqual(occupationClass, \"OCCUPATION_CLASS_2M\") && pmrl.notEqual(occupationClass, \"OCCUPATION_CLASS_1A\") && (pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_2YR\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_5YR\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_10YR\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_TO_AGE_65\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_TO_AGE_67\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_TO_AGE_70\"))) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeSeQualTotalTbl\", {\n              annualEarnedIncome\n            }, \"total\");\n          } else {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeSeQualBaseTbl\", {\n              annualEarnedIncome\n            }, \"base\");\n          }\n        } else {\n          if (pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_6MO\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_1YR\")) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeErSeQualTotalTbl\", {\n              annualEarnedIncome\n            }, \"total\");\n          } else if (pmrl.notEqual(occupationClass, \"OCCUPATION_CLASS_2A\") && pmrl.notEqual(occupationClass, \"OCCUPATION_CLASS_2M\") && pmrl.notEqual(occupationClass, \"OCCUPATION_CLASS_1A\") && (pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_2YR\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_5YR\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_10YR\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_TO_AGE_65\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_TO_AGE_67\") || pmrl.equal(benefitPeriod, \"BENEFIT_PERIOD_TO_AGE_70\"))) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeErSeQualTotalTbl\", {\n              annualEarnedIncome\n            }, \"total\");\n          } else {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeErSeQualBaseTbl\", {\n              annualEarnedIncome\n            }, \"base\");\n          }\n        }\n      }\n    }\n    if (pmrl.isDefined(parent.parent.parent.parent.coverages.sis)) {\n      sisBenefitAmount = parent.parent.parent.parent.coverages.sis[Big('0')].benefitAmount;\n    }\n    if (pmrl.isDefined(totalMonthlyMax)) {\n      if (pmrl.isDefined(parent.parent.parent.parent.coverages.sis) && pmrl.isDefined(sisBenefitAmount) && pmrl.greaterThan(pmrl.plus(startingTotalBenefit, sisBenefitAmount), totalMonthlyMax)) {\n        startingTotalBenefit = pmrl.minus(totalMonthlyMax, sisBenefitAmount);\n      } else if (pmrl.greaterThan(startingTotalBenefit, totalMonthlyMax)) {\n        startingTotalBenefit = totalMonthlyMax;\n      }\n    }\n    startingTotalBenefit = pmrl.times(pmrl.round(pmrl.div(pmrl.minus(startingTotalBenefit, Big('50')), Big('100')), Big('0')), Big('100'));\n    if (pmrl.lessThanEqual(startingTotalBenefit, Big('0'))) {\n      startingTotalBenefit = Big('0');\n    }\n    var returnValue = true;\n    if (pmrl.equal(parent.benefitAmountType, 'SPECIFY')) {\n      if (pmrl.isDefined(parent.benefitAmountType) && pmrl.equal(parent.benefitAmountType, 'SPECIFY') && pmrl.equal(occupationClass, 'OCCUPATION_CLASS_N')) {\n        returnValue = 'Client is not eligible for coverage based on chosen occupation.';\n      } else if (pmrl.isDefined(benefitAmount) && pmrl.lessThan(benefitAmount, Big('100'))) {\n        returnValue = 'Base benefit amount must be at least $100';\n      } else if (pmrl.isDefined(benefitPeriod) && pmrl.isDefined(annualEarnedIncome) && pmrl.isDefined(occupationClass) && pmrl.isDefined(selfEmployed) && pmrl.isDefined(parent.parent.parent.parent.birthDate) && pmrl.isDefined(isIndividualPaying) && pmrl.lessThan(startingTotalBenefit, Big('300'))) {\n        returnValue = 'Existing coverage exceeds maximum allowed. Client is not eligible for additional coverage.';\n      } else if (pmrl.isDefined(benefitPeriod) && pmrl.isDefined(annualEarnedIncome) && pmrl.isDefined(occupationClass) && pmrl.isDefined(selfEmployed) && pmrl.isDefined(parent.parent.parent.parent.birthDate) && pmrl.isDefined(isIndividualPaying) && pmrl.isDefined(benefitAmount) && pmrl.equal(parent.benefitAmountType, 'SPECIFY') && pmrl.greaterThan(benefitAmount, startingTotalBenefit)) {\n        returnValue = pmrl.concat('Base benefit amount exceeds benefit limit of $', startingTotalBenefit);\n      } else if (pmrl.isDefined(benefitAmount) && pmrl.notEqual(pmrl.mod(benefitAmount, Big('100')), Big('0'))) {\n        returnValue = 'The benefit amount must be in $100 increments.';\n      }\n    }\n    return returnValue;\n  });\n}" ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.benefitAmountType, 'SPECIFY');\n  });\n}"
                      },
                      "baseMaximumBenefitAmount" : {
                        "type" : "STRING",
                        "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.coverages.base.additionalFields.baseMaximumBenefitAmount",
                        "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var benefitPeriod = parent.parent.parent.parent.parent.benefitPeriod;\n    var annualEarnedIncome = parent.parent.parent.parent.annualEarnedIncome;\n    var occupationClass = parent.parent.parent.parent.occupationClass;\n    var selfEmployed = parent.parent.parent.parent.additionalFields.selfEmployed;\n    var maxBenefit = parent.baseMaximumBenefitAmount;\n    var totalMonthlyMax = parent.parent.parent.parent.parent.additionalFields.totalMonthlyMaximumCalc;\n    var otherCoverages = parent.parent.parent.parent.otherCoverages;\n    var isIndividualPaying = parent.parent.parent.parent.parent.payors[Big('0')].additionalFields.proposedInsuredInsuredThePayor;\n    var value = true;\n    if (pmrl.isDefined(parent.benefitAmountType) && pmrl.equal(parent.benefitAmountType, 'MAXIMUM') && pmrl.equal(occupationClass, 'OCCUPATION_CLASS_N')) {\n      value = 'Client is not eligible for coverage based on chosen occupation.';\n    } else if (pmrl.isDefined(benefitPeriod) && pmrl.isDefined(annualEarnedIncome) && pmrl.isDefined(occupationClass) && pmrl.isDefined(selfEmployed) && pmrl.isDefined(parent.parent.parent.parent.birthDate) && pmrl.isDefined(isIndividualPaying) && pmrl.greaterThan(pmrl.length(otherCoverages), Big('0')) && pmrl.isDefined(totalMonthlyMax) && pmrl.isDefined(maxBenefit) && pmrl.lessThan(maxBenefit, Big('100'))) {\n      value = 'Existing coverage exceeds maximum allowed. Client is not eligible for additional coverage.';\n    }\n    return value;\n  });\n}" ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var isIndividualPaying;\n    var issueLimit = parent.parent.parent.parent.additionalFields.issueLimit;\n    var benefitPeriod = parent.parent.parent.parent.parent.benefitPeriod;\n    var annualEarnedIncome = parent.parent.parent.parent.annualEarnedIncome;\n    var occupationClass = parent.parent.parent.parent.occupationClass;\n    var selfEmployed = parent.parent.parent.parent.additionalFields.selfEmployed;\n    var sisBenefitAmount;\n    var totalMonthlyMax = parent.parent.parent.parent.parent.additionalFields.totalMonthlyMaximumCalc;\n    var specialRestrictionEmployee = parent.parent.parent.parent.parent.additionalFields.specialRestrictionEmployee;\n    var startingTotalBenefit = Big('0');\n    if (pmrl.isDefined(parent.parent.parent.parent.parent.payors)) {\n      isIndividualPaying = parent.parent.parent.parent.parent.payors[Big('0')].additionalFields.proposedInsuredInsuredThePayor;\n    }\n    if (pmrl.isDefined(benefitPeriod) && pmrl.isDefined(annualEarnedIncome) && pmrl.greaterThanEqual(annualEarnedIncome, Big('15000')) && pmrl.isDefined(occupationClass) && pmrl.isDefined(specialRestrictionEmployee) && pmrl.isDefined(selfEmployed) && pmrl.isDefined(parent.parent.parent.parent.birthDate) && pmrl.isDefined(isIndividualPaying)) {\n      if (pmrl.equal(selfEmployed, 'NO')) {\n        if (pmrl.equal(isIndividualPaying, 'YES')) {\n          if (pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_6MO') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_1YR')) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeQualTotalTbl', {\n              annualEarnedIncome\n            }, 'total');\n          } else if (pmrl.notEqual(occupationClass, 'OCCUPATION_CLASS_2A') && pmrl.notEqual(occupationClass, 'OCCUPATION_CLASS_2M') && pmrl.notEqual(occupationClass, 'OCCUPATION_CLASS_1A') && (pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_2YR') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_5YR') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_10YR') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_TO_AGE_65') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_TO_AGE_67') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_TO_AGE_70'))) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeQualTotalTbl', {\n              annualEarnedIncome\n            }, 'total');\n          } else {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeQualBaseTbl', {\n              annualEarnedIncome\n            }, 'base');\n          }\n        } else {\n          if (pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_6MO') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_1YR')) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeErQualTotalTbl', {\n              annualEarnedIncome\n            }, 'total');\n          } else if (pmrl.notEqual(occupationClass, 'OCCUPATION_CLASS_2A') && pmrl.notEqual(occupationClass, 'OCCUPATION_CLASS_2M') && pmrl.notEqual(occupationClass, 'OCCUPATION_CLASS_1A') && (pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_2YR') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_5YR') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_10YR') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_TO_AGE_65') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_TO_AGE_67') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_TO_AGE_70'))) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeErQualTotalTbl', {\n              annualEarnedIncome\n            }, 'total');\n          } else {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeErQualBaseTbl', {\n              annualEarnedIncome\n            }, 'base');\n          }\n        }\n      } else {\n        if (pmrl.equal(isIndividualPaying, 'YES')) {\n          if (pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_6MO') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_1YR')) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeSeQualTotalTbl', {\n              annualEarnedIncome\n            }, 'total');\n          } else if (pmrl.notEqual(occupationClass, 'OCCUPATION_CLASS_2A') && pmrl.notEqual(occupationClass, 'OCCUPATION_CLASS_2M') && pmrl.notEqual(occupationClass, 'OCCUPATION_CLASS_1A') && (pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_2YR') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_5YR') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_10YR') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_TO_AGE_65') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_TO_AGE_67') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_TO_AGE_70'))) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeSeQualTotalTbl', {\n              annualEarnedIncome\n            }, 'total');\n          } else {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeSeQualBaseTbl', {\n              annualEarnedIncome\n            }, 'base');\n          }\n        } else {\n          if (pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_6MO') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_1YR')) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeErSeQualTotalTbl', {\n              annualEarnedIncome\n            }, 'total');\n          } else if (pmrl.notEqual(occupationClass, 'OCCUPATION_CLASS_2A') && pmrl.notEqual(occupationClass, 'OCCUPATION_CLASS_2M') && pmrl.notEqual(occupationClass, 'OCCUPATION_CLASS_1A') && (pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_2YR') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_5YR') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_10YR') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_TO_AGE_65') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_TO_AGE_67') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_TO_AGE_70'))) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeErSeQualTotalTbl', {\n              annualEarnedIncome\n            }, 'total');\n          } else {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeErSeQualBaseTbl', {\n              annualEarnedIncome\n            }, 'base');\n          }\n        }\n      }\n    }\n    if (pmrl.isDefined(parent.parent.parent.parent.coverages.sis)) {\n      sisBenefitAmount = parent.parent.parent.parent.coverages.sis[Big('0')].benefitAmount;\n    }\n    if (pmrl.isDefined(totalMonthlyMax)) {\n      if (pmrl.isDefined(parent.parent.parent.parent.coverages.sis) && pmrl.isDefined(sisBenefitAmount) && pmrl.greaterThan(pmrl.plus(startingTotalBenefit, sisBenefitAmount), totalMonthlyMax)) {\n        startingTotalBenefit = pmrl.minus(totalMonthlyMax, sisBenefitAmount);\n      } else if (pmrl.greaterThan(startingTotalBenefit, totalMonthlyMax)) {\n        startingTotalBenefit = totalMonthlyMax;\n      }\n    }\n    startingTotalBenefit = pmrl.times(pmrl.round(pmrl.div(pmrl.minus(startingTotalBenefit, Big('50')), Big('100')), Big('0')), Big('100'));\n    if (pmrl.lessThanEqual(startingTotalBenefit, Big('0'))) {\n      startingTotalBenefit = Big('0');\n    }\n    return startingTotalBenefit;\n  });\n}"
                      }
                    }
                  },
                  "premiumAmount" : {
                    "type" : "NUMBER",
                    "contexts" : [ "QUOTE", "ADMIN", "APPLICATION" ],
                    "referenceName" : "insureds.coverages.base.premiumAmount",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var premiumAmount = Big('0');\n    if (pmrl.isDefined(rates) && pmrl.isDefined(parent.benefitAmount)) {\n      var DECIMAL_PLACES_TO_ROUND = Big('2');\n      premiumAmount = pmrl.round(pmrl.times(parent.additionalFields.premBeforeDiscount, parent.parent.parent.parent.additionalFields.policyDiscountPercent), DECIMAL_PLACES_TO_ROUND);\n    }\n    return premiumAmount;\n  });\n}"
                  }
                },
                "minItemCount" : "1"
              },
              "sis" : {
                "type" : "LIST",
                "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.coverages.sis",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var minAge = Big('18');\n    var maxAge = Big('61');\n    var valid = true;\n    if (pmrl.greaterThan(pmrl.length(parent.sis), Big('0'))) {\n      var hasUndefinedFields = false;\n      var invalidAge = false;\n      var invalidPeriod = false;\n      var govEmployeeChosen = false;\n      var groupCoverage = false;\n      if (!pmrl.isDefined(parent.parent.additionalFields.issueAge) || !pmrl.isDefined(parent.parent.parent.benefitPeriod) || !pmrl.isDefined(parent.parent.parent.additionalFields.specialRestrictionEmployee)) {\n        hasUndefinedFields = true;\n        valid = \"Birth Date, Benefit Period, and Special Restriction Employee must be entered for the SIS Benefit.\";\n      } else {\n        if (pmrl.lessThan(parent.parent.additionalFields.issueAge, minAge) || pmrl.greaterThan(parent.parent.additionalFields.issueAge, maxAge)) {\n          invalidAge = true;\n          var valid = \"The SIS Rider is available to ages 18 thru 61.\";\n        } else {\n          invalidAge = false;\n        }\n        if (pmrl.equal(parent.parent.parent.benefitPeriod, \"BENEFIT_PERIOD_6MO\") || pmrl.equal(parent.parent.parent.benefitPeriod, \"BENEFIT_PERIOD_1YR\")) {\n          invalidPeriod = true;\n          var invalidPeriodMsg = \"SIS is not available with Benefit Periods of 6 Months or 1 Year.\";\n        } else {\n          invalidPeriod = false;\n        }\n        if (pmrl.equal(parent.parent.parent.additionalFields.specialRestrictionEmployee, \"GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL\")) {\n          govEmployeeChosen = true;\n          var govEmployeeWarning = \"SIS is not available to Government Employees.\";\n        } else {\n          govEmployeeChosen = false;\n        }\n        if (pmrl.isDefined(parent.parent.otherCoverages)) {\n          for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.parent.otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n            if (pmrl.equal(parent.parent.otherCoverages[i].coverageType, \"GROUP\")) {\n              groupCoverage = true;\n              var groupCoverageWarning = \"SIS not available when a Group policy is present.\";\n            } else {\n              groupCoverage = false;\n            }\n          }\n        }\n      }\n      if (invalidAge) {\n        valid = \"Coverage is available to ages 18 thru 61.\";\n      } else if (invalidPeriod) {\n        valid = \"SIS is not available with Benefit Periods of 6 Months and 1 Year.\";\n      } else if (govEmployeeChosen) {\n        valid = \"SIS is not available to Government Employees.\";\n      } else if (groupCoverage) {\n        valid = \"SIS not available when a Group policy is present.\";\n      } else if (hasUndefinedFields) {\n        valid = \"Birth Date, Benefit Period, and Special Restriction Employee must be entered for the SIS Benefit.\";\n      } else {\n        valid = true;\n      }\n      return valid;\n    }\n  });\n}", "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.sis), Big('1'));\n  });\n}" ],
                "objectFields" : {
                  "benefitAmount" : {
                    "type" : "NUMBER",
                    "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                    "referenceName" : "insureds.coverages.sis.benefitAmount",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var startingTotalBenefit = Big('0');\n    if (pmrl.equal(context, 'APPLICATION') || pmrl.equal(context, 'QUOTE')) {\n      if (pmrl.isDefined(parent.additionalFields.sisBenefitAmountType) && pmrl.equal(parent.additionalFields.sisBenefitAmountType, 'MAXIMUM')) {\n        startingTotalBenefit = parent.additionalFields.sisMaximumBenefitAmount;\n      } else if (pmrl.isDefined(parent.additionalFields.sisBenefitAmountType) && pmrl.equal(parent.additionalFields.sisBenefitAmountType, 'SPECIFY')) {\n        startingTotalBenefit = parent.additionalFields.sisSpecifiedBenefitAmount;\n      }\n    }\n    return startingTotalBenefit;\n  });\n}",
                    "calculationCondition" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.notEqual(context, 'ADMIN');\n  });\n}"
                  },
                  "additionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                    "referenceName" : "insureds.coverages.sis.additionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "description" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "ADMIN" ],
                        "referenceName" : "insureds.coverages.sis.additionalFields.description",
                        "validationRules" : [ ],
                        "required" : "false",
                        "possibleValues" : [ {
                          "value" : "AIB",
                          "displayValue" : "AIB"
                        }, {
                          "value" : "BENEFIT_CHANGE",
                          "displayValue" : "Benefit Change"
                        }, {
                          "value" : "FIO",
                          "displayValue" : "FIO"
                        }, {
                          "value" : "SIS",
                          "displayValue" : "SIS"
                        } ]
                      },
                      "commentsInstructions" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "ADMIN" ],
                        "referenceName" : "insureds.coverages.sis.additionalFields.commentsInstructions",
                        "validationRules" : [ ],
                        "required" : "false"
                      },
                      "sisCalculatedCheckbox" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.coverages.sis.additionalFields.sisCalculatedCheckbox",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.greaterThan(pmrl.length(parent.parent.parent.sis), Big('0'))) {\n      valid = 'YES';\n    } else {\n      valid = 'NO';\n    }\n    return valid;\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "discountAmount" : {
                        "type" : "NUMBER",
                        "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                        "referenceName" : "insureds.coverages.sis.additionalFields.discountAmount",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var discountAmount = Big('0');\n    if (pmrl.isDefined(rates) && pmrl.isDefined(parent.parent.benefitAmount)) {\n      var discountAmount = pmrl.minus(parent.premBeforeDiscount, parent.parent.premiumAmount);\n    }\n    return discountAmount;\n  });\n}"
                      },
                      "premBeforeDiscount" : {
                        "type" : "NUMBER",
                        "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                        "referenceName" : "insureds.coverages.sis.additionalFields.premBeforeDiscount",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var premiumAmountBeforeDiscount = Big('0');\n    if (pmrl.isDefined(rates) && pmrl.isDefined(parent.parent.benefitAmount)) {\n      var premiumAmountBeforeDiscount = pmrl.times(pmrl.times(rates[Big('0')].sisAo, parent.parent.benefitAmount), parent.parent.parent.parent.parent.additionalFields.policyFactorPercent);\n    }\n    return premiumAmountBeforeDiscount;\n  });\n}"
                      },
                      "sisBenefitAmountType" : {
                        "type" : "ENUM",
                        "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.coverages.sis.additionalFields.sisBenefitAmountType",
                        "validationRules" : [ ],
                        "required" : "false",
                        "possibleValues" : [ {
                          "value" : "MAXIMUM",
                          "displayValue" : "Maximum Monthly SIS Benefit"
                        }, {
                          "value" : "SPECIFY",
                          "displayValue" : "Specified Monthly SIS Benefit"
                        } ]
                      },
                      "sisSpecifiedBenefitAmount" : {
                        "type" : "STRING",
                        "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.coverages.sis.additionalFields.sisSpecifiedBenefitAmount",
                        "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var benefitAmount = parent.sisSpecifiedBenefitAmount;\n    var annualEarnedIncome = parent.parent.parent.parent.annualEarnedIncome;\n    var selfEmployed = parent.parent.parent.parent.additionalFields.selfEmployed;\n    var isIndividualPaying = parent.parent.parent.parent.parent.payors[Big('0')].additionalFields.proposedInsuredInsuredThePayor;\n    var otherCoverages = parent.parent.parent.parent.otherCoverages;\n    var startingTotalBenefit;\n    var returnValue = true;\n    var groupPolicies = Big('0');\n    var specialRestrictionEmployee = parent.parent.parent.parent.parent.additionalFields.specialRestrictionEmployee;\n    var totalAmountToSubtract = Big('0');\n    var totalAmountToSubtract = Big('0');\n    if (pmrl.isDefined(specialRestrictionEmployee) && pmrl.notEqual(specialRestrictionEmployee, 'STUDENT')) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        var multiCoverageTypes = parent.parent.parent.parent.otherCoverages[i].coverageType;\n        var multipleBenefitPercentageIncome = parent.parent.parent.parent.otherCoverages[i].additionalFields.benefitAmountPercentageIncome;\n        if (pmrl.equal(multiCoverageTypes, \"INDIVIDUAL\") || pmrl.equal(multiCoverageTypes, \"ASSOCIATION\")) {\n          totalAmountToSubtract = pmrl.plus(totalAmountToSubtract, multipleBenefitPercentageIncome);\n        } else if (pmrl.equal(multiCoverageTypes, \"GROUP\")) {\n          groupPolicies = pmrl.plus(groupPolicies, Big('1'));\n        }\n      }\n    }\n    if (pmrl.isDefined(specialRestrictionEmployee) && pmrl.notEqual(specialRestrictionEmployee, 'STUDENT')) {\n      if (pmrl.equal(groupPolicies, Big('0'))) {\n        if (pmrl.equal(selfEmployed, 'NO')) {\n          if (pmrl.equal(isIndividualPaying, \"YES\")) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeQualSisTbl\", {\n              annualEarnedIncome\n            }, \"sis\");\n          } else {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeErQualSisTbl\", {\n              annualEarnedIncome\n            }, \"sis\");\n          }\n        } else {\n          if (pmrl.equal(isIndividualPaying, \"YES\")) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeSeQualSisTbl\", {\n              annualEarnedIncome\n            }, \"sis\");\n          } else {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeErSeQualSisTbl\", {\n              annualEarnedIncome\n            }, \"sis\");\n          }\n        }\n      }\n    } else {\n      startingTotalBenefit = Big('2600');\n    }\n    var SISAllowableBenefit = pmrl.minus(startingTotalBenefit, totalAmountToSubtract);\n    SISAllowableBenefit = pmrl.times(pmrl.round(pmrl.div(pmrl.minus(SISAllowableBenefit, Big('50')), Big('100')), Big('0')), Big('100'));\n    if (pmrl.isDefined(benefitAmount)) {\n      if (pmrl.lessThanEqual(SISAllowableBenefit, Big('0'))) {\n        returnValue = 'The client is not eligible due to the amount of existing coverage. Click the Remove button to delete the benefit from the policy.';\n      } else if (!pmrl.greaterThanEqual(SISAllowableBenefit, benefitAmount)) {\n        returnValue = pmrl.concat('The requested amount of $', benefitAmount, ' exceeds the SIS allowable benefit of $', SISAllowableBenefit, '.');\n      } else if (pmrl.lessThan(benefitAmount, Big('100'))) {\n        returnValue = 'SIS benefit amount must be at least $100.';\n      } else if (pmrl.greaterThan(benefitAmount, Big('2600'))) {\n        returnValue = 'The client cannot exceed $2600 in SIS benefits.';\n      } else if (pmrl.isDefined(benefitAmount) && pmrl.notEqual(pmrl.mod(benefitAmount, Big('100')), Big('0'))) {\n        returnValue = 'The benefit amount must be in $100 increments.';\n      }\n    }\n    return returnValue;\n  });\n}" ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.sisBenefitAmountType, 'SPECIFY');\n  });\n}"
                      },
                      "sisMaximumBenefitAmount" : {
                        "type" : "STRING",
                        "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.coverages.sis.additionalFields.sisMaximumBenefitAmount",
                        "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var benefitPeriod = parent.parent.parent.parent.parent.benefitPeriod;\n    var annualEarnedIncome = parent.parent.parent.parent.annualEarnedIncome;\n    var occupationClass = parent.parent.parent.parent.occupationClass;\n    var selfEmployed = parent.parent.parent.parent.additionalFields.selfEmployed;\n    var maxBenefit = parent.sisMaximumBenefitAmount;\n    var otherCoverages = parent.parent.parent.parent.otherCoverages;\n    var isIndividualPaying = parent.parent.parent.parent.parent.payors[Big('0')].additionalFields.proposedInsuredInsuredThePayor;\n    var value = true;\n    if (pmrl.greaterThan(pmrl.length(otherCoverages), Big('0')) && pmrl.isDefined(maxBenefit) && pmrl.lessThan(maxBenefit, Big('100'))) {\n      value = 'Existing coverage exceeds maximum SIS allowed. Client is not eligible for SIS coverage.';\n    }\n    return value;\n  });\n}" ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var annualEarnedIncome = parent.parent.parent.parent.annualEarnedIncome;\n    var selfEmployed = parent.parent.parent.parent.additionalFields.selfEmployed;\n    var isIndividualPaying;\n    var otherCoverages = parent.parent.parent.parent.otherCoverages;\n    var startingTotalBenefit = Big('0');\n    var groupPolicies = Big('0');\n    var specialRestrictionEmployee = parent.parent.parent.parent.parent.additionalFields.specialRestrictionEmployee;\n    if (pmrl.isDefined(parent.parent.parent.parent.parent.payors)) {\n      isIndividualPaying = parent.parent.parent.parent.parent.payors[Big('0')].additionalFields.proposedInsuredInsuredThePayor;\n    }\n    var totalAmountToSubtract = Big('0');\n    if (pmrl.isDefined(specialRestrictionEmployee) && pmrl.notEqual(specialRestrictionEmployee, 'STUDENT')) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        var multiCoverageTypes = parent.parent.parent.parent.otherCoverages[i].coverageType;\n        var multipleBenefitPercentageIncome = parent.parent.parent.parent.otherCoverages[i].additionalFields.benefitAmountPercentageIncome;\n        if (pmrl.equal(multiCoverageTypes, 'INDIVIDUAL') || pmrl.equal(multiCoverageTypes, 'ASSOCIATION')) {\n          totalAmountToSubtract = pmrl.plus(totalAmountToSubtract, multipleBenefitPercentageIncome);\n        } else if (pmrl.equal(multiCoverageTypes, 'GROUP')) {\n          groupPolicies = pmrl.plus(groupPolicies, Big('1'));\n        }\n      }\n    }\n    var SISAllowableBenefit = Big('0');\n    if (pmrl.isDefined(specialRestrictionEmployee) && pmrl.notEqual(specialRestrictionEmployee, 'STUDENT')) {\n      if (pmrl.equal(groupPolicies, Big('0'))) {\n        if (pmrl.equal(selfEmployed, 'NO')) {\n          if (pmrl.equal(isIndividualPaying, 'YES')) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeQualSisTbl', {\n              annualEarnedIncome\n            }, 'sis');\n          } else {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeErQualSisTbl', {\n              annualEarnedIncome\n            }, 'sis');\n          }\n        } else {\n          if (pmrl.equal(isIndividualPaying, 'YES')) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeSeQualSisTbl', {\n              annualEarnedIncome\n            }, 'sis');\n          } else {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeErSeQualSisTbl', {\n              annualEarnedIncome\n            }, 'sis');\n          }\n        }\n      }\n    } else {\n      startingTotalBenefit = Big('2600');\n    }\n    SISAllowableBenefit = pmrl.minus(startingTotalBenefit, totalAmountToSubtract);\n    SISAllowableBenefit = pmrl.times(pmrl.round(pmrl.div(pmrl.minus(SISAllowableBenefit, Big('50')), Big('100')), Big('0')), Big('100'));\n    if (pmrl.lessThan(SISAllowableBenefit, Big('0'))) {\n      SISAllowableBenefit = Big('0');\n    }\n    return SISAllowableBenefit;\n  });\n}"
                      }
                    }
                  },
                  "premiumAmount" : {
                    "type" : "NUMBER",
                    "contexts" : [ "QUOTE", "ADMIN", "APPLICATION" ],
                    "referenceName" : "insureds.coverages.sis.premiumAmount",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var premiumAmount = Big('0');\n    if (pmrl.isDefined(rates) && pmrl.isDefined(parent.benefitAmount)) {\n      var DECIMAL_PLACES_TO_ROUND = Big('2');\n      premiumAmount = pmrl.round(pmrl.times(parent.additionalFields.premBeforeDiscount, parent.parent.parent.parent.additionalFields.policyDiscountPercent), DECIMAL_PLACES_TO_ROUND);\n    }\n    return premiumAmount;\n  });\n}"
                  }
                },
                "maxItemCount" : "1"
              },
              "autoIncreaseBenefitRider" : {
                "type" : "LIST",
                "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.coverages.autoIncreaseBenefitRider",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var minAge = Big('18');\n    var maxAge = Big('55');\n    var valid = true;\n    if (pmrl.greaterThan(pmrl.length(parent.autoIncreaseBenefitRider), Big('0'))) {\n      var hasUndefinedFields = false;\n      var invalidAge = false;\n      if (!pmrl.isDefined(parent.parent.additionalFields.age)) {\n        hasUndefinedFields = true;\n        valid = \"Date of Birth must be entered before selecting the AIB Benefit.\";\n      } else {\n        if (pmrl.lessThan(parent.parent.additionalFields.age, minAge) || pmrl.greaterThan(parent.parent.additionalFields.age, maxAge)) valid = \"Coverage is available to ages 18 thru 55.\";\n      }\n    }\n    return valid;\n  });\n}", "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.autoIncreaseBenefitRider), Big('1'));\n  });\n}" ],
                "objectFields" : {
                  "additionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                    "referenceName" : "insureds.coverages.autoIncreaseBenefitRider.additionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "description" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "ADMIN" ],
                        "referenceName" : "insureds.coverages.autoIncreaseBenefitRider.additionalFields.description",
                        "validationRules" : [ ],
                        "required" : "false",
                        "possibleValues" : [ {
                          "value" : "AIB",
                          "displayValue" : "AIB"
                        }, {
                          "value" : "BENEFIT_CHANGE",
                          "displayValue" : "Benefit Change"
                        }, {
                          "value" : "FIO",
                          "displayValue" : "FIO"
                        }, {
                          "value" : "SIS",
                          "displayValue" : "SIS"
                        } ]
                      },
                      "commentsInstructions" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "ADMIN" ],
                        "referenceName" : "insureds.coverages.autoIncreaseBenefitRider.additionalFields.commentsInstructions",
                        "validationRules" : [ ],
                        "required" : "false"
                      },
                      "aibCalculatedCheckbox" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.coverages.autoIncreaseBenefitRider.additionalFields.aibCalculatedCheckbox",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.greaterThan(pmrl.length(parent.parent.parent.autoIncreaseBenefitRider), Big('0'))) {\n      valid = 'YES';\n    } else {\n      valid = 'NO';\n    }\n    return valid;\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      }
                    }
                  },
                  "premiumAmount" : {
                    "type" : "NUMBER",
                    "contexts" : [ "QUOTE", "ADMIN", "APPLICATION" ],
                    "referenceName" : "insureds.coverages.autoIncreaseBenefitRider.premiumAmount",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    return Big('0');\n  });\n}"
                  }
                },
                "maxItemCount" : "1"
              },
              "futureInsurabilityOptionRider" : {
                "type" : "LIST",
                "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.coverages.futureInsurabilityOptionRider",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var minAge = Big('18');\n    var maxAge = Big('51');\n    var valid = true;\n    if (pmrl.greaterThan(pmrl.length(parent.futureInsurabilityOptionRider), Big('0'))) {\n      var benefitAmount = parent.base[Big('0')].benefitAmount;\n      var totalBenefitAmount = parent.parent.parent.additionalFields.totalMonthlyBenefitAmount;\n      var totalMonthlyMax = parent.parent.parent.additionalFields.totalMonthlyMaximumCalc;\n      if (!pmrl.isDefined(parent.parent.additionalFields.age) || !pmrl.isDefined(parent.parent.parent.additionalFields.specialRestrictionEmployee) || !pmrl.isDefined(benefitAmount)) {\n        valid = \"Birth Date, Special Restriction Employee Status, and Base Benefit Amount must be entered for the FIO Benefit.\";\n      } else if (pmrl.lessThan(parent.parent.additionalFields.age, minAge) || pmrl.greaterThan(parent.parent.additionalFields.age, maxAge)) {\n        valid = \"Coverage is available to ages 18 thru 51.\";\n      } else if (pmrl.equal(parent.parent.parent.additionalFields.specialRestrictionEmployee, \"GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL\")) {\n        valid = \"FIO Benefit is not available to Government Employees.\";\n      } else if (pmrl.isDefined(totalMonthlyMax)) {\n        var fioMin = pmrl.times(pmrl.round(pmrl.div(pmrl.plus(pmrl.times(totalMonthlyMax, Big('.75')), Big('49')), Big('100')), Big('0')), Big('100'));\n        if (pmrl.lessThan(totalBenefitAmount, fioMin)) {\n          valid = pmrl.concat('Based on previous inputs, the minimum base benefit for FIO on this policy is $', fioMin, '.');\n        }\n      }\n      return valid;\n    }\n  });\n}", "{\n  (function (parent, context, tables, rates) {\n    return pmrl.lessThanEqual(pmrl.length(parent.futureInsurabilityOptionRider), Big('1'));\n  });\n}" ],
                "objectFields" : {
                  "additionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                    "referenceName" : "insureds.coverages.futureInsurabilityOptionRider.additionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "description" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "ADMIN" ],
                        "referenceName" : "insureds.coverages.futureInsurabilityOptionRider.additionalFields.description",
                        "validationRules" : [ ],
                        "required" : "false",
                        "possibleValues" : [ {
                          "value" : "AIB",
                          "displayValue" : "AIB"
                        }, {
                          "value" : "BENEFIT_CHANGE",
                          "displayValue" : "Benefit Change"
                        }, {
                          "value" : "FIO",
                          "displayValue" : "FIO"
                        }, {
                          "value" : "SIS",
                          "displayValue" : "SIS"
                        } ]
                      },
                      "commentsInstructions" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "ADMIN" ],
                        "referenceName" : "insureds.coverages.futureInsurabilityOptionRider.additionalFields.commentsInstructions",
                        "validationRules" : [ ],
                        "required" : "false"
                      },
                      "fioCalculatedCheckbox" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.coverages.futureInsurabilityOptionRider.additionalFields.fioCalculatedCheckbox",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.greaterThan(pmrl.length(parent.parent.parent.futureInsurabilityOptionRider), Big('0'))) {\n      valid = 'YES';\n    } else {\n      valid = 'NO';\n    }\n    return valid;\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      }
                    }
                  },
                  "premiumAmount" : {
                    "type" : "NUMBER",
                    "contexts" : [ "QUOTE", "ADMIN", "APPLICATION" ],
                    "referenceName" : "insureds.coverages.futureInsurabilityOptionRider.premiumAmount",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    return Big('0');\n  });\n}"
                  }
                },
                "maxItemCount" : "1"
              }
            }
          },
          "additionalFields" : {
            "type" : "OBJECT",
            "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.additionalFields",
            "validationRules" : [ ],
            "objectFields" : {
              "insuranceInForce" : {
                "type" : "ENUM",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.additionalFields.insuranceInForce",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var value = true;\n    if (pmrl.greaterThan(pmrl.length(parent.parent.otherCoverages), Big('0')) && pmrl.equal(parent.insuranceInForce, 'NO') && pmrl.equal(parent.insurancePendingOrAppliedFor, 'NO') && pmrl.equal(parent.eligibleForAnyOtherInsurance, 'NO')) {\n      value = 'The Other Coverage input has changed. Please click Remove on all Other Coverage boxes below.';\n    }\n    return value;\n  });\n}" ],
                "required" : "true",
                "possibleValues" : [ {
                  "value" : "YES",
                  "displayValue" : "Yes"
                }, {
                  "value" : "NO",
                  "displayValue" : "No"
                } ]
              },
              "insurancePendingOrAppliedFor" : {
                "type" : "ENUM",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.additionalFields.insurancePendingOrAppliedFor",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var value = true;\n    if (pmrl.greaterThan(pmrl.length(parent.parent.otherCoverages), Big('0')) && pmrl.equal(parent.insuranceInForce, 'NO') && pmrl.equal(parent.insurancePendingOrAppliedFor, 'NO') && pmrl.equal(parent.eligibleForAnyOtherInsurance, 'NO')) {\n      value = 'The Other Coverage input has changed. Please click Remove on all Other Coverage boxes below.';\n    }\n    return value;\n  });\n}" ],
                "required" : "true",
                "possibleValues" : [ {
                  "value" : "YES",
                  "displayValue" : "Yes"
                }, {
                  "value" : "NO",
                  "displayValue" : "No"
                } ]
              },
              "eligibleForAnyOtherInsurance" : {
                "type" : "ENUM",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.additionalFields.eligibleForAnyOtherInsurance",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var value = true;\n    if (pmrl.greaterThan(pmrl.length(parent.parent.otherCoverages), Big('0')) && pmrl.equal(parent.insuranceInForce, 'NO') && pmrl.equal(parent.insurancePendingOrAppliedFor, 'NO') && pmrl.equal(parent.eligibleForAnyOtherInsurance, 'NO')) {\n      value = 'The Other Coverage input has changed. Please click Remove on all Other Coverage boxes below.';\n    }\n    return value;\n  });\n}" ],
                "required" : "true",
                "possibleValues" : [ {
                  "value" : "YES",
                  "displayValue" : "Yes"
                }, {
                  "value" : "NO",
                  "displayValue" : "No"
                } ]
              },
              "insuredFullName" : {
                "type" : "STRING",
                "contexts" : [ "QUOTE", "APPLICATION" ],
                "referenceName" : "insureds.additionalFields.insuredFullName",
                "validationRules" : [ ],
                "required" : "false",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var value = '';\n    if (pmrl.isDefined(parent.parent.firstName)) {\n      value = pmrl.concat(pmrl.concat(value, ''), parent.parent.firstName);\n    }\n    if (pmrl.isDefined(parent.parent.middleName)) {\n      value = pmrl.concat(pmrl.concat(value, ' '), parent.parent.middleName);\n    }\n    if (pmrl.isDefined(parent.parent.lastName)) {\n      value = pmrl.concat(pmrl.concat(value, ' '), parent.parent.lastName);\n    }\n    return value;\n  });\n}"
              },
              "issueLimit" : {
                "type" : "NUMBER",
                "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.additionalFields.issueLimit",
                "validationRules" : [ ],
                "required" : "false",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var minAge = Big('18');\n    var maxAge = Big('61');\n    var issue = Big('0');\n    var occupationClass = parent.parent.occupationClass;\n    var issueAge = parent.issueAge;\n    if (pmrl.isDefined(occupationClass) && pmrl.notEqual(occupationClass, 'OCCUPATION_CLASS_N') && pmrl.isDefined(issueAge) && pmrl.greaterThanEqual(issueAge, minAge) && pmrl.lessThanEqual(issueAge, maxAge)) {\n      issue = pmrl.exactLookup(tables, 'issueLimitTbl', {\n        occupationClass\n      }, 'issueLimit');\n    }\n    return issue;\n  });\n}"
              },
              "age" : {
                "type" : "NUMBER",
                "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.additionalFields.age",
                "validationRules" : [ ],
                "required" : "false",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var age = null;\n    var birthDate = parent.parent.birthDate;\n    if (pmrl.isDefined(birthDate)) {\n      var relativeToDate = pmrl.dateNow();\n      var birthDateIsLeapDay = pmrl.equal(pmrl.getMonth(birthDate), Big('2')) && pmrl.equal(pmrl.getDayOfMonth(birthDate), Big('29'));\n      var relativeToYear = pmrl.getYear(relativeToDate);\n      var relativeToLeapYear = pmrl.equal(pmrl.mod(relativeToYear, Big('4')), Big('0')) && (pmrl.notEqual(pmrl.mod(relativeToYear, Big('100')), Big('0')) || pmrl.equal(pmrl.mod(relativeToYear, Big('400')), Big('0')));\n      var birthMonth = pmrl.getMonth(birthDate);\n      var birthDayOfMonth = pmrl.getDayOfMonth(birthDate);\n      if (birthDateIsLeapDay && !relativeToLeapYear) {\n        birthMonth = Big('3');\n        birthDayOfMonth = Big('1');\n      }\n      birthDate = pmrl.plusDays(pmrl.dateFromComponents(pmrl.getYear(birthDate), birthMonth, birthDayOfMonth, Big('0'), Big('0'), Big('0')), Big('1'));\n      age = pmrl.minus(pmrl.getYear(relativeToDate), pmrl.getYear(birthDate));\n      var monthDifference = pmrl.minus(pmrl.getMonth(relativeToDate), pmrl.getMonth(birthDate));\n      var adjustment = Big('0');\n      if (pmrl.lessThan(monthDifference, Big('0'))) {\n        adjustment = pmrl.minus(Big('0'), Big('1'));\n      } else if (pmrl.equal(monthDifference, Big('0'))) {\n        var relativeToDateTimeWithinMonth = pmrl.plus(pmrl.plus(pmrl.plus(pmrl.times(pmrl.times(pmrl.times(pmrl.getDayOfMonth(relativeToDate), Big('24')), Big('60')), Big('60')), pmrl.times(pmrl.times(pmrl.getHours(relativeToDate), Big('60')), Big('60'))), pmrl.times(pmrl.getMinutes(relativeToDate), Big('60'))), pmrl.getSeconds(relativeToDate));\n        var birthDateTimeWithinMonth = pmrl.plus(pmrl.plus(pmrl.plus(pmrl.times(pmrl.times(pmrl.times(pmrl.getDayOfMonth(birthDate), Big('24')), Big('60')), Big('60')), pmrl.times(pmrl.times(pmrl.getHours(birthDate), Big('60')), Big('60'))), pmrl.times(pmrl.getMinutes(birthDate), Big('60'))), pmrl.getSeconds(birthDate));\n        if (pmrl.lessThanEqual(pmrl.minus(relativeToDateTimeWithinMonth, birthDateTimeWithinMonth), Big('0'))) {\n          adjustment = pmrl.minus(Big('0'), Big('1'));\n        }\n      }\n      age = pmrl.plus(age, adjustment);\n    }\n    return age;\n  });\n}"
              },
              "issueAge" : {
                "type" : "NUMBER",
                "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.additionalFields.issueAge",
                "validationRules" : [ ],
                "required" : "false",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var age = null;\n    var birthDate = parent.parent.birthDate;\n    if (pmrl.isDefined(birthDate)) {\n      var relativeToDate = pmrl.dateNow();\n      if (pmrl.isDefined(parent.parent.applicationSignature) && pmrl.isDefined(parent.parent.applicationSignature.signatureTimestamp) && pmrl.greaterThan(pmrl.length(parent.parent.parent.sellingProducers), Big('0')) && pmrl.isDefined(parent.parent.parent.sellingProducers[Big('0')].applicationSignature.signatureTimestamp)) {\n        if (pmrl.greaterThan(pmrl.getTime(parent.parent.applicationSignature.signatureTimestamp), pmrl.getTime(parent.parent.parent.sellingProducers[Big('0')].applicationSignature.signatureTimestamp))) {\n          relativeToDate = parent.parent.applicationSignature.signatureTimestamp;\n        } else {\n          relativeToDate = parent.parent.parent.sellingProducers[Big('0')].applicationSignature.signatureTimestamp;\n        }\n        relativeToDate = pmrl.minusHours(pmrl.minusDays(relativeToDate, Big('30')), Big('12'));\n      }\n      var birthDateIsLeapDay = pmrl.equal(pmrl.getMonth(birthDate), Big('2')) && pmrl.equal(pmrl.getDayOfMonth(birthDate), Big('29'));\n      var relativeToYear = pmrl.getYear(relativeToDate);\n      var relativeToLeapYear = pmrl.equal(pmrl.mod(relativeToYear, Big('4')), Big('0')) && (pmrl.notEqual(pmrl.mod(relativeToYear, Big('100')), Big('0')) || pmrl.equal(pmrl.mod(relativeToYear, Big('400')), Big('0')));\n      var birthMonth = pmrl.getMonth(birthDate);\n      var birthDayOfMonth = pmrl.getDayOfMonth(birthDate);\n      if (birthDateIsLeapDay && !relativeToLeapYear) {\n        birthMonth = Big('3');\n        birthDayOfMonth = Big('1');\n      }\n      birthDate = pmrl.plusDays(pmrl.dateFromComponents(pmrl.getYear(birthDate), birthMonth, birthDayOfMonth, Big('0'), Big('0'), Big('0')), Big('1'));\n      age = pmrl.minus(pmrl.getYear(relativeToDate), pmrl.getYear(birthDate));\n      var monthDifference = pmrl.minus(pmrl.getMonth(relativeToDate), pmrl.getMonth(birthDate));\n      var adjustment = Big('0');\n      if (pmrl.lessThan(monthDifference, Big('0'))) {\n        adjustment = pmrl.minus(Big('0'), Big('1'));\n      } else if (pmrl.equal(monthDifference, Big('0'))) {\n        var relativeToDateTimeWithinMonth = pmrl.plus(pmrl.plus(pmrl.plus(pmrl.times(pmrl.times(pmrl.times(pmrl.getDayOfMonth(relativeToDate), Big('24')), Big('60')), Big('60')), pmrl.times(pmrl.times(pmrl.getHours(relativeToDate), Big('60')), Big('60'))), pmrl.times(pmrl.getMinutes(relativeToDate), Big('60'))), pmrl.getSeconds(relativeToDate));\n        var birthDateTimeWithinMonth = pmrl.plus(pmrl.plus(pmrl.plus(pmrl.times(pmrl.times(pmrl.times(pmrl.getDayOfMonth(birthDate), Big('24')), Big('60')), Big('60')), pmrl.times(pmrl.times(pmrl.getHours(birthDate), Big('60')), Big('60'))), pmrl.times(pmrl.getMinutes(birthDate), Big('60'))), pmrl.getSeconds(birthDate));\n        if (pmrl.lessThanEqual(pmrl.minus(relativeToDateTimeWithinMonth, birthDateTimeWithinMonth), Big('0'))) {\n          adjustment = pmrl.minus(Big('0'), Big('1'));\n        }\n      }\n      var ageBeforeAdjustment = age;\n      age = pmrl.plus(age, adjustment);\n      if (pmrl.equal(ageBeforeAdjustment, Big('18')) && pmrl.equal(age, Big('17'))) {\n        age = Big('18');\n      }\n    }\n    return age;\n  });\n}"
              },
              "fullResidentialAddress" : {
                "type" : "STRING",
                "contexts" : [ "APPLICATION" ],
                "referenceName" : "insureds.additionalFields.fullResidentialAddress",
                "validationRules" : [ ],
                "required" : "false",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var value = parent.parent.residentialAddress.addressLine1;\n    if (pmrl.isDefined(parent.parent.residentialAddress.addressLine2)) {\n      value = pmrl.concat(pmrl.concat(value, ' '), parent.parent.residentialAddress.addressLine2);\n    }\n    if (pmrl.isDefined(parent.parent.residentialAddress.city)) {\n      value = pmrl.concat(pmrl.concat(value, ' '), parent.parent.residentialAddress.city);\n    }\n    if (pmrl.isDefined(parent.parent.residentialAddress.state)) {\n      value = pmrl.concat(pmrl.concat(value, ' '), parent.parent.residentialAddress.state);\n    }\n    if (pmrl.isDefined(parent.parent.residentialAddress.zipCode)) {\n      value = pmrl.concat(pmrl.concat(value, ' '), parent.parent.residentialAddress.zipCode);\n    }\n    return value;\n  });\n}"
              },
              "fullMailingAddress" : {
                "type" : "STRING",
                "contexts" : [ "APPLICATION" ],
                "referenceName" : "insureds.additionalFields.fullMailingAddress",
                "validationRules" : [ ],
                "required" : "false",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var value = parent.parent.mailingAddress.addressLine1;\n    if (pmrl.isDefined(parent.parent.mailingAddress.addressLine2)) {\n      value = pmrl.concat(pmrl.concat(value, ' '), parent.parent.mailingAddress.addressLine2);\n    }\n    if (pmrl.isDefined(parent.parent.mailingAddress.city)) {\n      value = pmrl.concat(pmrl.concat(value, ' '), parent.parent.mailingAddress.city);\n    }\n    if (pmrl.isDefined(parent.parent.mailingAddress.state)) {\n      value = pmrl.concat(pmrl.concat(value, ' '), parent.parent.mailingAddress.state);\n    }\n    if (pmrl.isDefined(parent.parent.mailingAddress.zipCode)) {\n      value = pmrl.concat(pmrl.concat(value, ' '), parent.parent.mailingAddress.zipCode);\n    }\n    return value;\n  });\n}"
              },
              "countryOther" : {
                "type" : "STRING",
                "contexts" : [ "APPLICATION" ],
                "referenceName" : "insureds.additionalFields.countryOther",
                "validationRules" : [ ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.parent.birthCountry, 'OTHER');\n  });\n}",
                "format" : "[a-zA-Z' -]+"
              },
              "estimatedGraduationDate" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.additionalFields.estimatedGraduationDate",
                "validationRules" : [ ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.parent.parent.additionalFields.specialRestrictionEmployee, 'STUDENT');\n  });\n}"
              },
              "estimatedGraduationDateCalculation" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.additionalFields.estimatedGraduationDateCalculation",
                "validationRules" : [ ],
                "required" : "false",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var value;\n    var date = parent.estimatedGraduationDate;\n    if (pmrl.isDefined(parent.estimatedGraduationDate)) {\n      value = pmrl.concat('Estimated Student Program Graduation Date: ', date);\n    }\n    return value;\n  });\n}"
              },
              "mailingAddressIndicator" : {
                "type" : "ENUM",
                "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.additionalFields.mailingAddressIndicator",
                "validationRules" : [ ],
                "required" : "false",
                "possibleValues" : [ {
                  "value" : "YES",
                  "displayValue" : "Yes"
                }, {
                  "value" : "NO",
                  "displayValue" : "No"
                } ]
              },
              "birthStateOrCountryField" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.additionalFields.birthStateOrCountryField",
                "validationRules" : [ ],
                "required" : "false",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(pmrl.toUpperCase(parent.parent.birthCountry), 'UNITED STATES')) {\n      valid = parent.parent.birthState;\n    } else {\n      if (pmrl.equal(pmrl.toUpperCase(parent.parent.birthCountry), 'OTHER')) {\n        valid = parent.countryOther;\n      } else {\n        valid = parent.parent.birthCountry;\n      }\n    }\n    return valid;\n  });\n}"
              },
              "selfEmployed" : {
                "type" : "ENUM",
                "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.additionalFields.selfEmployed",
                "validationRules" : [ ],
                "required" : "true",
                "possibleValues" : [ {
                  "value" : "YES",
                  "displayValue" : "Yes"
                }, {
                  "value" : "NO",
                  "displayValue" : "No"
                } ]
              },
              "occupationDescription" : {
                "type" : "LOOKUP",
                "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.additionalFields.occupationDescription",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid = true;\n    if (pmrl.equal(parent.occupationSpecialty, 'NATIONAL_GUARD_DEFAULT_TO_FT_OCC')) {\n      valid = 'Please enter the full time occupation of the client.';\n    } else if (pmrl.equal(parent.parent.parent.additionalFields.specialRestrictionEmployee, 'STUDENT') && pmrl.isDefined(parent.occupationDescription) && pmrl.notEqual(parent.occupationDescription, 'STUDENT')) {\n      valid = 'If client is applying under the Student Program, change occupation to Student.';\n    }\n    return valid;\n  });\n}" ],
                "required" : "true",
                "tableName" : "occDescrTbl",
                "column" : "occupationDescription"
              },
              "occupationSpecialty" : {
                "type" : "LOOKUP",
                "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.additionalFields.occupationSpecialty",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(parent.parent.occupationClass, 'OCCUPATION_CLASS_N')) {\n      valid = 'This occupation is uninsurable. Premium calculation not available.';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                "required" : "true",
                "tableName" : "occSpecTbl",
                "column" : "occupationSpecialty",
                "filters" : [ "parent.occupationDescription" ]
              },
              "occupationCode" : {
                "type" : "LOOKUP",
                "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.additionalFields.occupationCode",
                "validationRules" : [ ],
                "required" : "false",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var occCode = pmrl.exactLookup(tables, 'occCodeTbl', {\n      occupationSpecialty: parent.occupationSpecialty\n    }, 'occupationCode');\n    return occCode;\n  });\n}",
                "tableName" : "occCodeTbl",
                "column" : "occupationCode",
                "filters" : [ "parent.occupationSpecialty" ]
              },
              "otherNamesUsed" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.additionalFields.otherNamesUsed",
                "validationRules" : [ ],
                "required" : "false"
              },
              "automaticEntryCalculation" : {
                "type" : "ENUM",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.additionalFields.automaticEntryCalculation",
                "validationRules" : [ ],
                "required" : "false",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.greaterThan(parent.parent.parent.additionalFields.totalMonthlyBenefitAmount, Big('0'))) {\n      valid = 'YES';\n    } else {\n      valid = 'NO';\n    }\n    return valid;\n  });\n}",
                "possibleValues" : [ {
                  "value" : "YES",
                  "displayValue" : "Yes"
                }, {
                  "value" : "NO",
                  "displayValue" : "No"
                } ]
              },
              "otherCoverageQuestion" : {
                "type" : "ENUM",
                "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.additionalFields.otherCoverageQuestion",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var value = true;\n    if (pmrl.equal(context, 'QUOTE') && pmrl.equal(parent.otherCoverageQuestion, 'NO') && pmrl.greaterThan(pmrl.length(parent.parent.otherCoverages), Big('0'))) {\n      value = 'You have changed your answer. Please click Remove on all Other Coverage boxes below.';\n    }\n    return value;\n  });\n}" ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.equal(context, 'QUOTE')) {\n      value = true;\n    }\n    return value;\n  });\n}",
                "possibleValues" : [ {
                  "value" : "YES",
                  "displayValue" : "Yes"
                }, {
                  "value" : "NO",
                  "displayValue" : "No"
                } ]
              },
              "riskClassConditionDetails" : {
                "type" : "LIST",
                "contexts" : [ "ADMIN" ],
                "referenceName" : "insureds.additionalFields.riskClassConditionDetails",
                "validationRules" : [ ],
                "objectFields" : {
                  "code" : {
                    "type" : "LOOKUP",
                    "contexts" : [ "ADMIN" ],
                    "referenceName" : "insureds.additionalFields.riskClassConditionDetails.code",
                    "validationRules" : [ ],
                    "required" : "false",
                    "tableName" : "policyExclusionTbl",
                    "column" : "code"
                  },
                  "detail" : {
                    "type" : "STRING",
                    "contexts" : [ "ADMIN" ],
                    "referenceName" : "insureds.additionalFields.riskClassConditionDetails.detail",
                    "validationRules" : [ ],
                    "required" : "false"
                  }
                }
              }
            }
          },
          "underwritingFactors" : {
            "type" : "OBJECT",
            "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "insureds.underwritingFactors",
            "validationRules" : [ ],
            "objectFields" : {
              "activityFactors" : {
                "type" : "OBJECT",
                "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.underwritingFactors.activityFactors",
                "validationRules" : [ ],
                "objectFields" : {
                  "activityQuestion" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityQuestion",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && ((!pmrl.isDefined(parent.activityUnderwaterDiving) || pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'NO')) && (!pmrl.isDefined(parent.activityClimbing) || pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'NO')) && (!pmrl.isDefined(parent.activityRacing) || pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'NO')) && (!pmrl.isDefined(parent.activityAerial) || pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'NO')) && (!pmrl.isDefined(parent.activityOtherActivities) || pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'NO')))) {\n      valid = 'Please select at least one activity category below';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityUnderwaterDiving" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityUnderwaterDiving",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && ((!pmrl.isDefined(parent.activityScubaDiving) || pmrl.equal(pmrl.toUpperCase(parent.activityScubaDiving), 'NO')) && (!pmrl.isDefined(parent.activitySkinDiving) || pmrl.equal(pmrl.toUpperCase(parent.activitySkinDiving), 'NO')) && (!pmrl.isDefined(parent.activityCaveDiving) || pmrl.equal(pmrl.toUpperCase(parent.activityCaveDiving), 'NO')) && (!pmrl.isDefined(parent.activityOtherDiving) || pmrl.equal(pmrl.toUpperCase(parent.activityOtherDiving), 'NO')))) {\n      valid = 'Please select at least one activity type below';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityScubaDiving" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityScubaDiving",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityScubaDivingNumOfDives" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityScubaDivingNumOfDives",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityScubaDiving), 'YES');\n  });\n}"
                  },
                  "activityScubaDivingDateLastDive" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityScubaDivingDateLastDive",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityScubaDiving), 'YES');\n  });\n}"
                  },
                  "activityScubaDivingNumOfDivesFuture" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityScubaDivingNumOfDivesFuture",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityScubaDiving), 'YES');\n  });\n}"
                  },
                  "activitySkinDiving" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activitySkinDiving",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activitySkinDivingNumOfDives" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activitySkinDivingNumOfDives",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySkinDiving), 'YES');\n  });\n}"
                  },
                  "activitySkinDivingDateLastDive" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activitySkinDivingDateLastDive",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySkinDiving), 'YES');\n  });\n}"
                  },
                  "activitySkinDivingNumOfDivesFuture" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activitySkinDivingNumOfDivesFuture",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySkinDiving), 'YES');\n  });\n}"
                  },
                  "activityCaveDiving" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityCaveDiving",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityCaveDivingNumOfDives" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityCaveDivingNumOfDives",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityCaveDiving), 'YES');\n  });\n}"
                  },
                  "activityCaveDivingDateLastDive" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityCaveDivingDateLastDive",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityCaveDiving), 'YES');\n  });\n}"
                  },
                  "activityCaveDivingNumOfDivesFuture" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityCaveDivingNumOfDivesFuture",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityCaveDiving), 'YES');\n  });\n}"
                  },
                  "activityOtherDiving" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherDiving",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityOtherDivingDescription" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherDivingDescription",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherDiving), 'YES');\n  });\n}"
                  },
                  "activityOtherDivingNumOfDives" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherDivingNumOfDives",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherDiving), 'YES');\n  });\n}"
                  },
                  "activityOtherDivingDateLastDive" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherDivingDateLastDive",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherDiving), 'YES');\n  });\n}"
                  },
                  "activityOtherDivingNumOfDivesFuture" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherDivingNumOfDivesFuture",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherDiving), 'YES');\n  });\n}"
                  },
                  "activitySpecialtyDiving" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activitySpecialtyDiving",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activitySpecialtyDivingDetails" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activitySpecialtyDivingDetails",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySpecialtyDiving), 'YES');\n  });\n}"
                  },
                  "activityClimbing" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityClimbing",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && ((!pmrl.isDefined(parent.activityRockClimbing) || pmrl.equal(pmrl.toUpperCase(parent.activityRockClimbing), 'NO')) && (!pmrl.isDefined(parent.activityIceClimbing) || pmrl.equal(pmrl.toUpperCase(parent.activityIceClimbing), 'NO')) && (!pmrl.isDefined(parent.activityTrailClimbing) || pmrl.equal(pmrl.toUpperCase(parent.activityTrailClimbing), 'NO')) && (!pmrl.isDefined(parent.activitySnowClimbing) || pmrl.equal(pmrl.toUpperCase(parent.activitySnowClimbing), 'NO')) && (!pmrl.isDefined(parent.activityIndoorClimbing) || pmrl.equal(pmrl.toUpperCase(parent.activityIndoorClimbing), 'NO')) && (!pmrl.isDefined(parent.activityOtherClimbing) || pmrl.equal(pmrl.toUpperCase(parent.activityOtherClimbing), 'NO')))) {\n      valid = 'Please select at least one activity type below';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityRockClimbing" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityRockClimbing",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityRockClimbingNumOfClimbs" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityRockClimbingNumOfClimbs",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRockClimbing), 'YES');\n  });\n}"
                  },
                  "activityRockClimbingDateLastClimb" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityRockClimbingDateLastClimb",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRockClimbing), 'YES');\n  });\n}"
                  },
                  "activityRockClimbingNumOfClimbsFuture" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityRockClimbingNumOfClimbsFuture",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRockClimbing), 'YES');\n  });\n}"
                  },
                  "activityRockClimbEquipment" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityRockClimbEquipment",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRockClimbing), 'YES');\n  });\n}"
                  },
                  "activityIceClimbing" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityIceClimbing",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityIceClimbingNumOfClimbs" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityIceClimbingNumOfClimbs",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityIceClimbing), 'YES');\n  });\n}"
                  },
                  "activityIceClimbingDateLastClimb" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityIceClimbingDateLastClimb",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityIceClimbing), 'YES');\n  });\n}"
                  },
                  "activityIceClimbingNumOfClimbsFuture" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityIceClimbingNumOfClimbsFuture",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityIceClimbing), 'YES');\n  });\n}"
                  },
                  "activityIceClimbEquipment" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityIceClimbEquipment",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityIceClimbing), 'YES');\n  });\n}"
                  },
                  "activityTrailClimbing" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityTrailClimbing",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityTrailClimbingNumOfClimbs" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityTrailClimbingNumOfClimbs",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityTrailClimbing), 'YES');\n  });\n}"
                  },
                  "activityTrailClimbingDateLastClimb" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityTrailClimbingDateLastClimb",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityTrailClimbing), 'YES');\n  });\n}"
                  },
                  "activityTrailClimbingNumOfClimbsFuture" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityTrailClimbingNumOfClimbsFuture",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityTrailClimbing), 'YES');\n  });\n}"
                  },
                  "activityTrailClimbingEquipment" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityTrailClimbingEquipment",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityTrailClimbing), 'YES');\n  });\n}"
                  },
                  "activitySnowClimbing" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activitySnowClimbing",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activitySnowClimbingNumOfClimbs" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activitySnowClimbingNumOfClimbs",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySnowClimbing), 'YES');\n  });\n}"
                  },
                  "activitySnowClimbingDateLastClimb" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activitySnowClimbingDateLastClimb",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySnowClimbing), 'YES');\n  });\n}"
                  },
                  "activitySnowClimbingNumOfClimbsFuture" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activitySnowClimbingNumOfClimbsFuture",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySnowClimbing), 'YES');\n  });\n}"
                  },
                  "activitySnowClimbingEquipment" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activitySnowClimbingEquipment",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySnowClimbing), 'YES');\n  });\n}"
                  },
                  "activityIndoorClimbing" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityIndoorClimbing",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityIndoorClimbingNumOfClimbs" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityIndoorClimbingNumOfClimbs",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityIndoorClimbing), 'YES');\n  });\n}"
                  },
                  "activityIndoorClimbingDateLastClimb" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityIndoorClimbingDateLastClimb",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityIndoorClimbing), 'YES');\n  });\n}"
                  },
                  "activityIndoorClimbingNumOfClimbsFuture" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityIndoorClimbingNumOfClimbsFuture",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityIndoorClimbing), 'YES');\n  });\n}"
                  },
                  "activityIndoorClimbEquipment" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityIndoorClimbEquipment",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityIndoorClimbing), 'YES');\n  });\n}"
                  },
                  "activityOtherClimbing" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherClimbing",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityOtherClimbingDescription" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherClimbingDescription",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherClimbing), 'YES');\n  });\n}"
                  },
                  "activityOtherClimbingNumOfClimbs" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherClimbingNumOfClimbs",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherClimbing), 'YES');\n  });\n}"
                  },
                  "activityOtherClimbingDateLastClimb" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherClimbingDateLastClimb",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherClimbing), 'YES');\n  });\n}"
                  },
                  "activityOtherClimbingNumOfClimbsFuture" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherClimbingNumOfClimbsFuture",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherClimbing), 'YES');\n  });\n}"
                  },
                  "activityOtherClimbEquipment" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherClimbEquipment",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherClimbing), 'YES');\n  });\n}"
                  },
                  "activityRacing" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityRacing",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && ((!pmrl.isDefined(parent.activityCarRacing) || pmrl.equal(pmrl.toUpperCase(parent.activityCarRacing), 'NO')) && (!pmrl.isDefined(parent.activityMotorcycleRacing) || pmrl.equal(pmrl.toUpperCase(parent.activityMotorcycleRacing), 'NO')) && (!pmrl.isDefined(parent.activityWatercraftRacing) || pmrl.equal(pmrl.toUpperCase(parent.activityWatercraftRacing), 'NO')) && (!pmrl.isDefined(parent.activityBicycleRacing) || pmrl.equal(pmrl.toUpperCase(parent.activityBicycleRacing), 'NO')) && (!pmrl.isDefined(parent.activitySkiRacing) || pmrl.equal(pmrl.toUpperCase(parent.activitySkiRacing), 'NO')) && (!pmrl.isDefined(parent.activityOtherRacing) || pmrl.equal(pmrl.toUpperCase(parent.activityOtherRacing), 'NO')))) {\n      valid = 'Please select at least one activity type below';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityCarRacing" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityCarRacing",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityCarRacingNumOfRaces" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityCarRacingNumOfRaces",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityCarRacing), 'YES');\n  });\n}"
                  },
                  "activityCarRacingDateLastRace" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityCarRacingDateLastRace",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityCarRacing), 'YES');\n  });\n}"
                  },
                  "activityCarRacingNumOfRacesFuture" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityCarRacingNumOfRacesFuture",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityCarRacing), 'YES');\n  });\n}"
                  },
                  "activityCarRaceSanctionedBy" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityCarRaceSanctionedBy",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityCarRacing), 'YES');\n  });\n}"
                  },
                  "activityMotorcycleRacing" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityMotorcycleRacing",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityMotorcycleRacingNumOfRaces" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityMotorcycleRacingNumOfRaces",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityMotorcycleRacing), 'YES');\n  });\n}"
                  },
                  "activityMotorcycleRacingDateLastRace" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityMotorcycleRacingDateLastRace",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityMotorcycleRacing), 'YES');\n  });\n}"
                  },
                  "activityMotorcycleRacingNumOfRacesFuture" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityMotorcycleRacingNumOfRacesFuture",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityMotorcycleRacing), 'YES');\n  });\n}"
                  },
                  "activityMotorcycleRaceSanctionedBy" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityMotorcycleRaceSanctionedBy",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityMotorcycleRacing), 'YES');\n  });\n}"
                  },
                  "activityWatercraftRacing" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityWatercraftRacing",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityWatercraftRacingNumOfRaces" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityWatercraftRacingNumOfRaces",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityWatercraftRacing), 'YES');\n  });\n}"
                  },
                  "activityWatercraftRacingDateLastRace" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityWatercraftRacingDateLastRace",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityWatercraftRacing), 'YES');\n  });\n}"
                  },
                  "activityWatercraftRacingNumOfRacesFuture" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityWatercraftRacingNumOfRacesFuture",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityWatercraftRacing), 'YES');\n  });\n}"
                  },
                  "activityWatercraftRaceSanctionedBy" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityWatercraftRaceSanctionedBy",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityWatercraftRacing), 'YES');\n  });\n}"
                  },
                  "activityBicycleRacing" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityBicycleRacing",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityBicycleRacingNumOfRaces" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityBicycleRacingNumOfRaces",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityBicycleRacing), 'YES');\n  });\n}"
                  },
                  "activityBicycleRacingDateLastRace" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityBicycleRacingDateLastRace",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityBicycleRacing), 'YES');\n  });\n}"
                  },
                  "activityBicycleRacingNumOfRacesFuture" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityBicycleRacingNumOfRacesFuture",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityBicycleRacing), 'YES');\n  });\n}"
                  },
                  "activityBicycleRaceSanctionedBy" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityBicycleRaceSanctionedBy",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityBicycleRacing), 'YES');\n  });\n}"
                  },
                  "activitySkiRacing" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activitySkiRacing",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activitySkiRacingNumOfRaces" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activitySkiRacingNumOfRaces",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySkiRacing), 'YES');\n  });\n}"
                  },
                  "activitySkiRacingDateLastRace" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activitySkiRacingDateLastRace",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySkiRacing), 'YES');\n  });\n}"
                  },
                  "activitySkiRacingNumOfRacesFuture" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activitySkiRacingNumOfRacesFuture",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySkiRacing), 'YES');\n  });\n}"
                  },
                  "activitySkiRaceSanctionedBy" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activitySkiRaceSanctionedBy",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySkiRacing), 'YES');\n  });\n}"
                  },
                  "activityOtherRacing" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherRacing",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityOtherRacingDescription" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherRacingDescription",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherRacing), 'YES');\n  });\n}"
                  },
                  "activityOtherRacingNumOfRaces" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherRacingNumOfRaces",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherRacing), 'YES');\n  });\n}"
                  },
                  "activityOtherRacingDateLastRace" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherRacingDateLastRace",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherRacing), 'YES');\n  });\n}"
                  },
                  "activityOtherRacingNumOfRacesFuture" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherRacingNumOfRacesFuture",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherRacing), 'YES');\n  });\n}"
                  },
                  "activityOtherRaceSanctionedBy" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherRaceSanctionedBy",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherRacing), 'YES');\n  });\n}"
                  },
                  "activityAerial" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAerial",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && ((!pmrl.isDefined(parent.activityAerialSkyDiving) || pmrl.equal(pmrl.toUpperCase(parent.activityAerialSkyDiving), 'NO')) && (!pmrl.isDefined(parent.activityAerialHangGliding) || pmrl.equal(pmrl.toUpperCase(parent.activityAerialHangGliding), 'NO')) && (!pmrl.isDefined(parent.activityAerialBaseJumping) || pmrl.equal(pmrl.toUpperCase(parent.activityAerialBaseJumping), 'NO')) && (!pmrl.isDefined(parent.activityAerialBungeeJumping) || pmrl.equal(pmrl.toUpperCase(parent.activityAerialBungeeJumping), 'NO')) && (!pmrl.isDefined(parent.activityAerialOther) || pmrl.equal(pmrl.toUpperCase(parent.activityAerialOther), 'NO')))) {\n      valid = 'Please select at least one activity type below';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityAerialSkyDiving" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAerialSkyDiving",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityAerialSkyDivingNumOfActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAerialSkyDivingNumOfActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialSkyDiving), 'YES');\n  });\n}"
                  },
                  "activityAerialSkyDivingDateLastActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAerialSkyDivingDateLastActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialSkyDiving), 'YES');\n  });\n}"
                  },
                  "activityAerialSkyDivingNumOfFutureActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAerialSkyDivingNumOfFutureActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialSkyDiving), 'YES');\n  });\n}"
                  },
                  "activityAerialHangGliding" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAerialHangGliding",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityAerialHangGlidingNumOfActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAerialHangGlidingNumOfActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialHangGliding), 'YES');\n  });\n}"
                  },
                  "activityAerialHangGlidingDateLastActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAerialHangGlidingDateLastActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialHangGliding), 'YES');\n  });\n}"
                  },
                  "activityAerialHangGlidingNumOfFutureActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAerialHangGlidingNumOfFutureActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialHangGliding), 'YES');\n  });\n}"
                  },
                  "activityAerialBaseJumping" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAerialBaseJumping",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityAerialBaseJumpingNumOfActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAerialBaseJumpingNumOfActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialBaseJumping), 'YES');\n  });\n}"
                  },
                  "activityAerialBaseJumpingDateLastActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAerialBaseJumpingDateLastActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialBaseJumping), 'YES');\n  });\n}"
                  },
                  "activityAerialBaseJumpingNumOfFutureActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAerialBaseJumpingNumOfFutureActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialBaseJumping), 'YES');\n  });\n}"
                  },
                  "activityAerialBungeeJumping" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAerialBungeeJumping",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityAerialBungeeJumpingNumOfActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAerialBungeeJumpingNumOfActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialBungeeJumping), 'YES');\n  });\n}"
                  },
                  "activityAerialBungeeJumpingDateLastActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAerialBungeeJumpingDateLastActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialBaseJumping), 'YES');\n  });\n}"
                  },
                  "activityAerialBungeeJumpingNumOfFutureActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAerialBungeeJumpingNumOfFutureActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialBaseJumping), 'YES');\n  });\n}"
                  },
                  "activityAerialOther" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAerialOther",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityAerialOtherDescription" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAerialOtherDescription",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialOther), 'YES');\n  });\n}"
                  },
                  "activityAerialOtherNumOfActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAerialOtherNumOfActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialOther), 'YES');\n  });\n}"
                  },
                  "activityAerialOtherDateLastActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAerialOtherDateLastActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialOther), 'YES');\n  });\n}"
                  },
                  "activityAerialOtherNumOfFutureActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAerialOtherNumOfFutureActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialOther), 'YES');\n  });\n}"
                  },
                  "activityOtherActivities" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherActivities",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'YES') && ((!pmrl.isDefined(parent.activityOtherBoxing) || pmrl.equal(pmrl.toUpperCase(parent.activityOtherBoxing), 'NO')) && (!pmrl.isDefined(parent.activityOtherFighting) || pmrl.equal(pmrl.toUpperCase(parent.activityOtherFighting), 'NO')) && (!pmrl.isDefined(parent.activityOtherRodeoing) || pmrl.equal(pmrl.toUpperCase(parent.activityOtherRodeoing), 'NO')))) {\n      valid = 'Please select at least one activity type below';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityOtherBoxing" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherBoxing",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityOtherBoxingNumOfActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherBoxingNumOfActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherBoxing), 'YES');\n  });\n}"
                  },
                  "activityOtherBoxingDateLastActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherBoxingDateLastActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherBoxing), 'YES');\n  });\n}"
                  },
                  "activityOtherBoxingNumOfFutureActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherBoxingNumOfFutureActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherBoxing), 'YES');\n  });\n}"
                  },
                  "activityOtherFighting" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherFighting",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityOtherFightingNumOfActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherFightingNumOfActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherFighting), 'YES');\n  });\n}"
                  },
                  "activityOtherFightingDateLastActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherFightingDateLastActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherFighting), 'YES');\n  });\n}"
                  },
                  "activityOtherFightingNumOfFutureActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherFightingNumOfFutureActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherFighting), 'YES');\n  });\n}"
                  },
                  "activityOtherRodeoing" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherRodeoing",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "activityOtherRodeoingNumOfActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherRodeoingNumOfActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherRodeoing), 'YES');\n  });\n}"
                  },
                  "activityOtherRodeoingDateLastActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherRodeoingDateLastActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherRodeoing), 'YES');\n  });\n}"
                  },
                  "activityOtherRodeoingNumOfFutureActivity" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityOtherRodeoingNumOfFutureActivity",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherRodeoing), 'YES');\n  });\n}"
                  },
                  "activityAdditionalInfoComments" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.activityAdditionalInfoComments",
                    "validationRules" : [ ],
                    "required" : "false"
                  },
                  "foreignTravel" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.foreignTravel",
                    "validationRules" : [ ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "foreignTravelPlanToTravelOutsideUSAGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.foreignTravelPlanToTravelOutsideUSAGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.foreignTravelPlanToTravelOutsideUSAGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.foreignTravelPlanToTravelOutsideUSAGroup), Big('4'));\n  });\n}" ],
                    "objectFields" : {
                      "foreignTravelPlanToTravelCountry" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.activityFactors.foreignTravelPlanToTravelOutsideUSAGroup.foreignTravelPlanToTravelCountry",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.foreignTravel), 'YES');\n  });\n}"
                      },
                      "foreignTravelPlanToTravelPurpose" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.activityFactors.foreignTravelPlanToTravelOutsideUSAGroup.foreignTravelPlanToTravelPurpose",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.foreignTravel), 'YES');\n  });\n}"
                      },
                      "foreignTravelPlanToTravelLength" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.activityFactors.foreignTravelPlanToTravelOutsideUSAGroup.foreignTravelPlanToTravelLength",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.foreignTravel), 'YES');\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "4"
                  },
                  "foreignTravelAdditionalInfoComments" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.foreignTravelAdditionalInfoComments",
                    "validationRules" : [ ],
                    "required" : "false"
                  },
                  "substanceAbuseDrugUsage" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseDrugUsage",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && ((!pmrl.isDefined(parent.substanceAbuseDrugTypeMarijuana) || pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeMarijuana), 'NO')) && (!pmrl.isDefined(parent.substanceAbuseDrugTypeCocaine) || pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeCocaine), 'NO')) && (!pmrl.isDefined(parent.substanceAbuseDrugTypeOpium) || pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeOpium), 'NO')) && (!pmrl.isDefined(parent.substanceAbuseDrugTypeHallucinogens) || pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeHallucinogens), 'NO')) && (!pmrl.isDefined(parent.substanceAbuseDrugTypeAmphetamines) || pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeAmphetamines), 'NO')) && (!pmrl.isDefined(parent.substanceAbuseDrugTypeSedatives) || pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeSedatives), 'NO')) && (!pmrl.isDefined(parent.substanceAbuseDrugTypeBarbiturates) || pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeBarbiturates), 'NO')) && (!pmrl.isDefined(parent.substanceAbuseDrugTypeOther) || pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeOther), 'NO')))) {\n      valid = 'Please select at least one drug type below';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseDrugTypeMarijuana" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseDrugTypeMarijuana",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseMarijuanaDateFirstUsed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMarijuanaDateFirstUsed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeMarijuana), 'YES');\n  });\n}"
                  },
                  "substanceAbuseMarijuanaDateLastUsed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMarijuanaDateLastUsed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeMarijuana), 'YES');\n  });\n}"
                  },
                  "substanceAbuseMarijuanaFrequencyOfUse" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMarijuanaFrequencyOfUse",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeMarijuana), 'YES');\n  });\n}"
                  },
                  "substanceAbuseMarijuanaPrescribed" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMarijuanaPrescribed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeMarijuana), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseDrugTypeCocaine" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseDrugTypeCocaine",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseCocaineDateFirstUsed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseCocaineDateFirstUsed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeCocaine), 'YES');\n  });\n}"
                  },
                  "substanceAbuseCocaineDateLastUsed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseCocaineDateLastUsed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeCocaine), 'YES');\n  });\n}"
                  },
                  "substanceAbuseCocaineFrequencyOfUse" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseCocaineFrequencyOfUse",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeCocaine), 'YES');\n  });\n}"
                  },
                  "substanceAbuseCocainePrescribed" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseCocainePrescribed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeCocaine), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseDrugTypeOpium" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseDrugTypeOpium",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseOpiumDateFirstUsed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseOpiumDateFirstUsed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeOpium), 'YES');\n  });\n}"
                  },
                  "substanceAbuseOpiumDateLastUsed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseOpiumDateLastUsed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeOpium), 'YES');\n  });\n}"
                  },
                  "substanceAbuseOpiumFrequencyOfUse" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseOpiumFrequencyOfUse",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeOpium), 'YES');\n  });\n}"
                  },
                  "substanceAbuseOpiumPrescribed" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseOpiumPrescribed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeOpium), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseDrugTypeHallucinogens" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseDrugTypeHallucinogens",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseHallucinogensDateFirstUsed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseHallucinogensDateFirstUsed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeHallucinogens), 'YES');\n  });\n}"
                  },
                  "substanceAbuseHallucinogensDateLastUsed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseHallucinogensDateLastUsed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeHallucinogens), 'YES');\n  });\n}"
                  },
                  "substanceAbuseHallucinogensFrequencyOfUse" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseHallucinogensFrequencyOfUse",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeHallucinogens), 'YES');\n  });\n}"
                  },
                  "substanceAbuseHallucinogensPrescribed" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseHallucinogensPrescribed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeHallucinogens), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseDrugTypeAmphetamines" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseDrugTypeAmphetamines",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseAmphetaminesDateFirstUsed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseAmphetaminesDateFirstUsed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeAmphetamines), 'YES');\n  });\n}"
                  },
                  "substanceAbuseAmphetaminesDateLastUsed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseAmphetaminesDateLastUsed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeAmphetamines), 'YES');\n  });\n}"
                  },
                  "substanceAbuseAmphetaminesFrequencyOfUse" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseAmphetaminesFrequencyOfUse",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeAmphetamines), 'YES');\n  });\n}"
                  },
                  "substanceAbuseAmphetaminesPrescribed" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseAmphetaminesPrescribed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeAmphetamines), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseDrugTypeSedatives" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseDrugTypeSedatives",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseSedativesDateFirstUsed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseSedativesDateFirstUsed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeSedatives), 'YES');\n  });\n}"
                  },
                  "substanceAbuseSedativesDateLastUsed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseSedativesDateLastUsed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeSedatives), 'YES');\n  });\n}"
                  },
                  "substanceAbuseSedativesFrequencyOfUse" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseSedativesFrequencyOfUse",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeSedatives), 'YES');\n  });\n}"
                  },
                  "substanceAbuseSedativesPrescribed" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseSedativesPrescribed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeSedatives), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseDrugTypeBarbiturates" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseDrugTypeBarbiturates",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseBarbituratesDateFirstUsed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseBarbituratesDateFirstUsed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeBarbiturates), 'YES');\n  });\n}"
                  },
                  "substanceAbuseBarbituratesDateLastUsed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseBarbituratesDateLastUsed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeBarbiturates), 'YES');\n  });\n}"
                  },
                  "substanceAbuseBarbituratesFrequencyOfUse" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseBarbituratesFrequencyOfUse",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeBarbiturates), 'YES');\n  });\n}"
                  },
                  "substanceAbuseBarbituratesPrescribed" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseBarbituratesPrescribed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeBarbiturates), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseDrugTypeOther" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseDrugTypeOther",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseDrugTypeOtherDetails" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseDrugTypeOtherDetails",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeOther), 'YES');\n  });\n}"
                  },
                  "substanceAbuseOtherDateFirstUsed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseOtherDateFirstUsed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeOther), 'YES');\n  });\n}"
                  },
                  "substanceAbuseOtherDateLastUsed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseOtherDateLastUsed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeOther), 'YES');\n  });\n}"
                  },
                  "substanceAbuseOtherFrequencyOfUse" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseOtherFrequencyOfUse",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeOther), 'YES');\n  });\n}"
                  },
                  "substanceAbuseOtherPrescribed" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseOtherPrescribed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeOther), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseMedicationToControlDrugs" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMedicationToControlDrugs",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseMedicationToControlGroup2" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMedicationToControlGroup2",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.substanceAbuseMedicationToControlGroup2), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.substanceAbuseMedicationToControlGroup2), Big('4'));\n  });\n}" ],
                    "objectFields" : {
                      "substanceAbuseMedicationToControlMedName2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMedicationToControlGroup2.substanceAbuseMedicationToControlMedName2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseMedicationToControlDrugs), 'YES');\n  });\n}"
                      },
                      "substanceAbuseMedicationToControlDosage2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMedicationToControlGroup2.substanceAbuseMedicationToControlDosage2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseMedicationToControlDrugs), 'YES');\n  });\n}"
                      },
                      "substanceAbuseMedicationToControlDateFirstTaken2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMedicationToControlGroup2.substanceAbuseMedicationToControlDateFirstTaken2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseMedicationToControlDrugs), 'YES');\n  });\n}"
                      },
                      "substanceAbuseMedicationToControlDateLastTaken2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMedicationToControlGroup2.substanceAbuseMedicationToControlDateLastTaken2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseMedicationToControlDrugs), 'YES');\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "4"
                  },
                  "substanceAbuseMedicalTreatmentForDrugs" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMedicalTreatmentForDrugs",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseMedicalTreatmentDetails2" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMedicalTreatmentDetails2",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseMedicalTreatmentForDrugs), 'YES');\n  });\n}"
                  },
                  "substanceAbuseMedicalTreatmentDateOfTreatment2" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMedicalTreatmentDateOfTreatment2",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseMedicalTreatmentForDrugs), 'YES');\n  });\n}"
                  },
                  "substanceAbuseMedicalTreatmentDoctorFacilityName2" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMedicalTreatmentDoctorFacilityName2",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseMedicalTreatmentForDrugs), 'YES');\n  });\n}"
                  },
                  "substanceAbuseAdvisedToDiscontinueDrugs" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseAdvisedToDiscontinueDrugs",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseAdvisedDiscontinueDetails2" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseAdvisedDiscontinueDetails2",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAdvisedToDiscontinueDrugs), 'YES');\n  });\n}"
                  },
                  "substanceAbuseAdvisedDiscontinueDate2" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseAdvisedDiscontinueDate2",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAdvisedToDiscontinueDrugs), 'YES');\n  });\n}"
                  },
                  "substanceAbuseAdvisedDiscontinueDoctorFacilityName2" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseAdvisedDiscontinueDoctorFacilityName2",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAdvisedToDiscontinueDrugs), 'YES');\n  });\n}"
                  },
                  "substanceAbuseSupportGroupForDrugs" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseSupportGroupForDrugs",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseSupportGroupDetails2" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseSupportGroupDetails2",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseSupportGroupForDrugs), 'YES');\n  });\n}"
                  },
                  "substanceAbuseDrugAdditionalInfoComments" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseDrugAdditionalInfoComments",
                    "validationRules" : [ ],
                    "required" : "false"
                  },
                  "substanceAbuseAlcoholUsage" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseAlcoholUsage",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && ((!pmrl.isDefined(parent.substanceAbuseAlcoholTypeBeer) || pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholTypeBeer), 'NO')) && (!pmrl.isDefined(parent.substanceAbuseAlcoholTypeWine) || pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholTypeWine), 'NO')) && (!pmrl.isDefined(parent.substanceAbuseAlcoholTypeLiquor) || pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholTypeLiquor), 'NO')))) {\n      valid = 'Please select at least one alcohol type below';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseAlcoholTypeBeer" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseAlcoholTypeBeer",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseBeerDateLastUsed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseBeerDateLastUsed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholTypeBeer), 'YES');\n  });\n}"
                  },
                  "substanceAbuseBeerFrequencyOfUse" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseBeerFrequencyOfUse",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholTypeBeer), 'YES');\n  });\n}"
                  },
                  "substanceAbuseBeerAmountUsed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseBeerAmountUsed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholTypeBeer), 'YES');\n  });\n}"
                  },
                  "substanceAbuseAlcoholTypeWine" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseAlcoholTypeWine",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseWineDateLastUsed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseWineDateLastUsed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholTypeWine), 'YES');\n  });\n}"
                  },
                  "substanceAbuseWineFrequencyOfUse" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseWineFrequencyOfUse",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholTypeWine), 'YES');\n  });\n}"
                  },
                  "substanceAbuseWineAmountUsed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseWineAmountUsed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholTypeWine), 'YES');\n  });\n}"
                  },
                  "substanceAbuseAlcoholTypeLiquor" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseAlcoholTypeLiquor",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseLiquorDateLastUsed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseLiquorDateLastUsed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholTypeLiquor), 'YES');\n  });\n}"
                  },
                  "substanceAbuseLiquorFrequencyOfUse" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseLiquorFrequencyOfUse",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholTypeLiquor), 'YES');\n  });\n}"
                  },
                  "substanceAbuseLiquorAmountUsed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseLiquorAmountUsed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholTypeLiquor), 'YES');\n  });\n}"
                  },
                  "substanceAbuseMedicationToControlAlcohol" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMedicationToControlAlcohol",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseMedicationToControlGroup1" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMedicationToControlGroup1",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.substanceAbuseMedicationToControlGroup1), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.substanceAbuseMedicationToControlGroup1), Big('4'));\n  });\n}" ],
                    "objectFields" : {
                      "substanceAbuseMedicationToControlMedName1" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMedicationToControlGroup1.substanceAbuseMedicationToControlMedName1",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseMedicationToControlAlcohol), 'YES');\n  });\n}"
                      },
                      "substanceAbuseMedicationToControlDosage1" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMedicationToControlGroup1.substanceAbuseMedicationToControlDosage1",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseMedicationToControlAlcohol), 'YES');\n  });\n}"
                      },
                      "substanceAbuseMedicationToControlDateFirstTaken1" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMedicationToControlGroup1.substanceAbuseMedicationToControlDateFirstTaken1",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseMedicationToControlAlcohol), 'YES');\n  });\n}"
                      },
                      "substanceAbuseMedicationToControlDateLastTaken1" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMedicationToControlGroup1.substanceAbuseMedicationToControlDateLastTaken1",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseMedicationToControlAlcohol), 'YES');\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "4"
                  },
                  "substanceAbuseMedicalTreatmentForAlcohol" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMedicalTreatmentForAlcohol",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseMedicalTreatmentDetails1" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMedicalTreatmentDetails1",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseMedicalTreatmentForAlcohol), 'YES');\n  });\n}"
                  },
                  "substanceAbuseMedicalTreatmentDateOfTreatment1" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMedicalTreatmentDateOfTreatment1",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseMedicalTreatmentForAlcohol), 'YES');\n  });\n}"
                  },
                  "substanceAbuseMedicalTreatmentDoctorFacilityName1" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseMedicalTreatmentDoctorFacilityName1",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseMedicalTreatmentForAlcohol), 'YES');\n  });\n}"
                  },
                  "substanceAbuseAdvisedToDiscontinueAlcohol" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseAdvisedToDiscontinueAlcohol",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseAdvisedDiscontinueDetails1" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseAdvisedDiscontinueDetails1",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAdvisedToDiscontinueAlcohol), 'YES');\n  });\n}"
                  },
                  "substanceAbuseAdvisedDiscontinueDate1" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseAdvisedDiscontinueDate1",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAdvisedToDiscontinueAlcohol), 'YES');\n  });\n}"
                  },
                  "substanceAbuseAdvisedDiscontinueDoctorFacilityName1" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseAdvisedDiscontinueDoctorFacilityName1",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAdvisedToDiscontinueAlcohol), 'YES');\n  });\n}"
                  },
                  "substanceAbuseSupportGroupForAlcohol" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseSupportGroupForAlcohol",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "substanceAbuseSupportGroupDetails1" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseSupportGroupDetails1",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseSupportGroupForAlcohol), 'YES');\n  });\n}"
                  },
                  "substanceAbuseAlcoholAdditionalInfoComments" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.substanceAbuseAlcoholAdditionalInfoComments",
                    "validationRules" : [ ],
                    "required" : "false"
                  },
                  "recklessDriving" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.recklessDriving",
                    "validationRules" : [ ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "recklessDrivingDate" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.recklessDrivingDate",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.recklessDriving), 'YES');\n  });\n}"
                  },
                  "recklessDrivingOffense" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.recklessDrivingOffense",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.recklessDriving), 'YES');\n  });\n}"
                  },
                  "felonyMisdemeanorOffense" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.felonyMisdemeanorOffense",
                    "validationRules" : [ ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "felonyMisdemeanorOffenseDate" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.felonyMisdemeanorOffenseDate",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.felonyMisdemeanorOffense), 'YES');\n  });\n}"
                  },
                  "felonyMisdemeanorOffenseType" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.felonyMisdemeanorOffenseType",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.felonyMisdemeanorOffense), 'YES');\n  });\n}"
                  },
                  "militaryQuestion" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.militaryQuestion",
                    "validationRules" : [ ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "militaryQuestionDetails" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.militaryQuestionDetails",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.militaryQuestion), 'YES');\n  });\n}"
                  },
                  "tobaccoQuestion" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.activityFactors.tobaccoQuestion",
                    "validationRules" : [ ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  }
                }
              },
              "healthFactors" : {
                "type" : "OBJECT",
                "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.underwritingFactors.healthFactors",
                "validationRules" : [ ],
                "objectFields" : {
                  "primaryPhysicianName" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.primaryPhysicianName",
                    "validationRules" : [ ],
                    "required" : "true"
                  },
                  "primaryPhysicianPhoneNumber" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.primaryPhysicianPhoneNumber",
                    "validationRules" : [ ],
                    "required" : "true"
                  },
                  "primaryPhysicianAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.primaryPhysicianAddress",
                    "validationRules" : [ ],
                    "required" : "true"
                  },
                  "primaryPhysicianDateLastSeen" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.primaryPhysicianDateLastSeen",
                    "validationRules" : [ ],
                    "required" : "true"
                  },
                  "primaryPhysicianReasonSeen" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.primaryPhysicianReasonSeen",
                    "validationRules" : [ ],
                    "required" : "true"
                  },
                  "primaryPhysicianResultTreatment" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.primaryPhysicianResultTreatment",
                    "validationRules" : [ ],
                    "required" : "true"
                  },
                  "heightInFeet" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.heightInFeet",
                    "validationRules" : [ ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "FEET_3",
                      "displayValue" : "3"
                    }, {
                      "value" : "FEET_4",
                      "displayValue" : "4"
                    }, {
                      "value" : "FEET_5",
                      "displayValue" : "5"
                    }, {
                      "value" : "FEET_6",
                      "displayValue" : "6"
                    }, {
                      "value" : "FEET_7",
                      "displayValue" : "7"
                    }, {
                      "value" : "FEET_8",
                      "displayValue" : "8"
                    }, {
                      "value" : "FEET_9",
                      "displayValue" : "9"
                    } ]
                  },
                  "heightInInches" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.heightInInches",
                    "validationRules" : [ ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "INCHES_0",
                      "displayValue" : "0"
                    }, {
                      "value" : "INCHES_1",
                      "displayValue" : "1"
                    }, {
                      "value" : "INCHES_2",
                      "displayValue" : "2"
                    }, {
                      "value" : "INCHES_3",
                      "displayValue" : "3"
                    }, {
                      "value" : "INCHES_4",
                      "displayValue" : "4"
                    }, {
                      "value" : "INCHES_5",
                      "displayValue" : "5"
                    }, {
                      "value" : "INCHES_6",
                      "displayValue" : "6"
                    }, {
                      "value" : "INCHES_7",
                      "displayValue" : "7"
                    }, {
                      "value" : "INCHES_8",
                      "displayValue" : "8"
                    }, {
                      "value" : "INCHES_9",
                      "displayValue" : "9"
                    }, {
                      "value" : "INCHES_10",
                      "displayValue" : "10"
                    }, {
                      "value" : "INCHES_11",
                      "displayValue" : "11"
                    } ]
                  },
                  "heightInFeetCalculated" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.heightInFeetCalculated",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(parent.heightInFeet, 'FEET_3')) {\n      valid = '3';\n    } else if (pmrl.equal(parent.heightInFeet, 'FEET_4')) {\n      valid = '4';\n    } else if (pmrl.equal(parent.heightInFeet, 'FEET_5')) {\n      valid = '5';\n    } else if (pmrl.equal(parent.heightInFeet, 'FEET_6')) {\n      valid = '6';\n    } else if (pmrl.equal(parent.heightInFeet, 'FEET_7')) {\n      valid = '7';\n    } else if (pmrl.equal(parent.heightInFeet, 'FEET_8')) {\n      valid = '8';\n    } else if (pmrl.equal(parent.heightInFeet, 'FEET_9')) {\n      valid = '9';\n    }\n    return valid;\n  });\n}"
                  },
                  "heightInInchesCalculated" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.heightInInchesCalculated",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(parent.heightInInches, 'INCHES_0')) {\n      valid = '0';\n    } else if (pmrl.equal(parent.heightInInches, 'INCHES_1')) {\n      valid = '1';\n    } else if (pmrl.equal(parent.heightInInches, 'INCHES_2')) {\n      valid = '2';\n    } else if (pmrl.equal(parent.heightInInches, 'INCHES_3')) {\n      valid = '3';\n    } else if (pmrl.equal(parent.heightInInches, 'INCHES_4')) {\n      valid = '4';\n    } else if (pmrl.equal(parent.heightInInches, 'INCHES_5')) {\n      valid = '5';\n    } else if (pmrl.equal(parent.heightInInches, 'INCHES_6')) {\n      valid = '6';\n    } else if (pmrl.equal(parent.heightInInches, 'INCHES_7')) {\n      valid = '7';\n    } else if (pmrl.equal(parent.heightInInches, 'INCHES_8')) {\n      valid = '8';\n    } else if (pmrl.equal(parent.heightInInches, 'INCHES_9')) {\n      valid = '9';\n    } else if (pmrl.equal(parent.heightInInches, 'INCHES_10')) {\n      valid = '10';\n    } else if (pmrl.equal(parent.heightInInches, 'INCHES_11')) {\n      valid = '11';\n    } else if (pmrl.equal(parent.heightInInches, 'INCHES_12')) {\n      valid = '12';\n    }\n    return valid;\n  });\n}"
                  },
                  "weight" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.weight",
                    "validationRules" : [ ],
                    "required" : "true"
                  },
                  "aidsHivQuestion" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.aidsHivQuestion",
                    "validationRules" : [ ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "hivAZAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivAZAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivAZAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'AZ') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "My personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "A different personal physician"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not release my HIV test results to a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivAZAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'AZ') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivAZAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'AZ') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivAZAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivAZAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      }
                    }
                  },
                  "hivCOAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivCOAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivCOAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'CO') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Send my result information to my personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Send my result information to a different personal physician"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not release my result information to a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivCOAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'CO') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivCOAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'CO') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivCOAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivCOAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      }
                    }
                  },
                  "hivCTAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivCTAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivCTAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'CT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "My personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "A different physician or other health care provider"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not release my HIV test results to a physician  or other health care provider"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivCTAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'CT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivCTAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'CT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivCTAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "healthCareProviderAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivCTAdditionalFields.healthCareProviderAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      },
                      "hivInsurerName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivCTAdditionalFields.hivInsurerName",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    return 'Mutual Of Omaha Insurance Company';\n  });\n}"
                      },
                      "hivInsurerAddressLine1" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivCTAdditionalFields.hivInsurerAddressLine1",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    return '3333 Farnam Street';\n  });\n}"
                      },
                      "hivInsurerAddressLine2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivCTAdditionalFields.hivInsurerAddressLine2",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    return 'Omaha, NE, 68131';\n  });\n}"
                      }
                    }
                  },
                  "hivDCAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivDCAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivDCAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'DC') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "My personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "A different physician"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not release my HIV test results to a physician"
                        } ]
                      },
                      "releaseResultsToHealthcareProvider" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivDCAdditionalFields.releaseResultsToHealthcareProvider",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'DC') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "HEALTHCARE_PROVIDER",
                          "displayValue" : "A health care provider"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not release my HIV test results to a health care provider"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivDCAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'DC') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivDCAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'DC') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivDCAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivDCAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      },
                      "healthcareProviderName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivDCAdditionalFields.healthcareProviderName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'DC') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToHealthcareProvider, 'HEALTHCARE_PROVIDER');\n  });\n}"
                      },
                      "healthcareProviderAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivDCAdditionalFields.healthcareProviderAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'DC') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToHealthcareProvider, 'HEALTHCARE_PROVIDER');\n  });\n}"
                      },
                      "healthcareProviderNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivDCAdditionalFields.healthcareProviderNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToHealthcareProvider, 'HEALTHCARE_PROVIDER')) {\n      name = parent.healthcareProviderName;\n    }\n    return name;\n  });\n}"
                      },
                      "healthcareAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivDCAdditionalFields.healthcareAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToHealthcareProvider, 'HEALTHCARE_PROVIDER')) {\n      address = parent.healthcareProviderAddress;\n    }\n    return address;\n  });\n}"
                      },
                      "hivInsurerName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivDCAdditionalFields.hivInsurerName",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    return 'Mutual Of Omaha Insurance Company';\n  });\n}"
                      },
                      "hivInsurerAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivDCAdditionalFields.hivInsurerAddress",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    return '3333 Farnam Street, Omaha, NE, 68131';\n  });\n}"
                      }
                    }
                  },
                  "hivFLAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivFLAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivFLAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'FL') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Send my result information to my personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Send my result information to a different personal physician"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my test results to a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivFLAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'FL') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivFLAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'FL') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivFLAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivFLAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      }
                    }
                  },
                  "hivHIAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivHIAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivHIAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'HI') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Send my result information to my personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Send my result information to a different personal physician"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not release my result information to a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivHIAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'HI') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivHIAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'HI') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivHIAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivHIAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      }
                    }
                  },
                  "hivIAAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivIAAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivIAAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'IA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "ATLERNATIVE_SITE",
                          "displayValue" : "An alternative testing site"
                        }, {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "My personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "A different personal physician"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my result information to an alternative testing site or a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivIAAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'IA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivIAAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'IA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivIAAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivIAAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      },
                      "hivIASignYear" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivIAAdditionalFields.hivIASignYear",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var fourDigit = pmrl.getYear(pmrl.dateNow());\n    pmrl.toNumber(fourDigit);\n    var year = pmrl.minus(fourDigit, Big('2000'));\n    return year;\n  });\n}"
                      },
                      "hivIASignMonth" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivIAAdditionalFields.hivIASignMonth",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var number = pmrl.getMonth(pmrl.dateNow());\n    var month;\n    if (pmrl.equal(number, Big('1'))) {\n      month = 'January';\n    } else if (pmrl.equal(number, Big('2'))) {\n      month = 'February';\n    } else if (pmrl.equal(number, '3')) {\n      month = 'March';\n    } else if (pmrl.equal(number, '4')) {\n      month = 'April';\n    } else if (pmrl.equal(number, '5')) {\n      month = 'May';\n    } else if (pmrl.equal(number, '6')) {\n      month = 'June';\n    } else if (pmrl.equal(number, '7')) {\n      month = 'July';\n    } else if (pmrl.equal(number, '8')) {\n      month = 'August';\n    } else if (pmrl.equal(number, '9')) {\n      month = 'September';\n    } else if (pmrl.equal(number, '10')) {\n      month = 'October';\n    } else if (pmrl.equal(number, '11')) {\n      month = 'November';\n    } else if (pmrl.equal(number, '12')) {\n      month = 'December';\n    }\n    return month;\n  });\n}"
                      },
                      "hivIASignDate" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivIAAdditionalFields.hivIASignDate",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.getDayOfMonth(pmrl.dateNow());\n  });\n}"
                      }
                    }
                  },
                  "hivINAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivINAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivINAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'IN') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Send my result information to my personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Send my result information to a different personal physician"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not release my result information to a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivINAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'IN') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivINAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'IN') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivINAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivINAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      }
                    }
                  },
                  "hivKSAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivKSAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivKSAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'KS') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Send my result information to my personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Send my result information to a different personal physician"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not release my result information to a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivKSAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'KS') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivKSAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'KS') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivKSAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivKSAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      }
                    }
                  },
                  "hivKYAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivKYAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivKYAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'KY') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Send my result information to my personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Send my result information to a different personal physician"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my result information to a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivKYAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'KY') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivKYAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'KY') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivKYAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivKYAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      }
                    }
                  },
                  "hivMAAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivMAAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToMyself" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMAAdditionalFields.releaseResultsToMyself",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "DO_SEND",
                          "displayValue" : "Send the result to me"
                        }, {
                          "value" : "DO_NOT_SEND",
                          "displayValue" : "Do not send the result to me"
                        } ]
                      },
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMAAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "My personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "A different personal physician"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my results to a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMAAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMAAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMAAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMAAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      },
                      "physicianCheckboxCalc" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMAAdditionalFields.physicianCheckboxCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var value = 'NO';\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE') || pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      value = 'YES';\n    }\n    return value;\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "myselfCheckboxCalc" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMAAdditionalFields.myselfCheckboxCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var value = 'NO';\n    if (pmrl.equal(parent.releaseResultsToMyself, 'DO_SEND')) {\n      value = 'YES';\n    }\n    return value;\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      }
                    }
                  },
                  "hivMIAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivMIAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMIAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MI') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "I give my consent to be tested for the Human Immunodeficiency Virus and have my results sent to my personal physician above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "I give my consent to be tested for the Human Immunodeficiency Virus and have my results sent to a different physician"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "I give my consent to be tested for the Human Immunodeficiency Virus and do not want my results send to a physician"
                        }, {
                          "value" : "NO_CONSENT",
                          "displayValue" : "At this time I do not want to be tested for the Human Immunideficiency Virus"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMIAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MI') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMIAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MI') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMIAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMIAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      },
                      "doConsentSigCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMIAdditionalFields.doConsentSigCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var signature = ' ';\n    if (pmrl.isDefined(parent.releaseResultsToPhysician) && pmrl.notEqual(parent.releaseResultsToPhysician, 'NO_CONSENT')) {\n      signature = parent.parent.parent.parent.additionalFields.insuredFullName;\n    }\n    return signature;\n  });\n}"
                      },
                      "doNotConsentSigCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMIAdditionalFields.doNotConsentSigCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var signature = ' ';\n    if (pmrl.isDefined(parent.releaseResultsToPhysician) && pmrl.equal(parent.releaseResultsToPhysician, 'NO_CONSENT')) {\n      signature = parent.parent.parent.parent.additionalFields.insuredFullName;\n    }\n    return signature;\n  });\n}"
                      },
                      "doConsentDateCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMIAdditionalFields.doConsentDateCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var signature = ' ';\n    if (pmrl.isDefined(parent.releaseResultsToPhysician) && pmrl.notEqual(parent.releaseResultsToPhysician, 'NO_CONSENT')) {\n      signature = pmrl.dateNow();\n    }\n    return signature;\n  });\n}"
                      },
                      "doNotConsentDateCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMIAdditionalFields.doNotConsentDateCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var signature = ' ';\n    if (pmrl.isDefined(parent.releaseResultsToPhysician) && pmrl.equal(parent.releaseResultsToPhysician, 'NO_CONSENT')) {\n      signature = pmrl.dateNow();\n    }\n    return signature;\n  });\n}"
                      }
                    }
                  },
                  "hivMOAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivMOAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMOAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MO') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Send my result information to my personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Send my result information to a different personal physician"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my result information a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMOAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MO') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMOAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MO') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMOAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMOAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      }
                    }
                  },
                  "hivMTAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivMTAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMTAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Send my result information to my personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Send my result information to a different personal physician"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my HIV test results to a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMTAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMTAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMTAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivMTAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      }
                    }
                  },
                  "hivNCAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivNCAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNCAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NC') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Send my result information to my personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Send my result information to a different personal physician"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my HIV test results to a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNCAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NC') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNCAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NC') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNCAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNCAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      }
                    }
                  },
                  "hivNDAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivNDAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "hivInsurerName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNDAdditionalFields.hivInsurerName",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    return 'Mutual Of Omaha Insurance Company';\n  });\n}"
                      },
                      "hivInsurerAddressLine1" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNDAdditionalFields.hivInsurerAddressLine1",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    return '3333 Farnam Street';\n  });\n}"
                      },
                      "hivInsurerAddressLine2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNDAdditionalFields.hivInsurerAddressLine2",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    return 'Omaha, NE, 68131';\n  });\n}"
                      }
                    }
                  },
                  "hivNEAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivNEAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNEAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NE') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Release my result information to my personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Release my result information to a different personal physician"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not release my result information to a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNEAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NE') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNEAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NE') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNEAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNEAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      },
                      "releaseResultsToIndividual" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNEAdditionalFields.releaseResultsToIndividual",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NE') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "MYSELF",
                          "displayValue" : "To myself"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "To a different person"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my result information to myself or a designated person"
                        } ]
                      },
                      "individualOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNEAdditionalFields.individualOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NE') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToIndividual, 'OTHER');\n  });\n}"
                      },
                      "individualOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNEAdditionalFields.individualOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NE') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToIndividual, 'OTHER');\n  });\n}"
                      },
                      "individualNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNEAdditionalFields.individualNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToIndividual, 'MYSELF')) {\n      name = parent.parent.parent.parent.additionalFields.insuredFullName;\n    } else if (pmrl.equal(parent.releaseResultsToIndividual, 'OTHER')) {\n      name = parent.individualOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "individualAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNEAdditionalFields.individualAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToIndividual, 'MYSELF')) {\n      address = parent.parent.parent.parent.additionalFields.fullResidentialAddress;\n    } else if (pmrl.equal(parent.releaseResultsToIndividual, 'OTHER')) {\n      address = parent.individualOtherAddress;\n    }\n    return address;\n  });\n}"
                      }
                    }
                  },
                  "hivNHAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivNHAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNHAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NH') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "My personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "A different physician or a different person or entity"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not release my result information to a physician or other person or entity"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNHAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NH') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNHAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NH') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNHAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNHAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      }
                    }
                  },
                  "hivNJAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivNJAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNJAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NJ') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Send my result information to my personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Send my result information to a different personal physician"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my HIV test results to a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNJAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NJ') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNJAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NJ') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNJAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNJAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      }
                    }
                  },
                  "hivNMAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivNMAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNMAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NM') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Send my result information to my personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Send my result information to a different personal physician"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my result information to a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNMAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NM') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNMAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NM') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNMAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivNMAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      }
                    }
                  },
                  "hivOHAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivOHAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivOHAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OH') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Send my result information to my personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Send my result information to a different personal physician"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my result information to a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivOHAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OH') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivOHAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OH') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivOHAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivOHAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      },
                      "physicianCheckboxCalc" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivOHAdditionalFields.physicianCheckboxCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var checkbox = 'NO';\n    if (pmrl.notEqual(parent.releaseResultsToPhysician, 'NONE')) {\n      checkbox = 'YES';\n    }\n    return checkbox;\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "releaseResultsToMyself" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivOHAdditionalFields.releaseResultsToMyself",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OH') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "MYSELF",
                          "displayValue" : "Send my result information to me"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my result information to me"
                        } ]
                      },
                      "myselfAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivOHAdditionalFields.myselfAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'MYSELF')) {\n      address = parent.parent.parent.parent.additionalFields.fullResidentialAddress;\n    }\n    return address;\n  });\n}"
                      },
                      "myselfCheckboxCalc" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivOHAdditionalFields.myselfCheckboxCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var checkbox = 'NO';\n    if (pmrl.notEqual(parent.releaseResultsToMyself, 'NONE')) {\n      checkbox = 'YES';\n    }\n    return checkbox;\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "releaseResultsToIndividual" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivOHAdditionalFields.releaseResultsToIndividual",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OH') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "OTHER_INDIVIDUAL",
                          "displayValue" : "Send my result information to a different individual"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my result information to a different individual"
                        } ]
                      },
                      "individualOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivOHAdditionalFields.individualOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OH') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToIndividual, 'OTHER_INDIVIDUAL');\n  });\n}"
                      },
                      "individualOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivOHAdditionalFields.individualOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OH') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToIndividual, 'OTHER_INDIVIDUAL');\n  });\n}"
                      },
                      "individualCheckboxCalc" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivOHAdditionalFields.individualCheckboxCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var checkbox = 'NO';\n    if (pmrl.notEqual(parent.releaseResultsToIndividual, 'NONE')) {\n      checkbox = 'YES';\n    }\n    return checkbox;\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      }
                    }
                  },
                  "hivORAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivORAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivORAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OR') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "My personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "A different personal physician"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my result information to a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivORAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OR') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivORAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OR') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivORAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivORAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      },
                      "physicianCheckboxCalc" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivORAdditionalFields.physicianCheckboxCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var checkbox = 'NO';\n    if (pmrl.notEqual(parent.releaseResultsToPhysician, 'NONE')) {\n      checkbox = 'YES';\n    }\n    return checkbox;\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "releaseResultsToMyself" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivORAdditionalFields.releaseResultsToMyself",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OR') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "MYSELF",
                          "displayValue" : "Send my result information to me"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my result information to me"
                        } ]
                      },
                      "myselfAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivORAdditionalFields.myselfAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'MYSELF')) {\n      address = parent.parent.parent.parent.additionalFields.fullResidentialAddress;\n    }\n    return address;\n  });\n}"
                      },
                      "myselfCheckboxCalc" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivORAdditionalFields.myselfCheckboxCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var checkbox = 'NO';\n    if (pmrl.notEqual(parent.releaseResultsToMyself, 'NONE')) {\n      checkbox = 'YES';\n    }\n    return checkbox;\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "releaseResultsToDepartment" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivORAdditionalFields.releaseResultsToDepartment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OR') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "DEPARTMENT",
                          "displayValue" : "Send my result information to a county health department"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my result information to a county health department"
                        } ]
                      },
                      "departmentCheckboxCalc" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivORAdditionalFields.departmentCheckboxCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var checkbox = 'NO';\n    if (pmrl.notEqual(parent.releaseResultsToDepartment, 'NONE')) {\n      checkbox = 'YES';\n    }\n    return checkbox;\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      }
                    }
                  },
                  "hivPAAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivPAAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivPAAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'PA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Send my result information to my personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Send my result information to a different personal physician or health care agency"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my HIV test results to a personal physician or health care agency"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivPAAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'PA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivPAAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'PA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivPAAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivPAAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      },
                      "releaseResultsToPADepartmentOfHealth" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivPAAdditionalFields.releaseResultsToPADepartmentOfHealth",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'PA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "PA_DEPT_OF_HEALTH",
                          "displayValue" : "Send my result information to the Pennsylvania Department of Health"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my result information to the Pennsylvania Department of Health"
                        } ]
                      },
                      "paDepartmentOfHealthCheckboxCalc" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivPAAdditionalFields.paDepartmentOfHealthCheckboxCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var checkbox = 'NO';\n    if (pmrl.notEqual(parent.releaseResultsToPADepartmentOfHealth, 'NONE')) {\n      checkbox = 'YES';\n    }\n    return checkbox;\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "releaseResultsToLocalDepartment" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivPAAdditionalFields.releaseResultsToLocalDepartment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'PA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "PITTSBURGH",
                          "displayValue" : "Pittsburgh AIDS Take Force"
                        }, {
                          "value" : "ASIAC",
                          "displayValue" : "AIDS Svc's in Asian Communities"
                        }, {
                          "value" : "COMMUNITY_ALLIANCE_LANCASTER",
                          "displayValue" : "AIDS Community Alliance in Lancaster"
                        }, {
                          "value" : "SPANISH",
                          "displayValue" : "Spanish Speaking Council"
                        }, {
                          "value" : "COMMUNITY_ALLIANCE_HARRISBURG",
                          "displayValue" : "AIDS Community Alliance in Harrisburg"
                        }, {
                          "value" : "BEBASHI",
                          "displayValue" : "BEBASHI HIV"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my result information to a local health department"
                        } ]
                      },
                      "localDepartmentCheckboxCalc" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivPAAdditionalFields.localDepartmentCheckboxCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var checkbox = 'NO';\n    if (pmrl.notEqual(parent.releaseResultsToLocalDepartment, 'NONE')) {\n      checkbox = 'YES';\n    }\n    return checkbox;\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "localVerifyDepartmentCheckboxCalc" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivPAAdditionalFields.localVerifyDepartmentCheckboxCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var checkbox = 'NO';\n    if (pmrl.equal(parent.releaseResultsToLocalDepartment, 'PITTSBURGH')) {\n      checkbox = 'YES';\n    }\n    return checkbox;\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      }
                    }
                  },
                  "hivPRAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivPRAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivPRAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'PR') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Send my result information to my personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Send my result information to a different personal physician or health care agency"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my result information to a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivPRAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'PR') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivPRAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'PR') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivPRAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivPRAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      }
                    }
                  },
                  "hivRIAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivRIAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivRIAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'RI') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Send my result information to my personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Send my result information to a different personal physician or health care agency"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my result information to a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivRIAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'RI') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivRIAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'RI') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivRIAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivRIAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      }
                    }
                  },
                  "hivSDAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivSDAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivSDAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'SD') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Send my result information to my personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Send my result information to a different personal physician"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my result information to a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivSDAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'SD') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivSDAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'SD') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivSDAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivSDAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      }
                    }
                  },
                  "hivTXAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivTXAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivTXAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'TX') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Send my result information to my personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Send my result information to a different personal physician or health care agency"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my result information to a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivTXAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'TX') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivTXAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'TX') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivTXAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivTXAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      }
                    }
                  },
                  "hivUTAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivUTAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivUTAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'UT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Send my result information to my personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Send my result information to a different personal physician or health care agency"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my result information to a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivUTAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'UT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivUTAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'UT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivUTAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivUTAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      }
                    }
                  },
                  "hivVAAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivVAAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivVAAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'VA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Send my result information to my personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Send my result information to a different personal physician or health care agency"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my result information to a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivVAAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'VA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivVAAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'VA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivVAAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivVAAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      },
                      "releaseResultsToMyself" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivVAAdditionalFields.releaseResultsToMyself",
                        "validationRules" : [ ],
                        "required" : "false",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      }
                    }
                  },
                  "hivVTAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivVTAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResults" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivVTAdditionalFields.releaseResults",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'VT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "MYSELF",
                          "displayValue" : "Send my result information to me"
                        }, {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Send my result information to my personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Send my result information to a different personal physician or designated individual"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my result information to myself or another designated person"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivVTAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'VT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResults, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivVTAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'VT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResults, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivVTAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResults, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResults, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivVTAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResults, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResults, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      }
                    }
                  },
                  "hivWAAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivWAAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResultsToPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivWAAdditionalFields.releaseResultsToPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'WA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Send my result information to my personal physician listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Send my result information to a different personal physician or health care agency"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not send my result information to a physician"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivWAAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'WA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivWAAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'WA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivWAAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivWAAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.releaseResultsToPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.releaseResultsToPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      }
                    }
                  },
                  "hivWVAdditionalFields" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.hivWVAdditionalFields",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "releaseResults" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivWVAdditionalFields.releaseResults",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'WV') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "MYSELF",
                          "displayValue" : "Myself only"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "My physician or health care provider or other person indicated below"
                        }, {
                          "value" : "BOTH",
                          "displayValue" : "Both myself and my physician or health care provider or other person indicated below"
                        }, {
                          "value" : "NONE",
                          "displayValue" : "Do not release my test results to myself or any other authorized individual"
                        } ]
                      },
                      "verifyPhysician" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivWVAdditionalFields.verifyPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'WV') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && (pmrl.equal(parent.releaseResults, 'BOTH') || pmrl.equal(parent.releaseResults, 'OTHER'));\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "LISTED_ABOVE",
                          "displayValue" : "Use the physician information listed above"
                        }, {
                          "value" : "OTHER",
                          "displayValue" : "Enter different contact information for a physician or a health care provider or other person"
                        } ]
                      },
                      "physicianOtherName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivWVAdditionalFields.physicianOtherName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'WV') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.verifyPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianOtherAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivWVAdditionalFields.physicianOtherAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'WV') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.verifyPhysician, 'OTHER');\n  });\n}"
                      },
                      "physicianNameCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivWVAdditionalFields.physicianNameCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var name;\n    if (pmrl.equal(parent.verifyPhysician, 'LISTED_ABOVE')) {\n      name = parent.parent.primaryPhysicianName;\n    } else if (pmrl.equal(parent.verifyPhysician, 'OTHER')) {\n      name = parent.physicianOtherName;\n    }\n    return name;\n  });\n}"
                      },
                      "physicianAddressCalc" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.hivWVAdditionalFields.physicianAddressCalc",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var address;\n    if (pmrl.equal(parent.verifyPhysician, 'LISTED_ABOVE')) {\n      address = parent.parent.primaryPhysicianAddress;\n    } else if (pmrl.equal(parent.verifyPhysician, 'OTHER')) {\n      address = parent.physicianOtherAddress;\n    }\n    return address;\n  });\n}"
                      }
                    }
                  },
                  "heartDiseaseQuestion" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.heartDiseaseQuestion",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && ((!pmrl.isDefined(parent.cardiacHypertensionDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.cardiacHypertensionDiagnosis), 'NO')) && (!pmrl.isDefined(parent.cardiacHighCholesterolDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.cardiacHighCholesterolDiagnosis), 'NO')) && (!pmrl.isDefined(parent.cardiacHeartAttackDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartAttackDiagnosis), 'NO')) && (!pmrl.isDefined(parent.cardiacCoronaryArteryDiseaseDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.cardiacCoronaryArteryDiseaseDiagnosis), 'NO')) && (!pmrl.isDefined(parent.cardiacChestPainDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.cardiacChestPainDiagnosis), 'NO')) && (!pmrl.isDefined(parent.cardiacIrregularHeartRhythmDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosis), 'NO')) && (!pmrl.isDefined(parent.cardiacHeartMurmurDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosis), 'NO')) && (!pmrl.isDefined(parent.cardiacValvularHeartDiseaseDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosis), 'NO')) && (!pmrl.isDefined(parent.cardiacStrokeDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.cardiacStrokeDiagnosis), 'NO')) && (!pmrl.isDefined(parent.cardiacTransientIschemicAttackDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.cardiacTransientIschemicAttackDiagnosis), 'NO')) && (!pmrl.isDefined(parent.cardiacAneurysmDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.cardiacAneurysmDiagnosis), 'NO')) && (!pmrl.isDefined(parent.cardiacOtherDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.cardiacOtherDiagnosis), 'NO')) || (!pmrl.isDefined(parent.cardiacTreatmentTypeMedication) || pmrl.equal(pmrl.toUpperCase(parent.cardiacTreatmentTypeMedication), 'NO')) && (!pmrl.isDefined(parent.cardiacTreatmentTypeSurgery) || pmrl.equal(pmrl.toUpperCase(parent.cardiacTreatmentTypeSurgery), 'NO')) && (!pmrl.isDefined(parent.cardiacTreatmentTypeOther) || pmrl.equal(pmrl.toUpperCase(parent.cardiacTreatmentTypeOther), 'NO')) || (pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosis), 'YES')) && (!pmrl.isDefined(parent.cardiacTypeOfIrregularRhythmMurmurHeartAtrialFibrillation) || pmrl.equal(pmrl.toUpperCase(parent.cardiacTypeOfIrregularRhythmMurmurHeartAtrialFibrillation), 'NO')) && (!pmrl.isDefined(parent.cardiacTypeOfIrregularRhythmMurmurHeartSupraventricularTachycardia) || pmrl.equal(pmrl.toUpperCase(parent.cardiacTypeOfIrregularRhythmMurmurHeartSupraventricularTachycardia), 'NO')) && (!pmrl.isDefined(parent.cardiacTypeOfIrregularRhythmMurmurHeartPrematureVentricularContractions) || pmrl.equal(pmrl.toUpperCase(parent.cardiacTypeOfIrregularRhythmMurmurHeartPrematureVentricularContractions), 'NO')) && (!pmrl.isDefined(parent.cardiacTypeOfIrregularRhythmMurmurHeartAorticStenosis) || pmrl.equal(pmrl.toUpperCase(parent.cardiacTypeOfIrregularRhythmMurmurHeartAorticStenosis), 'NO')) && (!pmrl.isDefined(parent.cardiacTypeOfIrregularRhythmMurmurHeartMitralStenosis) || pmrl.equal(pmrl.toUpperCase(parent.cardiacTypeOfIrregularRhythmMurmurHeartMitralStenosis), 'NO')) && (!pmrl.isDefined(parent.cardiacTypeOfIrregularRhythmMurmurHeartAorticRegurgitationInsufficiency) || pmrl.equal(pmrl.toUpperCase(parent.cardiacTypeOfIrregularRhythmMurmurHeartAorticRegurgitationInsufficiency), 'NO')) && (!pmrl.isDefined(parent.cardiacTypeOfIrregularRhythmMurmurHeartMitralRegurgitationInsufficiency) || pmrl.equal(pmrl.toUpperCase(parent.cardiacTypeOfIrregularRhythmMurmurHeartMitralRegurgitationInsufficiency), 'NO')) && (!pmrl.isDefined(parent.cardiacTypeOfIrregularRhythmMurmurHeartMitralValveProlapse) || pmrl.equal(pmrl.toUpperCase(parent.cardiacTypeOfIrregularRhythmMurmurHeartMitralValveProlapse), 'NO')) && (!pmrl.isDefined(parent.cardiacTypeOfIrregularRhythmMurmurHeartOther) || pmrl.equal(pmrl.toUpperCase(parent.cardiacTypeOfIrregularRhythmMurmurHeartOther), 'NO')))) {\n      valid = 'Please select at least one diagnosis and one treatment type below';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacHypertensionDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHypertensionDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacHypertensionReadingAtDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHypertensionReadingAtDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHypertensionDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacHypertensionMostCurrentReading" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHypertensionMostCurrentReading",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHypertensionDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacHypertensionDateOfCurrentReading" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHypertensionDateOfCurrentReading",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHypertensionDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacHypertensionDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHypertensionDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHypertensionDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacHypertensionDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHypertensionDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHypertensionDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacHypertensionDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHypertensionDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHypertensionDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacHypertensionPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHypertensionPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHypertensionDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHypertensionDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "cardiacHypertensionDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHypertensionDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cardiacHypertensionDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cardiacHypertensionPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "cardiacHighCholesterolDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHighCholesterolDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacHighCholesterolReadingAtDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHighCholesterolReadingAtDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHighCholesterolDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacHighCholesterolMostCurrentReading" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHighCholesterolMostCurrentReading",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHighCholesterolDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacHighCholesterolDateOfCurrentReading" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHighCholesterolDateOfCurrentReading",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHighCholesterolDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacHighCholesterolDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHighCholesterolDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHighCholesterolDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacHighCholesterolDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHighCholesterolDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHighCholesterolDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacHighCholesterolDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHighCholesterolDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHighCholesterolDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacHighCholesterolPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHighCholesterolPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHighCholesterolDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHighCholesterolDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "cardiacHighCholesterolDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHighCholesterolDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cardiacHighCholesterolDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cardiacHighCholesterolPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "cardiacHeartAttackDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHeartAttackDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacHeartAttackDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHeartAttackDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartAttackDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacHeartAttackDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHeartAttackDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartAttackDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacHeartAttackDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHeartAttackDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartAttackDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacHeartAttackPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHeartAttackPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartAttackDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartAttackDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "cardiacHeartAttackDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHeartAttackDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartAttackDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cardiacHeartAttackPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "cardiacCoronaryArteryDiseaseDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacCoronaryArteryDiseaseDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacCoronaryArteryDiseaseDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacCoronaryArteryDiseaseDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacCoronaryArteryDiseaseDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacCoronaryArteryDiseaseDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacCoronaryArteryDiseaseDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacCoronaryArteryDiseaseDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacCoronaryArteryDiseaseDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacCoronaryArteryDiseaseDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacCoronaryArteryDiseaseDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacCoronaryArteryDiseasePhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacCoronaryArteryDiseasePhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacCoronaryArteryDiseaseDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacCoronaryArteryDiseaseDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "cardiacCoronaryArteryDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacCoronaryArteryDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cardiacCoronaryArteryDiseaseDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cardiacCoronaryArteryDiseasePhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "cardiacChestPainDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacChestPainDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacChestPainDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacChestPainDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacChestPainDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacChestPainDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacChestPainDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacChestPainDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacChestPainDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacChestPainDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacChestPainDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacChestPainPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacChestPainPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacChestPainDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacChestPainDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "cardiacChestPainDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacChestPainDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cardiacChestPainDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cardiacChestPainPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "cardiacIrregularHeartRhythmDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacIrregularHeartRhythmDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacIrregularHeartRhythmDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacIrregularHeartRhythmDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacIrregularHeartRhythmDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacIrregularHeartRhythmDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacIrregularHeartRhythmDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacIrregularHeartRhythmDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacIrregularHeartRhythmPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacIrregularHeartRhythmPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "cardiacIrregularHeartRhythmDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacIrregularHeartRhythmDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cardiacIrregularHeartRhythmPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "cardiacHeartMurmurDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHeartMurmurDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacHeartMurmurDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHeartMurmurDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacHeartMurmurDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHeartMurmurDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacHeartMurmurDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHeartMurmurDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacHeartMurmurPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHeartMurmurPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "cardiacHeartMurmurDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacHeartMurmurDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cardiacHeartMurmurPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "cardiacValvularHeartDiseaseDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacValvularHeartDiseaseDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacValvularHeartDiseaseDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacValvularHeartDiseaseDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacValvularHeartDiseaseDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacValvularHeartDiseaseDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacValvularHeartDiseaseDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacValvularHeartDiseaseDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacValvularHeartDiseasePhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacValvularHeartDiseasePhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "cardiacValvularHeartDiseaseDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacValvularHeartDiseaseDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cardiacValvularHeartDiseasePhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "cardiacStrokeDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacStrokeDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacStrokeDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacStrokeDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacStrokeDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacStrokeDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacStrokeDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacStrokeDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacStrokeDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacStrokeDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacStrokeDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacStrokePhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacStrokePhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacStrokeDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacStrokeDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "cardiacStrokeDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacStrokeDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cardiacStrokeDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cardiacStrokePhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "cardiacTransientIschemicAttackDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTransientIschemicAttackDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacTransientIschemicAttackDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTransientIschemicAttackDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTransientIschemicAttackDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacTransientIschemicAttackDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTransientIschemicAttackDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTransientIschemicAttackDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacTransientIschemicAttackDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTransientIschemicAttackDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTransientIschemicAttackDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacTransientIschemicAttackPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTransientIschemicAttackPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTransientIschemicAttackDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTransientIschemicAttackDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "cardiacTransientIschemicAttackDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTransientIschemicAttackDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cardiacTransientIschemicAttackDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cardiacTransientIschemicAttackPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "cardiacAneurysmDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacAneurysmDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacAneurysmDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacAneurysmDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacAneurysmDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacAneurysmDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacAneurysmDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacAneurysmDiagnosis), 'YES');\n  });\n}"
                  },
                  "cardiacAneurysmDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacAneurysmDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacAneurysmDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacAneurysmPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacAneurysmPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacAneurysmDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacAneurysmDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "cardiacAneurysmDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacAneurysmDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cardiacAneurysmDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cardiacAneurysmPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "cardiacOtherDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacOtherDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacOtherDiagnosis2" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacOtherDiagnosis2",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.greaterThan(pmrl.length(parent.cardiacDiagnosisOtherGroup), Big('1'))) {\n      valid = 'YES';\n    } else {\n      valid = 'NO';\n    }\n    return valid;\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacDiagnosisOtherGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacDiagnosisOtherGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.cardiacDiagnosisOtherGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.cardiacDiagnosisOtherGroup), Big('2'));\n  });\n}" ],
                    "objectFields" : {
                      "cardiacOtherDiagnosisDetails" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacDiagnosisOtherGroup.cardiacOtherDiagnosisDetails",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacOtherDiagnosis), 'YES');\n  });\n}"
                      },
                      "cardiacOtherDateOfDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacDiagnosisOtherGroup.cardiacOtherDateOfDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacOtherDiagnosis), 'YES');\n  });\n}"
                      },
                      "cardiacOtherDateLastSeenByPhysician" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacDiagnosisOtherGroup.cardiacOtherDateLastSeenByPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacOtherDiagnosis), 'YES');\n  });\n}"
                      },
                      "cardiacOtherDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacDiagnosisOtherGroup.cardiacOtherDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacOtherDiagnosis), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "cardiacOtherPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacDiagnosisOtherGroup.cardiacOtherPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacOtherDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacOtherDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "cardiacOtherDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacDiagnosisOtherGroup.cardiacOtherDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cardiacOtherDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cardiacOtherPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "2"
                  },
                  "cardiacTypeOfIrregularRhythmMurmurHeartAtrialFibrillation" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTypeOfIrregularRhythmMurmurHeartAtrialFibrillation",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacTypeOfIrregularRhythmMurmurHeartSupraventricularTachycardia" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTypeOfIrregularRhythmMurmurHeartSupraventricularTachycardia",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacTypeOfIrregularRhythmMurmurHeartPrematureVentricularContractions" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTypeOfIrregularRhythmMurmurHeartPrematureVentricularContractions",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacTypeOfIrregularRhythmMurmurHeartAorticStenosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTypeOfIrregularRhythmMurmurHeartAorticStenosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacTypeOfIrregularRhythmMurmurHeartMitralStenosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTypeOfIrregularRhythmMurmurHeartMitralStenosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacTypeOfIrregularRhythmMurmurHeartAorticRegurgitationInsufficiency" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTypeOfIrregularRhythmMurmurHeartAorticRegurgitationInsufficiency",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacTypeOfIrregularRhythmMurmurHeartMitralRegurgitationInsufficiency" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTypeOfIrregularRhythmMurmurHeartMitralRegurgitationInsufficiency",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacTypeOfIrregularRhythmMurmurHeartMitralValveProlapse" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTypeOfIrregularRhythmMurmurHeartMitralValveProlapse",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacTypeOfIrregularRhythmMurmurHeartOther" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTypeOfIrregularRhythmMurmurHeartOther",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacTypeOfIrregularRhythmMurmurHeartOtherProvideDetails" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTypeOfIrregularRhythmMurmurHeartOtherProvideDetails",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTypeOfIrregularRhythmMurmurHeartOther), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTypeOfIrregularRhythmMurmurHeartOther), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTypeOfIrregularRhythmMurmurHeartOther), 'YES');\n  });\n}"
                  },
                  "cardiacMoreThanOneStrokeOrTIA" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacMoreThanOneStrokeOrTIA",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.cardiacStrokeDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacTransientIschemicAttackDiagnosis), 'YES'));\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacMoreThanOneStrokeOrTIAGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacMoreThanOneStrokeOrTIAGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.cardiacMoreThanOneStrokeOrTIAGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.cardiacMoreThanOneStrokeOrTIAGroup), Big('5'));\n  });\n}" ],
                    "objectFields" : {
                      "cardiacMoreThanOneStrokeOrTIADiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacMoreThanOneStrokeOrTIAGroup.cardiacMoreThanOneStrokeOrTIADiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacStrokeDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTransientIschemicAttackDiagnosis), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacMoreThanOneStrokeOrTIA), 'YES');\n  });\n}"
                      },
                      "cardiacMoreThanOneStrokeOrTIADate" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacMoreThanOneStrokeOrTIAGroup.cardiacMoreThanOneStrokeOrTIADate",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacStrokeDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTransientIschemicAttackDiagnosis), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacMoreThanOneStrokeOrTIA), 'YES');\n  });\n}"
                      },
                      "cardiacMoreThanOneStrokeOrTIADiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacMoreThanOneStrokeOrTIAGroup.cardiacMoreThanOneStrokeOrTIADiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacStrokeDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTransientIschemicAttackDiagnosis), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacMoreThanOneStrokeOrTIA), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "cardiacMoreThanOneStrokeOrTIAPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacMoreThanOneStrokeOrTIAGroup.cardiacMoreThanOneStrokeOrTIAPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacStrokeDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTransientIschemicAttackDiagnosis), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacMoreThanOneStrokeOrTIA), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacMoreThanOneStrokeOrTIADiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "cardiacMoreThanOneStrokeOrTIADiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacMoreThanOneStrokeOrTIAGroup.cardiacMoreThanOneStrokeOrTIADiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cardiacMoreThanOneStrokeOrTIADiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cardiacMoreThanOneStrokeOrTIAPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "5"
                  },
                  "cardiacTreatmentTypeMedication" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeMedication",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacTreatmentTypeMedicationGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeMedicationGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.cardiacTreatmentTypeMedicationGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.cardiacTreatmentTypeMedicationGroup), Big('4'));\n  });\n}" ],
                    "objectFields" : {
                      "cardiacTreatmentTypeMedicationDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeMedicationGroup.cardiacTreatmentTypeMedicationDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeMedication), 'YES');\n  });\n}"
                      },
                      "cardiacTreatmentTypeMedicationNameOfMedication" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeMedicationGroup.cardiacTreatmentTypeMedicationNameOfMedication",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeMedication), 'YES');\n  });\n}"
                      },
                      "cardiacTreatmentTypeMedicationDosageFrequency" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeMedicationGroup.cardiacTreatmentTypeMedicationDosageFrequency",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeMedication), 'YES');\n  });\n}"
                      },
                      "cardiacTreatmentTypeMedicationDateFirstTaken" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeMedicationGroup.cardiacTreatmentTypeMedicationDateFirstTaken",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeMedication), 'YES');\n  });\n}"
                      },
                      "cardiacTreatmentTypeMedicationDateLastTaken" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeMedicationGroup.cardiacTreatmentTypeMedicationDateLastTaken",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeMedication), 'YES');\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "4"
                  },
                  "cardiacTreatmentTypeSurgery" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeSurgery",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacTreatmentTypeSurgeryGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeSurgeryGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.cardiacTreatmentTypeSurgeryGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.cardiacTreatmentTypeSurgeryGroup), Big('4'));\n  });\n}" ],
                    "objectFields" : {
                      "cardiacTreatmentTypeSurgeryDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeSurgeryGroup.cardiacTreatmentTypeSurgeryDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeSurgery), 'YES');\n  });\n}"
                      },
                      "cardiacTreatmentTypeSurgeryTypeOfSurgery" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeSurgeryGroup.cardiacTreatmentTypeSurgeryTypeOfSurgery",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeSurgery), 'YES');\n  });\n}"
                      },
                      "cardiacTreatmentTypeSurgeryDateOfSurgery" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeSurgeryGroup.cardiacTreatmentTypeSurgeryDateOfSurgery",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeSurgery), 'YES');\n  });\n}"
                      },
                      "cardiacTreatmentTypeSurgeryResults" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeSurgeryGroup.cardiacTreatmentTypeSurgeryResults",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeSurgery), 'YES');\n  });\n}"
                      },
                      "cardiacTreatmentTypeSurgeryDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeSurgeryGroup.cardiacTreatmentTypeSurgeryDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeSurgery), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "cardiacTreatmentTypeSurgeryPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeSurgeryGroup.cardiacTreatmentTypeSurgeryPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeSurgery), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTreatmentTypeSurgeryDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "cardiacTreatmentTypeSurgeryDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeSurgeryGroup.cardiacTreatmentTypeSurgeryDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cardiacTreatmentTypeSurgeryDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cardiacTreatmentTypeSurgeryPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "4"
                  },
                  "cardiacTreatmentTypeOther" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeOther",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacTreatmentTypeOtherGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeOtherGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.cardiacTreatmentTypeOtherGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.cardiacTreatmentTypeOtherGroup), Big('4'));\n  });\n}" ],
                    "objectFields" : {
                      "cardiacTreatmentTypeOtherDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeOtherGroup.cardiacTreatmentTypeOtherDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeOther), 'YES');\n  });\n}"
                      },
                      "cardiacTreatmentTypeOtherTypeOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeOtherGroup.cardiacTreatmentTypeOtherTypeOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeOther), 'YES');\n  });\n}"
                      },
                      "cardiacTreatmentTypeOtherDateStarted" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeOtherGroup.cardiacTreatmentTypeOtherDateStarted",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeOther), 'YES');\n  });\n}"
                      },
                      "cardiacTreatmentTypeOtherDateEnded" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeOtherGroup.cardiacTreatmentTypeOtherDateEnded",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeOther), 'YES');\n  });\n}"
                      },
                      "cardiacTreatmentTypeOtherDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeOtherGroup.cardiacTreatmentTypeOtherDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeOther), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "cardiacTreatmentTypeOtherPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeOtherGroup.cardiacTreatmentTypeOtherPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeOther), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTreatmentTypeOtherDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "cardiacTreatmentTypeOtherDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeOtherGroup.cardiacTreatmentTypeOtherDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cardiacTreatmentTypeOtherDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cardiacTreatmentTypeOtherPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "4"
                  },
                  "cardiacRecommendedTestOrSurgery" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacRecommendedTestOrSurgery",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacRecommendedTestOrSurgeryGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacRecommendedTestOrSurgeryGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.cardiacRecommendedTestOrSurgeryGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.cardiacRecommendedTestOrSurgeryGroup), Big('4'));\n  });\n}" ],
                    "objectFields" : {
                      "cardiacRecommendedTestOrSurgeryDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacRecommendedTestOrSurgeryGroup.cardiacRecommendedTestOrSurgeryDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacRecommendedTestOrSurgery), 'YES');\n  });\n}"
                      },
                      "cardiacRecommendedTestOrSurgeryTypeOfTestSurgery" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacRecommendedTestOrSurgeryGroup.cardiacRecommendedTestOrSurgeryTypeOfTestSurgery",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacRecommendedTestOrSurgery), 'YES');\n  });\n}"
                      },
                      "cardiacRecommendedTestOrSurgeryDate" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacRecommendedTestOrSurgeryGroup.cardiacRecommendedTestOrSurgeryDate",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacRecommendedTestOrSurgery), 'YES');\n  });\n}"
                      },
                      "cardiacRecommendedTestOrSurgeryResults" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacRecommendedTestOrSurgeryGroup.cardiacRecommendedTestOrSurgeryResults",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacRecommendedTestOrSurgery), 'YES');\n  });\n}"
                      },
                      "cardiacRecommendedTestOrSurgeryDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacRecommendedTestOrSurgeryGroup.cardiacRecommendedTestOrSurgeryDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacRecommendedTestOrSurgery), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "cardiacRecommendedTestOrSurgeryPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacRecommendedTestOrSurgeryGroup.cardiacRecommendedTestOrSurgeryPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacRecommendedTestOrSurgery), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacRecommendedTestOrSurgeryDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "cardiacRecommendedTestOrSurgeryDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacRecommendedTestOrSurgeryGroup.cardiacRecommendedTestOrSurgeryDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cardiacRecommendedTestOrSurgeryDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cardiacRecommendedTestOrSurgeryPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "4"
                  },
                  "cardiacTreatmentTypeHospitalizationOrOutPatient" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeHospitalizationOrOutPatient",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacTreatmentTypeHospitalizationOrOutPatientGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeHospitalizationOrOutPatientGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.cardiacTreatmentTypeHospitalizationOrOutPatientGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.cardiacTreatmentTypeHospitalizationOrOutPatientGroup), Big('4'));\n  });\n}" ],
                    "objectFields" : {
                      "cardiacTreatmentTypeHospitalizationOrOutPatientDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeHospitalizationOrOutPatientGroup.cardiacTreatmentTypeHospitalizationOrOutPatientDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}"
                      },
                      "cardiacTreatmentTypeHospitalizationOrOutPatientDateOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeHospitalizationOrOutPatientGroup.cardiacTreatmentTypeHospitalizationOrOutPatientDateOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}"
                      },
                      "cardiacTreatmentTypeHospitalizationOrOutPatientDurationOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeHospitalizationOrOutPatientGroup.cardiacTreatmentTypeHospitalizationOrOutPatientDurationOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}"
                      },
                      "cardiacTreatmentTypeHospitalizationOrOutPatientTypeOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeHospitalizationOrOutPatientGroup.cardiacTreatmentTypeHospitalizationOrOutPatientTypeOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}"
                      },
                      "cardiacTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeHospitalizationOrOutPatientGroup.cardiacTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "cardiacTreatmentTypeHospitalizationOrOutPatientPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeHospitalizationOrOutPatientGroup.cardiacTreatmentTypeHospitalizationOrOutPatientPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeHospitalizationOrOutPatient), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "cardiacTreatmentTypeHospitalizationOrOutPatientDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeHospitalizationOrOutPatientGroup.cardiacTreatmentTypeHospitalizationOrOutPatientDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cardiacTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cardiacTreatmentTypeHospitalizationOrOutPatientPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "4"
                  },
                  "cardiacMissedWorkForCondition" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacMissedWorkForCondition",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cardiacMissedWorkForConditionDetails" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacMissedWorkForConditionDetails",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacMissedWorkForCondition), 'YES');\n  });\n}"
                  },
                  "cardiacAdditionalInformationOrComments" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cardiacAdditionalInformationOrComments",
                    "validationRules" : [ ],
                    "required" : "false"
                  },
                  "diabetesQuestion" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesQuestion",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.parent.parent.gender), 'MALE') && ((!pmrl.isDefined(parent.diabetesDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.diabetesDiagnosis), 'NO')) && (!pmrl.isDefined(parent.diabetesElevatedGlucoseDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.diabetesElevatedGlucoseDiagnosis), 'NO')) && (!pmrl.isDefined(parent.diabetesSugarInUrineDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.diabetesSugarInUrineDiagnosis), 'NO')) && (!pmrl.isDefined(parent.diabetesOtherDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.diabetesOtherDiagnosis), 'NO'))) || pmrl.equal(pmrl.toUpperCase(parent.parent.parent.gender), 'FEMALE') && ((!pmrl.isDefined(parent.diabetesDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.diabetesDiagnosis), 'NO')) && (!pmrl.isDefined(parent.diabetesElevatedGlucoseDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.diabetesElevatedGlucoseDiagnosis), 'NO')) && (!pmrl.isDefined(parent.diabetesSugarInUrineDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.diabetesSugarInUrineDiagnosis), 'NO')) && (!pmrl.isDefined(parent.diabetesOtherDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.diabetesOtherDiagnosis), 'NO')) && (!pmrl.isDefined(parent.diabetesGestationalDiabetesDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.diabetesGestationalDiabetesDiagnosis), 'NO'))) || (!pmrl.isDefined(parent.diabetesTreatmentTypeDiet) || pmrl.equal(pmrl.toUpperCase(parent.diabetesTreatmentTypeDiet), 'NO')) && (!pmrl.isDefined(parent.diabetesTreatmentTypeOralMedication) || pmrl.equal(pmrl.toUpperCase(parent.diabetesTreatmentTypeOralMedication), 'NO')) && (!pmrl.isDefined(parent.diabetesTreatmentTypeInsulin) || pmrl.equal(pmrl.toUpperCase(parent.diabetesTreatmentTypeInsulin), 'NO')) && (!pmrl.isDefined(parent.diabetesTreatmentTypeOther) || pmrl.equal(pmrl.toUpperCase(parent.diabetesTreatmentTypeOther), 'NO')) || (!pmrl.isDefined(parent.diabetesRetinopathyDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.diabetesRetinopathyDiagnosis), 'NO')) && (!pmrl.isDefined(parent.diabetesProteinInTheUrineDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.diabetesProteinInTheUrineDiagnosis), 'NO')) && (!pmrl.isDefined(parent.diabetesSkinUlcersDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.diabetesSkinUlcersDiagnosis), 'NO')) && (!pmrl.isDefined(parent.diabetesEyeLaserTherapyDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.diabetesEyeLaserTherapyDiagnosis), 'NO')) && (!pmrl.isDefined(parent.diabetesNeuropathyDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.diabetesNeuropathyDiagnosis), 'NO')) && (!pmrl.isDefined(parent.diabetesNoneOfTheAboveDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.diabetesNoneOfTheAboveDiagnosis), 'NO')))) {\n      valid = 'Please select at least one diagnosis, one treatment type, and verify any additional complications below';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesDiagnosisDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesDiagnosisDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesDiagnosis), 'YES');\n  });\n}"
                  },
                  "diabetesDiagnosisDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesDiagnosisDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesDiagnosis), 'YES');\n  });\n}"
                  },
                  "diabetesDiagnosisDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesDiagnosisDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesDiagnosisPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesDiagnosisPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesDiagnosisDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "diabetesDiagnosisDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesDiagnosisDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.diabetesDiagnosisDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.diabetesDiagnosisPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "diabetesGestationalDiabetesDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesGestationalDiabetesDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesGestationalDiabetesDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesGestationalDiabetesDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.parent.gender), 'FEMALE') && pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesGestationalDiabetesDiagnosis), 'YES');\n  });\n}"
                  },
                  "diabetesGestationalDiabetesDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesGestationalDiabetesDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.parent.gender), 'FEMALE') && pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesGestationalDiabetesDiagnosis), 'YES');\n  });\n}"
                  },
                  "diabetesGestationalDiabetesDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesGestationalDiabetesDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.parent.gender), 'FEMALE') && pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesGestationalDiabetesDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesGestationalDiabetesPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesGestationalDiabetesPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.parent.gender), 'FEMALE') && pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesGestationalDiabetesDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesGestationalDiabetesDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "diabetesGestationalDiabetesDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesGestationalDiabetesDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.diabetesGestationalDiabetesDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.diabetesGestationalDiabetesPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "diabetesElevatedGlucoseDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesElevatedGlucoseDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesElevatedGlucoseDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesElevatedGlucoseDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesElevatedGlucoseDiagnosis), 'YES');\n  });\n}"
                  },
                  "diabetesElevatedGlucoseDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesElevatedGlucoseDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesElevatedGlucoseDiagnosis), 'YES');\n  });\n}"
                  },
                  "diabetesElevatedGlucoseDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesElevatedGlucoseDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesElevatedGlucoseDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesElevatedGlucosePhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesElevatedGlucosePhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesElevatedGlucoseDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesElevatedGlucoseDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "diabetesElevatedGlucoseDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesElevatedGlucoseDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.diabetesElevatedGlucoseDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.diabetesElevatedGlucosePhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "diabetesSugarInUrineDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesSugarInUrineDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesSugarInUrineDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesSugarInUrineDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesSugarInUrineDiagnosis), 'YES');\n  });\n}"
                  },
                  "diabetesSugarInUrineDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesSugarInUrineDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesSugarInUrineDiagnosis), 'YES');\n  });\n}"
                  },
                  "diabetesSugarInUrineDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesSugarInUrineDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesSugarInUrineDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesSugarInUrinePhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesSugarInUrinePhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesSugarInUrineDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesSugarInUrineDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "diabetesSugarInUrineDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesSugarInUrineDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.diabetesSugarInUrineDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.diabetesSugarInUrinePhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "diabetesOtherDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesOtherDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesOtherDiagnosis2" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesOtherDiagnosis2",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.greaterThan(pmrl.length(parent.diabetesOtherGroup), Big('1'))) {\n      valid = 'YES';\n    } else {\n      valid = 'NO';\n    }\n    return valid;\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesOtherGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesOtherGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.diabetesOtherGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.diabetesOtherGroup), Big('2'));\n  });\n}" ],
                    "objectFields" : {
                      "diabetesOtherDiagnosisDetails" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesOtherGroup.diabetesOtherDiagnosisDetails",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesOtherDiagnosis), 'YES');\n  });\n}"
                      },
                      "diabetesOtherDiagnosisDateOfDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesOtherGroup.diabetesOtherDiagnosisDateOfDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesOtherDiagnosis), 'YES');\n  });\n}"
                      },
                      "diabetesOtherDiagnosisDateLastSeenByPhysician" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesOtherGroup.diabetesOtherDiagnosisDateLastSeenByPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesOtherDiagnosis), 'YES');\n  });\n}"
                      },
                      "diabetesOtherDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesOtherGroup.diabetesOtherDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesOtherDiagnosis), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "diabetesOtherPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesOtherGroup.diabetesOtherPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesOtherDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesOtherDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "diabetesOtherDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesOtherGroup.diabetesOtherDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.diabetesOtherDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.diabetesOtherPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "2"
                  },
                  "diabetesTreatmentTypeDiet" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesTreatmentTypeDiet",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesTreatmentTypeDietDetails" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesTreatmentTypeDietDetails",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesTreatmentTypeDiet), 'YES');\n  });\n}"
                  },
                  "diabetesTreatmentTypeOralMedication" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesTreatmentTypeOralMedication",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesOralMedicationTreatmentGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesOralMedicationTreatmentGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.diabetesOralMedicationTreatmentGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.diabetesOralMedicationTreatmentGroup), Big('5'));\n  });\n}" ],
                    "objectFields" : {
                      "diabetesOralMedicationDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesOralMedicationTreatmentGroup.diabetesOralMedicationDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeOralMedication), 'YES');\n  });\n}"
                      },
                      "diabetesOralMedicationName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesOralMedicationTreatmentGroup.diabetesOralMedicationName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeOralMedication), 'YES');\n  });\n}"
                      },
                      "diabetesOralMedicationDosage" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesOralMedicationTreatmentGroup.diabetesOralMedicationDosage",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeOralMedication), 'YES');\n  });\n}"
                      },
                      "diabetesOralMedicationDateFirstTaken" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesOralMedicationTreatmentGroup.diabetesOralMedicationDateFirstTaken",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeOralMedication), 'YES');\n  });\n}"
                      },
                      "diabetesOralMedicationDateLastTaken" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesOralMedicationTreatmentGroup.diabetesOralMedicationDateLastTaken",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeOralMedication), 'YES');\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "5"
                  },
                  "diabetesTreatmentTypeInsulin" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesTreatmentTypeInsulin",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesInsulinTreatmentGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesInsulinTreatmentGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.diabetesInsulinTreatmentGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.diabetesInsulinTreatmentGroup), Big('5'));\n  });\n}" ],
                    "objectFields" : {
                      "diabetesInsulinDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesInsulinTreatmentGroup.diabetesInsulinDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeInsulin), 'YES');\n  });\n}"
                      },
                      "diabetesInsulinName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesInsulinTreatmentGroup.diabetesInsulinName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeInsulin), 'YES');\n  });\n}"
                      },
                      "diabetesInsulinDosage" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesInsulinTreatmentGroup.diabetesInsulinDosage",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeInsulin), 'YES');\n  });\n}"
                      },
                      "diabetesInsulinDateFirstTaken" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesInsulinTreatmentGroup.diabetesInsulinDateFirstTaken",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeInsulin), 'YES');\n  });\n}"
                      },
                      "diabetesInsulinDateLastTaken" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesInsulinTreatmentGroup.diabetesInsulinDateLastTaken",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeInsulin), 'YES');\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "5"
                  },
                  "diabetesTreatmentTypeOther" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesTreatmentTypeOther",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesOtherTreatmentGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesOtherTreatmentGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.diabetesOtherTreatmentGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.diabetesOtherTreatmentGroup), Big('5'));\n  });\n}" ],
                    "objectFields" : {
                      "diabetesOtherTreatmentDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesOtherTreatmentGroup.diabetesOtherTreatmentDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeOther), 'YES');\n  });\n}"
                      },
                      "diabetesOtherTreatmentTypeOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesOtherTreatmentGroup.diabetesOtherTreatmentTypeOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeOther), 'YES');\n  });\n}"
                      },
                      "diabetesOtherTreatmentDateStarted" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesOtherTreatmentGroup.diabetesOtherTreatmentDateStarted",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeOther), 'YES');\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "5"
                  },
                  "diabetesTreatmentChangedInTheLast6Months" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesTreatmentChangedInTheLast6Months",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesTreatmentChangedDetails" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesTreatmentChangedDetails",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesTreatmentChangedInTheLast6Months), 'YES');\n  });\n}"
                  },
                  "diabetesGlycatedHemoglobin" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesGlycatedHemoglobin",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesGlycatedHemoglobinDetails" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesGlycatedHemoglobinDetails",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesGlycatedHemoglobin), 'YES');\n  });\n}"
                  },
                  "diabetesTestOrSurgeryRelatedToCondition" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesTestOrSurgeryRelatedToCondition",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesTestOrSurgeryGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesTestOrSurgeryGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.diabetesTestOrSurgeryGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.diabetesTestOrSurgeryGroup), Big('4'));\n  });\n}" ],
                    "objectFields" : {
                      "diabetesTestOrSurgeryDiagnoses" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesTestOrSurgeryGroup.diabetesTestOrSurgeryDiagnoses",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTestOrSurgeryRelatedToCondition), 'YES');\n  });\n}"
                      },
                      "diabetesTestOrSurgeryType" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesTestOrSurgeryGroup.diabetesTestOrSurgeryType",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTestOrSurgeryRelatedToCondition), 'YES');\n  });\n}"
                      },
                      "diabetesTestOrSurgeryDate" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesTestOrSurgeryGroup.diabetesTestOrSurgeryDate",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTestOrSurgeryRelatedToCondition), 'YES');\n  });\n}"
                      },
                      "diabetesTestOrSurgeryResults" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesTestOrSurgeryGroup.diabetesTestOrSurgeryResults",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTestOrSurgeryRelatedToCondition), 'YES');\n  });\n}"
                      },
                      "diabetesTestOrSurgeryDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesTestOrSurgeryGroup.diabetesTestOrSurgeryDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTestOrSurgeryRelatedToCondition), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "diabetesTestOrSurgeryPhysicianName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesTestOrSurgeryGroup.diabetesTestOrSurgeryPhysicianName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTestOrSurgeryRelatedToCondition), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesTestOrSurgeryDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "diabetesTestOrSurgeryDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesTestOrSurgeryGroup.diabetesTestOrSurgeryDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.diabetesTestOrSurgeryDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.diabetesTestOrSurgeryPhysicianName;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "4"
                  },
                  "diabetesHospitalizedForCondition" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesHospitalizedForCondition",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesHospitalizedForConditionGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesHospitalizedForConditionGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.diabetesHospitalizedForConditionGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.diabetesHospitalizedForConditionGroup), Big('4'));\n  });\n}" ],
                    "objectFields" : {
                      "diabetesHospitalizedDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesHospitalizedForConditionGroup.diabetesHospitalizedDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesHospitalizedForCondition), 'YES');\n  });\n}"
                      },
                      "diabetesHospitalizedDateOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesHospitalizedForConditionGroup.diabetesHospitalizedDateOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesHospitalizedForCondition), 'YES');\n  });\n}"
                      },
                      "diabetesHospitalizedDurationOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesHospitalizedForConditionGroup.diabetesHospitalizedDurationOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesHospitalizedForCondition), 'YES');\n  });\n}"
                      },
                      "diabetesHospitalizedTypeOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesHospitalizedForConditionGroup.diabetesHospitalizedTypeOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesHospitalizedForCondition), 'YES');\n  });\n}"
                      },
                      "diabetesHospitalizedDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesHospitalizedForConditionGroup.diabetesHospitalizedDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesHospitalizedForCondition), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "diabetesHospitalizedPhysicianName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesHospitalizedForConditionGroup.diabetesHospitalizedPhysicianName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesHospitalizedForCondition), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesHospitalizedDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "diabetesHospitalizedDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesHospitalizedForConditionGroup.diabetesHospitalizedDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.diabetesHospitalizedDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.diabetesHospitalizedPhysicianName;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "4"
                  },
                  "diabetesRetinopathyDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesRetinopathyDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesRetinopathyDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesRetinopathyDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesRetinopathyDiagnosis), 'YES');\n  });\n}"
                  },
                  "diabetesRetinopathyDetailsOfTreatment" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesRetinopathyDetailsOfTreatment",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesRetinopathyDiagnosis), 'YES');\n  });\n}"
                  },
                  "diabetesProteinInTheUrineDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesProteinInTheUrineDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesProteinInTheUrineDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesProteinInTheUrineDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesProteinInTheUrineDiagnosis), 'YES');\n  });\n}"
                  },
                  "diabetesProteinInTheUrineDetailsOfTreatment" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesProteinInTheUrineDetailsOfTreatment",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesProteinInTheUrineDiagnosis), 'YES');\n  });\n}"
                  },
                  "diabetesSkinUlcersDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesSkinUlcersDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesSkinUlcersDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesSkinUlcersDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesSkinUlcersDiagnosis), 'YES');\n  });\n}"
                  },
                  "diabetesSkinUlcersDetailsOfTreatment" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesSkinUlcersDetailsOfTreatment",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesSkinUlcersDiagnosis), 'YES');\n  });\n}"
                  },
                  "diabetesEyeLaserTherapyDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesEyeLaserTherapyDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesEyeLaserTherapyDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesEyeLaserTherapyDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesEyeLaserTherapyDiagnosis), 'YES');\n  });\n}"
                  },
                  "diabetesEyeLaserTherapyDetailsOfTreatment" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesEyeLaserTherapyDetailsOfTreatment",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesEyeLaserTherapyDiagnosis), 'YES');\n  });\n}"
                  },
                  "diabetesNeuropathyDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesNeuropathyDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesNeuropathyDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesNeuropathyDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesNeuropathyDiagnosis), 'YES');\n  });\n}"
                  },
                  "diabetesNeuropathyDetailsOfTreatment" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesNeuropathyDetailsOfTreatment",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesNeuropathyDiagnosis), 'YES');\n  });\n}"
                  },
                  "diabetesNoneOfTheAboveDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesNoneOfTheAboveDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesMissedWorkForThisCondition" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesMissedWorkForThisCondition",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "diabetesMissedWorkForThisConditionDetails" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesMissedWorkForThisConditionDetails",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesMissedWorkForThisCondition), 'YES');\n  });\n}"
                  },
                  "diabetesAdditionalInformationOrComments" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diabetesAdditionalInformationOrComments",
                    "validationRules" : [ ],
                    "required" : "false"
                  },
                  "cancerQuestion" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerQuestion",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && ((!pmrl.isDefined(parent.cancerDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.cancerDiagnosis), 'NO')) && (!pmrl.isDefined(parent.cancerTumorDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.cancerTumorDiagnosis), 'NO')) && (!pmrl.isDefined(parent.cancerCystDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.cancerCystDiagnosis), 'NO')) && (!pmrl.isDefined(parent.cancerGrowthDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.cancerGrowthDiagnosis), 'NO')) && (!pmrl.isDefined(parent.cancerOtherDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.cancerOtherDiagnosis), 'NO')) || (!pmrl.isDefined(parent.cancerTreatmentTypeMedication) || pmrl.equal(pmrl.toUpperCase(parent.cancerTreatmentTypeMedication), 'NO')) && (!pmrl.isDefined(parent.cancerTreatmentTypeChemotherapy) || pmrl.equal(pmrl.toUpperCase(parent.cancerTreatmentTypeChemotherapy), 'NO')) && (!pmrl.isDefined(parent.cancerTreatmentTypeRadiation) || pmrl.equal(pmrl.toUpperCase(parent.cancerTreatmentTypeRadiation), 'NO')) && (!pmrl.isDefined(parent.cancerTreatmentTypeSurgery) || pmrl.equal(pmrl.toUpperCase(parent.cancerTreatmentTypeSurgery), 'NO')) && (!pmrl.isDefined(parent.cancerTreatmentTypeOther) || pmrl.equal(pmrl.toUpperCase(parent.cancerTreatmentTypeOther), 'NO')))) {\n      valid = 'Please select at least one diagnosis and one treatment type below';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cancerDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cancerDiagnosisTypeLocation" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerDiagnosisTypeLocation",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerDiagnosis), 'YES');\n  });\n}"
                  },
                  "cancerDiagnosisPathology" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerDiagnosisPathology",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerDiagnosis), 'YES');\n  });\n}"
                  },
                  "cancerDiagnosisStageGrade" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerDiagnosisStageGrade",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerDiagnosis), 'YES');\n  });\n}"
                  },
                  "cancerDiagnosisDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerDiagnosisDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerDiagnosis), 'YES');\n  });\n}"
                  },
                  "cancerDiagnosisDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerDiagnosisDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerDiagnosis), 'YES');\n  });\n}"
                  },
                  "cancerDiagnosisDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerDiagnosisDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cancerDiagnosisPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerDiagnosisPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerDiagnosisDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "cancerDiagnosisDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerDiagnosisDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cancerDiagnosisDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cancerDiagnosisPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "cancerTumorDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerTumorDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cancerTumorTypeLocation" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerTumorTypeLocation",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerTumorDiagnosis), 'YES');\n  });\n}"
                  },
                  "cancerTumorPathology" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerTumorPathology",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerTumorDiagnosis), 'YES');\n  });\n}"
                  },
                  "cancerTumorStageGrade" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerTumorStageGrade",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerTumorDiagnosis), 'YES');\n  });\n}"
                  },
                  "cancerTumorDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerTumorDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerTumorDiagnosis), 'YES');\n  });\n}"
                  },
                  "cancerTumorDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerTumorDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerTumorDiagnosis), 'YES');\n  });\n}"
                  },
                  "cancerTumorDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerTumorDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerTumorDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cancerTumorPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerTumorPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerTumorDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerTumorDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "cancerTumorDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerTumorDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cancerTumorDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cancerTumorPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "cancerCystDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerCystDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cancerCystTypeLocation" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerCystTypeLocation",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerCystDiagnosis), 'YES');\n  });\n}"
                  },
                  "cancerCystPathology" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerCystPathology",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerCystDiagnosis), 'YES');\n  });\n}"
                  },
                  "cancerCystStageGrade" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerCystStageGrade",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerCystDiagnosis), 'YES');\n  });\n}"
                  },
                  "cancerCystDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerCystDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerCystDiagnosis), 'YES');\n  });\n}"
                  },
                  "cancerCystDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerCystDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerCystDiagnosis), 'YES');\n  });\n}"
                  },
                  "cancerCystDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerCystDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerCystDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cancerCystPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerCystPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerCystDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerCystDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "cancerCystDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerCystDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cancerCystDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cancerCystPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "cancerGrowthDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerGrowthDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cancerGrowthTypeLocation" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerGrowthTypeLocation",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerGrowthDiagnosis), 'YES');\n  });\n}"
                  },
                  "cancerGrowthPathology" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerGrowthPathology",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerGrowthDiagnosis), 'YES');\n  });\n}"
                  },
                  "cancerGrowthStageGrade" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerGrowthStageGrade",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerGrowthDiagnosis), 'YES');\n  });\n}"
                  },
                  "cancerGrowthDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerGrowthDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerGrowthDiagnosis), 'YES');\n  });\n}"
                  },
                  "cancerGrowthDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerGrowthDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerGrowthDiagnosis), 'YES');\n  });\n}"
                  },
                  "cancerGrowthDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerGrowthDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerGrowthDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cancerGrowthPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerGrowthPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerGrowthDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerGrowthDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "cancerGrowthDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerGrowthDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cancerGrowthDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cancerGrowthPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "cancerOtherDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerOtherDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cancerOtherDiagnosis2" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerOtherDiagnosis2",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.greaterThan(pmrl.length(parent.cancerDiagnosisOtherGroup), Big('1'))) {\n      valid = 'YES';\n    } else {\n      valid = 'NO';\n    }\n    return valid;\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cancerDiagnosisOtherGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerDiagnosisOtherGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.cancerDiagnosisOtherGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.cancerDiagnosisOtherGroup), Big('2'));\n  });\n}" ],
                    "objectFields" : {
                      "cancerOtherDiagnosisDetails" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerDiagnosisOtherGroup.cancerOtherDiagnosisDetails",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerOtherDiagnosis), 'YES');\n  });\n}"
                      },
                      "cancerOtherTypeLocation" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerDiagnosisOtherGroup.cancerOtherTypeLocation",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerOtherDiagnosis), 'YES');\n  });\n}"
                      },
                      "cancerOtherPathology" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerDiagnosisOtherGroup.cancerOtherPathology",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerOtherDiagnosis), 'YES');\n  });\n}"
                      },
                      "cancerOtherStageGrade" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerDiagnosisOtherGroup.cancerOtherStageGrade",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerOtherDiagnosis), 'YES');\n  });\n}"
                      },
                      "cancerOtherDateOfDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerDiagnosisOtherGroup.cancerOtherDateOfDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerOtherDiagnosis), 'YES');\n  });\n}"
                      },
                      "cancerOtherDateLastSeenByPhysician" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerDiagnosisOtherGroup.cancerOtherDateLastSeenByPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerOtherDiagnosis), 'YES');\n  });\n}"
                      },
                      "cancerOtherDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerDiagnosisOtherGroup.cancerOtherDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerOtherDiagnosis), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "cancerOtherPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerDiagnosisOtherGroup.cancerOtherPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerOtherDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerOtherDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "cancerOtherDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerDiagnosisOtherGroup.cancerOtherDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cancerOtherDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cancerOtherPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "2"
                  },
                  "cancerMetastasisOrSpread" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerMetastasisOrSpread",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cancerMetastasisOrSpreadDetails" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerMetastasisOrSpreadDetails",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerMetastasisOrSpread), 'YES');\n  });\n}"
                  },
                  "cancerTreatmentTypeMedication" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerTreatmentTypeMedication",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cancerMedicationGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerMedicationGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.cancerMedicationGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.cancerMedicationGroup), Big('5'));\n  });\n}" ],
                    "objectFields" : {
                      "cancerMedicationDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerMedicationGroup.cancerMedicationDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeMedication), 'YES');\n  });\n}"
                      },
                      "cancerMedicationNameOfMedication" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerMedicationGroup.cancerMedicationNameOfMedication",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeMedication), 'YES');\n  });\n}"
                      },
                      "cancerMedicationDosageFrequency" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerMedicationGroup.cancerMedicationDosageFrequency",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeMedication), 'YES');\n  });\n}"
                      },
                      "cancerMedicationDateFirstTaken" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerMedicationGroup.cancerMedicationDateFirstTaken",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeMedication), 'YES');\n  });\n}"
                      },
                      "cancerMedicationDateLastTaken" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerMedicationGroup.cancerMedicationDateLastTaken",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeMedication), 'YES');\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "5"
                  },
                  "cancerTreatmentTypeChemotherapy" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerTreatmentTypeChemotherapy",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cancerChemotherapyGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerChemotherapyGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.cancerChemotherapyGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.cancerChemotherapyGroup), Big('5'));\n  });\n}" ],
                    "objectFields" : {
                      "cancerChemotherapyDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerChemotherapyGroup.cancerChemotherapyDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeChemotherapy), 'YES');\n  });\n}"
                      },
                      "cancerChemotherapyNameOfMedication" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerChemotherapyGroup.cancerChemotherapyNameOfMedication",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeChemotherapy), 'YES');\n  });\n}"
                      },
                      "cancerChemotherapyDosageFrequency" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerChemotherapyGroup.cancerChemotherapyDosageFrequency",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeChemotherapy), 'YES');\n  });\n}"
                      },
                      "cancerChemotherapyDateFirstTaken" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerChemotherapyGroup.cancerChemotherapyDateFirstTaken",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeChemotherapy), 'YES');\n  });\n}"
                      },
                      "cancerChemotherapyDateLastTaken" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerChemotherapyGroup.cancerChemotherapyDateLastTaken",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeChemotherapy), 'YES');\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "5"
                  },
                  "cancerTreatmentTypeRadiation" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerTreatmentTypeRadiation",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cancerRadiationGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerRadiationGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.cancerRadiationGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.cancerRadiationGroup), Big('5'));\n  });\n}" ],
                    "objectFields" : {
                      "cancerRadiationDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerRadiationGroup.cancerRadiationDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeRadiation), 'YES');\n  });\n}"
                      },
                      "cancerRadiationDateStarted" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerRadiationGroup.cancerRadiationDateStarted",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeRadiation), 'YES');\n  });\n}"
                      },
                      "cancerRadiationDateEnded" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerRadiationGroup.cancerRadiationDateEnded",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeRadiation), 'YES');\n  });\n}"
                      },
                      "cancerRadiationFrequency" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerRadiationGroup.cancerRadiationFrequency",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeRadiation), 'YES');\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "5"
                  },
                  "cancerTreatmentTypeSurgery" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerTreatmentTypeSurgery",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cancerSurgeryGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerSurgeryGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.cancerSurgeryGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.cancerSurgeryGroup), Big('5'));\n  });\n}" ],
                    "objectFields" : {
                      "cancerSurgeryDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerSurgeryGroup.cancerSurgeryDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeSurgery), 'YES');\n  });\n}"
                      },
                      "cancerSurgeryType" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerSurgeryGroup.cancerSurgeryType",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeSurgery), 'YES');\n  });\n}"
                      },
                      "cancerSurgeryDate" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerSurgeryGroup.cancerSurgeryDate",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeSurgery), 'YES');\n  });\n}"
                      },
                      "cancerSurgeryResults" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerSurgeryGroup.cancerSurgeryResults",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeSurgery), 'YES');\n  });\n}"
                      },
                      "cancerSurgeryDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerSurgeryGroup.cancerSurgeryDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeSurgery), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "cancerSurgeryPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerSurgeryGroup.cancerSurgeryPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeSurgery), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerSurgeryDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "cancerSurgeryDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerSurgeryGroup.cancerSurgeryDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cancerSurgeryDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cancerSurgeryPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "5"
                  },
                  "cancerTreatmentTypeOther" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerTreatmentTypeOther",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cancerOtherTreatmentTypeGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerOtherTreatmentTypeGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.cancerOtherTreatmentTypeGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.cancerOtherTreatmentTypeGroup), Big('4'));\n  });\n}" ],
                    "objectFields" : {
                      "cancerOtherDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerOtherTreatmentTypeGroup.cancerOtherDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeOther), 'YES');\n  });\n}"
                      },
                      "cancerOtherTypeOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerOtherTreatmentTypeGroup.cancerOtherTypeOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeOther), 'YES');\n  });\n}"
                      },
                      "cancerOtherDateStarted" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerOtherTreatmentTypeGroup.cancerOtherDateStarted",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeOther), 'YES');\n  });\n}"
                      },
                      "cancerOtherDateEnded" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerOtherTreatmentTypeGroup.cancerOtherDateEnded",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeOther), 'YES');\n  });\n}"
                      },
                      "cancerOtherDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerOtherTreatmentTypeGroup.cancerOtherDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeOther), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "cancerOtherPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerOtherTreatmentTypeGroup.cancerOtherPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeOther), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerOtherDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "cancerOtherDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerOtherTreatmentTypeGroup.cancerOtherDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cancerOtherDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cancerOtherPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "4"
                  },
                  "cancerAfterTreatmentOrSurgeryEnded" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerAfterTreatmentOrSurgeryEnded",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cancerAfterTreatmentGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerAfterTreatmentGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.cancerAfterTreatmentGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.cancerAfterTreatmentGroup), Big('5'));\n  });\n}" ],
                    "objectFields" : {
                      "cancerAfterEndedDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerAfterTreatmentGroup.cancerAfterEndedDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerAfterTreatmentOrSurgeryEnded), 'YES');\n  });\n}"
                      },
                      "cancerAfterEndedTypeOfFollowUp" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerAfterTreatmentGroup.cancerAfterEndedTypeOfFollowUp",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerAfterTreatmentOrSurgeryEnded), 'YES');\n  });\n}"
                      },
                      "cancerAfterEndedDate" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerAfterTreatmentGroup.cancerAfterEndedDate",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerAfterTreatmentOrSurgeryEnded), 'YES');\n  });\n}"
                      },
                      "cancerAfterEndedResults" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerAfterTreatmentGroup.cancerAfterEndedResults",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerAfterTreatmentOrSurgeryEnded), 'YES');\n  });\n}"
                      },
                      "cancerAfterEndedDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerAfterTreatmentGroup.cancerAfterEndedDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerAfterTreatmentOrSurgeryEnded), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "cancerAfterEndedPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerAfterTreatmentGroup.cancerAfterEndedPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerAfterTreatmentOrSurgeryEnded), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerAfterEndedDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "cancerAfterEndedDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerAfterTreatmentGroup.cancerAfterEndedDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cancerAfterEndedDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cancerAfterEndedPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "5"
                  },
                  "cancerRecurrenceOfCancerOrTumor" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerRecurrenceOfCancerOrTumor",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cancerRecurrenceGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerRecurrenceGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.cancerRecurrenceGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.cancerRecurrenceGroup), Big('5'));\n  });\n}" ],
                    "objectFields" : {
                      "cancerRecurrenceOfCancerDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerRecurrenceGroup.cancerRecurrenceOfCancerDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerRecurrenceOfCancerOrTumor), 'YES');\n  });\n}"
                      },
                      "cancerRecurrenceOfCancerTypeOfFollowUp" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerRecurrenceGroup.cancerRecurrenceOfCancerTypeOfFollowUp",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerRecurrenceOfCancerOrTumor), 'YES');\n  });\n}"
                      },
                      "cancerRecurrenceOfCancerDate" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerRecurrenceGroup.cancerRecurrenceOfCancerDate",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerRecurrenceOfCancerOrTumor), 'YES');\n  });\n}"
                      },
                      "cancerRecurrenceOfCancerTreatments" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerRecurrenceGroup.cancerRecurrenceOfCancerTreatments",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerRecurrenceOfCancerOrTumor), 'YES');\n  });\n}"
                      },
                      "cancerRecurrenceOfCancerDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerRecurrenceGroup.cancerRecurrenceOfCancerDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerRecurrenceOfCancerOrTumor), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "cancerRecurrenceOfCancerPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerRecurrenceGroup.cancerRecurrenceOfCancerPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerRecurrenceOfCancerOrTumor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerRecurrenceOfCancerDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "cancerRecurrenceOfCancerDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerRecurrenceGroup.cancerRecurrenceOfCancerDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cancerRecurrenceOfCancerDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cancerRecurrenceOfCancerPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "5"
                  },
                  "cancerHospitalizedForCondition" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerHospitalizedForCondition",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cancerHospitalizedForConditionGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerHospitalizedForConditionGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.cancerHospitalizedForConditionGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.cancerHospitalizedForConditionGroup), Big('5'));\n  });\n}" ],
                    "objectFields" : {
                      "cancerHospitalizedForConditionDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerHospitalizedForConditionGroup.cancerHospitalizedForConditionDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerHospitalizedForCondition), 'YES');\n  });\n}"
                      },
                      "cancerHospitalizedForConditionDateOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerHospitalizedForConditionGroup.cancerHospitalizedForConditionDateOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerHospitalizedForCondition), 'YES');\n  });\n}"
                      },
                      "cancerHospitalizedForConditionDurationOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerHospitalizedForConditionGroup.cancerHospitalizedForConditionDurationOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerHospitalizedForCondition), 'YES');\n  });\n}"
                      },
                      "cancerHospitalizedForConditionTypeOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerHospitalizedForConditionGroup.cancerHospitalizedForConditionTypeOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerHospitalizedForCondition), 'YES');\n  });\n}"
                      },
                      "cancerHospitalizedForConditionDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerHospitalizedForConditionGroup.cancerHospitalizedForConditionDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerHospitalizedForCondition), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "cancerHospitalizedForConditionPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerHospitalizedForConditionGroup.cancerHospitalizedForConditionPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerHospitalizedForCondition), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerHospitalizedForConditionDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "cancerHospitalizedForConditionDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.cancerHospitalizedForConditionGroup.cancerHospitalizedForConditionDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.cancerHospitalizedForConditionDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.cancerHospitalizedForConditionPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "5"
                  },
                  "cancerMissedWorkForThisCondition" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerMissedWorkForThisCondition",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "cancerMissedWorkForThisConditionDetails" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerMissedWorkForThisConditionDetails",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerMissedWorkForThisCondition), 'YES');\n  });\n}"
                  },
                  "cancerAdditionalInformation" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.cancerAdditionalInformation",
                    "validationRules" : [ ],
                    "required" : "false"
                  },
                  "emotionalPsychologicalQuestion" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.emotionalPsychologicalQuestion",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && ((!pmrl.isDefined(parent.mentalDepressionOrDepressiveDisordersDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.mentalDepressionOrDepressiveDisordersDiagnosis), 'NO')) && (!pmrl.isDefined(parent.mentalAnxietyOrAnxietyDisordersDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.mentalAnxietyOrAnxietyDisordersDiagnosis), 'NO')) && (!pmrl.isDefined(parent.mentalAdjustmentDisorderDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.mentalAdjustmentDisorderDiagnosis), 'NO')) && (!pmrl.isDefined(parent.mentalNervousnessOrStressDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.mentalNervousnessOrStressDiagnosis), 'NO')) && (!pmrl.isDefined(parent.mentalObsessiveCompulsiveDisorderDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.mentalObsessiveCompulsiveDisorderDiagnosis), 'NO')) && (!pmrl.isDefined(parent.mentalAttentionDeficitDisorderADDDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.mentalAttentionDeficitDisorderADDDiagnosis), 'NO')) && (!pmrl.isDefined(parent.mentalPostTraumaticStressDisorderPTSDDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.mentalPostTraumaticStressDisorderPTSDDiagnosis), 'NO')) && (!pmrl.isDefined(parent.mentalPersonalityDisorderDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.mentalPersonalityDisorderDiagnosis), 'NO')) && (!pmrl.isDefined(parent.mentalManicDepressiveOrBipolarDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.mentalManicDepressiveOrBipolarDiagnosis), 'NO')) && (!pmrl.isDefined(parent.mentalSchizophreniaDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.mentalSchizophreniaDiagnosis), 'NO')) && (!pmrl.isDefined(parent.mentalOtherDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.mentalOtherDiagnosis), 'NO')))) {\n      valid = 'Please select at least one diagnosis below';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalDepressionOrDepressiveDisordersDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalDepressionOrDepressiveDisordersDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalDepressionOrDepressiveDisordersDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalDepressionOrDepressiveDisordersDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalDepressionOrDepressiveDisordersDiagnosis), 'YES');\n  });\n}"
                  },
                  "mentalDepressionOrDepressiveDisordersDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalDepressionOrDepressiveDisordersDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalDepressionOrDepressiveDisordersDiagnosis), 'YES');\n  });\n}"
                  },
                  "mentalDepressionOrDepressiveDisordersDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalDepressionOrDepressiveDisordersDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalDepressionOrDepressiveDisordersDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalDepressionOrDepressiveDisordersPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalDepressionOrDepressiveDisordersPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalDepressionOrDepressiveDisordersDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalDepressionOrDepressiveDisordersDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "mentalDepressionOrDepressiveDisordersDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalDepressionOrDepressiveDisordersDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.mentalDepressionOrDepressiveDisordersDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.mentalDepressionOrDepressiveDisordersPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "mentalAnxietyOrAnxietyDisordersDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalAnxietyOrAnxietyDisordersDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalAnxietyOrAnxietyDisordersDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalAnxietyOrAnxietyDisordersDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAnxietyOrAnxietyDisordersDiagnosis), 'YES');\n  });\n}"
                  },
                  "mentalAnxietyOrAnxietyDisordersDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalAnxietyOrAnxietyDisordersDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAnxietyOrAnxietyDisordersDiagnosis), 'YES');\n  });\n}"
                  },
                  "mentalAnxietyOrAnxietyDisordersDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalAnxietyOrAnxietyDisordersDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAnxietyOrAnxietyDisordersDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalAnxietyOrAnxietyDisordersPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalAnxietyOrAnxietyDisordersPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAnxietyOrAnxietyDisordersDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAnxietyOrAnxietyDisordersDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "mentalAnxietyOrAnxietyDisordersDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalAnxietyOrAnxietyDisordersDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.mentalAnxietyOrAnxietyDisordersDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.mentalAnxietyOrAnxietyDisordersPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "mentalAdjustmentDisorderDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalAdjustmentDisorderDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalAdjustmentDisorderDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalAdjustmentDisorderDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAdjustmentDisorderDiagnosis), 'YES');\n  });\n}"
                  },
                  "mentalAdjustmentDisorderDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalAdjustmentDisorderDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAdjustmentDisorderDiagnosis), 'YES');\n  });\n}"
                  },
                  "mentalAdjustmentDisorderDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalAdjustmentDisorderDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAdjustmentDisorderDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalAdjustmentDisorderPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalAdjustmentDisorderPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAdjustmentDisorderDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAdjustmentDisorderDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "mentalAdjustmentDisorderDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalAdjustmentDisorderDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.mentalAdjustmentDisorderDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.mentalAdjustmentDisorderPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "mentalNervousnessOrStressDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalNervousnessOrStressDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalNervousnessOrStressDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalNervousnessOrStressDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalNervousnessOrStressDiagnosis), 'YES');\n  });\n}"
                  },
                  "mentalNervousnessOrStressDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalNervousnessOrStressDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalNervousnessOrStressDiagnosis), 'YES');\n  });\n}"
                  },
                  "mentalNervousnessOrStressDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalNervousnessOrStressDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalNervousnessOrStressDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalNervousnessOrStressPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalNervousnessOrStressPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalNervousnessOrStressDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalNervousnessOrStressDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "mentalNervousnessOrStressDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalNervousnessOrStressDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.mentalNervousnessOrStressDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.mentalNervousnessOrStressPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "mentalObsessiveCompulsiveDisorderDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalObsessiveCompulsiveDisorderDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalObsessiveCompulsiveDisorderDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalObsessiveCompulsiveDisorderDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalObsessiveCompulsiveDisorderDiagnosis), 'YES');\n  });\n}"
                  },
                  "mentalObsessiveCompulsiveDisorderDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalObsessiveCompulsiveDisorderDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalObsessiveCompulsiveDisorderDiagnosis), 'YES');\n  });\n}"
                  },
                  "mentalObsessiveCompulsiveDisorderDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalObsessiveCompulsiveDisorderDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalObsessiveCompulsiveDisorderDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalObsessiveCompulsiveDisorderPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalObsessiveCompulsiveDisorderPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalObsessiveCompulsiveDisorderDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalObsessiveCompulsiveDisorderDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "mentalObsessiveCompulsiveDisorderDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalObsessiveCompulsiveDisorderDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.mentalObsessiveCompulsiveDisorderDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.mentalObsessiveCompulsiveDisorderPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "mentalAttentionDeficitDisorderADDDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalAttentionDeficitDisorderADDDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalAttentionDeficitDisorderADDDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalAttentionDeficitDisorderADDDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAttentionDeficitDisorderADDDiagnosis), 'YES');\n  });\n}"
                  },
                  "mentalAttentionDeficitDisorderADDDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalAttentionDeficitDisorderADDDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAttentionDeficitDisorderADDDiagnosis), 'YES');\n  });\n}"
                  },
                  "mentalAttentionDeficitDisorderADDDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalAttentionDeficitDisorderADDDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAttentionDeficitDisorderADDDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalAttentionDeficitDisorderADDPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalAttentionDeficitDisorderADDPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAttentionDeficitDisorderADDDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAttentionDeficitDisorderADDDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "mentalAttentionDeficitDisorderADDDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalAttentionDeficitDisorderADDDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.mentalAttentionDeficitDisorderADDDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.mentalAttentionDeficitDisorderADDPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "mentalPostTraumaticStressDisorderPTSDDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalPostTraumaticStressDisorderPTSDDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalPostTraumaticStressDisorderPTSDDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalPostTraumaticStressDisorderPTSDDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalPostTraumaticStressDisorderPTSDDiagnosis), 'YES');\n  });\n}"
                  },
                  "mentalPostTraumaticStressDisorderPTSDDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalPostTraumaticStressDisorderPTSDDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalPostTraumaticStressDisorderPTSDDiagnosis), 'YES');\n  });\n}"
                  },
                  "mentalPostTraumaticStressDisorderPTSDDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalPostTraumaticStressDisorderPTSDDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalPostTraumaticStressDisorderPTSDDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalPostTraumaticStressDisorderPTSDPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalPostTraumaticStressDisorderPTSDPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalPostTraumaticStressDisorderPTSDDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalPostTraumaticStressDisorderPTSDDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "mentalPostTraumaticStressDisorderPTSDDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalPostTraumaticStressDisorderPTSDDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.mentalPostTraumaticStressDisorderPTSDDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.mentalPostTraumaticStressDisorderPTSDPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "mentalPersonalityDisorderDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalPersonalityDisorderDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalPersonalityDisorderDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalPersonalityDisorderDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalPersonalityDisorderDiagnosis), 'YES');\n  });\n}"
                  },
                  "mentalPersonalityDisorderDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalPersonalityDisorderDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalPersonalityDisorderDiagnosis), 'YES');\n  });\n}"
                  },
                  "mentalPersonalityDisorderDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalPersonalityDisorderDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalPersonalityDisorderDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalPersonalityDisorderPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalPersonalityDisorderPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalPersonalityDisorderDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalPersonalityDisorderDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "mentalPersonalityDisorderDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalPersonalityDisorderDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.mentalPersonalityDisorderDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.mentalPersonalityDisorderPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "mentalManicDepressiveOrBipolarDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalManicDepressiveOrBipolarDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalManicDepressiveOrBipolarDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalManicDepressiveOrBipolarDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalManicDepressiveOrBipolarDiagnosis), 'YES');\n  });\n}"
                  },
                  "mentalManicDepressiveOrBipolarDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalManicDepressiveOrBipolarDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalManicDepressiveOrBipolarDiagnosis), 'YES');\n  });\n}"
                  },
                  "mentalManicDepressiveOrBipolarDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalManicDepressiveOrBipolarDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalManicDepressiveOrBipolarDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalManicDepressiveOrBipolarPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalManicDepressiveOrBipolarPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalManicDepressiveOrBipolarDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalManicDepressiveOrBipolarDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "mentalManicDepressiveOrBipolarDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalManicDepressiveOrBipolarDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.mentalManicDepressiveOrBipolarDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.mentalManicDepressiveOrBipolarPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "mentalSchizophreniaDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalSchizophreniaDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalSchizophreniaDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalSchizophreniaDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalSchizophreniaDiagnosis), 'YES');\n  });\n}"
                  },
                  "mentalSchizophreniaDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalSchizophreniaDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalSchizophreniaDiagnosis), 'YES');\n  });\n}"
                  },
                  "mentalSchizophreniaDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalSchizophreniaDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalSchizophreniaDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalSchizophreniaPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalSchizophreniaPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalSchizophreniaDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalSchizophreniaDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "mentalSchizophreniaDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalSchizophreniaDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.mentalSchizophreniaDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.mentalSchizophreniaPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "mentalOtherDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalOtherDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalOtherDiagnosis2" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalOtherDiagnosis2",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.greaterThan(pmrl.length(parent.mentalDiagnosisOtherGroup), Big('1'))) {\n      valid = 'YES';\n    } else {\n      valid = 'NO';\n    }\n    return valid;\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalDiagnosisOtherGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalDiagnosisOtherGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.mentalDiagnosisOtherGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.mentalDiagnosisOtherGroup), Big('2'));\n  });\n}" ],
                    "objectFields" : {
                      "mentalOtherDiagnosisDetails" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalDiagnosisOtherGroup.mentalOtherDiagnosisDetails",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalOtherDiagnosis), 'YES');\n  });\n}"
                      },
                      "mentalOtherDateOfDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalDiagnosisOtherGroup.mentalOtherDateOfDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalOtherDiagnosis), 'YES');\n  });\n}"
                      },
                      "mentalOtherDateLastSeenByPhysician" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalDiagnosisOtherGroup.mentalOtherDateLastSeenByPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalOtherDiagnosis), 'YES');\n  });\n}"
                      },
                      "mentalOtherDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalDiagnosisOtherGroup.mentalOtherDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalOtherDiagnosis), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "mentalOtherPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalDiagnosisOtherGroup.mentalOtherPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalOtherDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalOtherDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "mentalOtherDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalDiagnosisOtherGroup.mentalOtherDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.mentalOtherDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.mentalOtherPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "2"
                  },
                  "mentalTreatmentTypeMedication" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeMedication",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalTreatmentTypeMedicationGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeMedicationGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.mentalTreatmentTypeMedicationGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.mentalTreatmentTypeMedicationGroup), Big('5'));\n  });\n}" ],
                    "objectFields" : {
                      "mentalTreatmentTypeMedicationDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeMedicationGroup.mentalTreatmentTypeMedicationDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeMedication), 'YES');\n  });\n}"
                      },
                      "mentalTreatmentTypeMedicationNameOfMedication" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeMedicationGroup.mentalTreatmentTypeMedicationNameOfMedication",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeMedication), 'YES');\n  });\n}"
                      },
                      "mentalTreatmentTypeMedicationDosageFrequency" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeMedicationGroup.mentalTreatmentTypeMedicationDosageFrequency",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeMedication), 'YES');\n  });\n}"
                      },
                      "mentalTreatmentTypeMedicationDateFirstTaken" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeMedicationGroup.mentalTreatmentTypeMedicationDateFirstTaken",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeMedication), 'YES');\n  });\n}"
                      },
                      "mentalTreatmentTypeMedicationDateLastTaken" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeMedicationGroup.mentalTreatmentTypeMedicationDateLastTaken",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeMedication), 'YES');\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "5"
                  },
                  "mentalTreatmentTypeCounselingOrTherapy" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeCounselingOrTherapy",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalTreatmentTypeCounselingOrTherapyGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeCounselingOrTherapyGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.mentalTreatmentTypeCounselingOrTherapyGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.mentalTreatmentTypeCounselingOrTherapyGroup), Big('3'));\n  });\n}" ],
                    "objectFields" : {
                      "mentalTreatmentTypeCounselingOrTherapyDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeCounselingOrTherapyGroup.mentalTreatmentTypeCounselingOrTherapyDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeCounselingOrTherapy), 'YES');\n  });\n}"
                      },
                      "mentalTreatmentTypeCounselingOrTherapyTypeOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeCounselingOrTherapyGroup.mentalTreatmentTypeCounselingOrTherapyTypeOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeCounselingOrTherapy), 'YES');\n  });\n}"
                      },
                      "mentalTreatmentTypeCounselingOrTherapyDateStarted" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeCounselingOrTherapyGroup.mentalTreatmentTypeCounselingOrTherapyDateStarted",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeCounselingOrTherapy), 'YES');\n  });\n}"
                      },
                      "mentalTreatmentTypeCounselingOrTherapyDateLastSeen" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeCounselingOrTherapyGroup.mentalTreatmentTypeCounselingOrTherapyDateLastSeen",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeCounselingOrTherapy), 'YES');\n  });\n}"
                      },
                      "mentalTreatmentTypeCounselingOrTherapyDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeCounselingOrTherapyGroup.mentalTreatmentTypeCounselingOrTherapyDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeCounselingOrTherapy), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "mentalTreatmentTypeCounselingOrTherapyPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeCounselingOrTherapyGroup.mentalTreatmentTypeCounselingOrTherapyPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeCounselingOrTherapy), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalTreatmentTypeCounselingOrTherapyDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "mentalTreatmentTypeCounselingOrTherapyDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeCounselingOrTherapyGroup.mentalTreatmentTypeCounselingOrTherapyDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.mentalTreatmentTypeCounselingOrTherapyDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.mentalTreatmentTypeCounselingOrTherapyPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "3"
                  },
                  "mentalTreatmentTypeHospitalizationOrOutPatient" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeHospitalizationOrOutPatient",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalTreatmentTypeHospitalizationOrOutPatientGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeHospitalizationOrOutPatientGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.mentalTreatmentTypeHospitalizationOrOutPatientGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.mentalTreatmentTypeHospitalizationOrOutPatientGroup), Big('3'));\n  });\n}" ],
                    "objectFields" : {
                      "mentalTreatmentTypeHospitalizationOrOutPatientDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeHospitalizationOrOutPatientGroup.mentalTreatmentTypeHospitalizationOrOutPatientDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}"
                      },
                      "mentalTreatmentTypeHospitalizationOrOutPatientTypeOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeHospitalizationOrOutPatientGroup.mentalTreatmentTypeHospitalizationOrOutPatientTypeOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}"
                      },
                      "mentalTreatmentTypeHospitalizationOrOutPatientDate" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeHospitalizationOrOutPatientGroup.mentalTreatmentTypeHospitalizationOrOutPatientDate",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}"
                      },
                      "mentalTreatmentTypeHospitalizationOrOutPatientDurationOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeHospitalizationOrOutPatientGroup.mentalTreatmentTypeHospitalizationOrOutPatientDurationOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}"
                      },
                      "mentalTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeHospitalizationOrOutPatientGroup.mentalTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "mentalTreatmentTypeHospitalizationOrOutPatientPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeHospitalizationOrOutPatientGroup.mentalTreatmentTypeHospitalizationOrOutPatientPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeHospitalizationOrOutPatient), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "mentalTreatmentTypeHospitalizationOrOutPatientDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeHospitalizationOrOutPatientGroup.mentalTreatmentTypeHospitalizationOrOutPatientDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.mentalTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.mentalTreatmentTypeHospitalizationOrOutPatientPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "3"
                  },
                  "mentalSuicidalThoughtsOrAttempts" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalSuicidalThoughtsOrAttempts",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalSuicidalThoughtsOrAttemptsGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalSuicidalThoughtsOrAttemptsGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.mentalSuicidalThoughtsOrAttemptsGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.mentalSuicidalThoughtsOrAttemptsGroup), Big('3'));\n  });\n}" ],
                    "objectFields" : {
                      "mentalSuicidalThoughtsOrAttemptsTypeOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalSuicidalThoughtsOrAttemptsGroup.mentalSuicidalThoughtsOrAttemptsTypeOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalSuicidalThoughtsOrAttempts), 'YES');\n  });\n}"
                      },
                      "mentalSuicidalThoughtsOrAttemptsDate" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalSuicidalThoughtsOrAttemptsGroup.mentalSuicidalThoughtsOrAttemptsDate",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalSuicidalThoughtsOrAttempts), 'YES');\n  });\n}"
                      },
                      "mentalSuicidalThoughtsOrAttemptsDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalSuicidalThoughtsOrAttemptsGroup.mentalSuicidalThoughtsOrAttemptsDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalSuicidalThoughtsOrAttempts), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "mentalSuicidalThoughtsOrAttemptsPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalSuicidalThoughtsOrAttemptsGroup.mentalSuicidalThoughtsOrAttemptsPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalSuicidalThoughtsOrAttempts), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalSuicidalThoughtsOrAttemptsDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "mentalSuicidalThoughtsOrAttemptsDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.mentalSuicidalThoughtsOrAttemptsGroup.mentalSuicidalThoughtsOrAttemptsDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.mentalSuicidalThoughtsOrAttemptsDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.mentalSuicidalThoughtsOrAttemptsPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "3"
                  },
                  "mentalMissedWorkForCondition" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalMissedWorkForCondition",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "mentalMissedWorkForConditionDetails" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalMissedWorkForConditionDetails",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalMissedWorkForCondition), 'YES');\n  });\n}"
                  },
                  "mentalAdditionalInformationOrComments" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.mentalAdditionalInformationOrComments",
                    "validationRules" : [ ],
                    "required" : "false"
                  },
                  "brainNervesQuestion" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainNervesQuestion",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && ((!pmrl.isDefined(parent.brainMigrainesDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.brainMigrainesDiagnosis), 'NO')) && (!pmrl.isDefined(parent.brainHeadachesDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.brainHeadachesDiagnosis), 'NO')) && (!pmrl.isDefined(parent.brainConcussionDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.brainConcussionDiagnosis), 'NO')) && (!pmrl.isDefined(parent.brainMemoryLossDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.brainMemoryLossDiagnosis), 'NO')) && (!pmrl.isDefined(parent.brainDizzinessDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.brainDizzinessDiagnosis), 'NO')) && (!pmrl.isDefined(parent.brainFaintingDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.brainFaintingDiagnosis), 'NO')) && (!pmrl.isDefined(parent.brainSeizuresDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.brainSeizuresDiagnosis), 'NO')) && (!pmrl.isDefined(parent.brainEpilepsyDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.brainEpilepsyDiagnosis), 'NO')) && (!pmrl.isDefined(parent.brainMultipleSclerosisDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.brainMultipleSclerosisDiagnosis), 'NO')) && (!pmrl.isDefined(parent.brainCarpalTunnelDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.brainCarpalTunnelDiagnosis), 'NO')) && (!pmrl.isDefined(parent.brainNeuropathyDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.brainNeuropathyDiagnosis), 'NO')) && (!pmrl.isDefined(parent.brainOtherDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.brainOtherDiagnosis), 'NO')))) {\n      valid = 'Please select at least one diagnosis below';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainMigrainesDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainMigrainesDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainMigrainesDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainMigrainesDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMigrainesDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainMigrainesDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainMigrainesDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMigrainesDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainMigrainesDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainMigrainesDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMigrainesDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainMigrainesPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainMigrainesPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMigrainesDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMigrainesDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "brainMigrainesDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainMigrainesDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.brainMigrainesDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.brainMigrainesPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "brainHeadachesDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainHeadachesDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainHeadachesDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainHeadachesDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainHeadachesDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainHeadachesDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainHeadachesDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainHeadachesDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainHeadachesDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainHeadachesDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainHeadachesDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainHeadachesPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainHeadachesPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainHeadachesDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainHeadachesDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "brainHeadachesDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainHeadachesDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.brainHeadachesDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.brainHeadachesPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "brainConcussionDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainConcussionDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainConcussionDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainConcussionDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainConcussionDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainConcussionDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainConcussionDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainConcussionDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainConcussionDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainConcussionDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainConcussionDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainConcussionPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainConcussionPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainConcussionDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainConcussionDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "brainConcussionDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainConcussionDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.brainConcussionDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.brainConcussionPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "brainMemoryLossDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainMemoryLossDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainMemoryLossDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainMemoryLossDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMemoryLossDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainMemoryLossDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainMemoryLossDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMemoryLossDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainMemoryLossDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainMemoryLossDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMemoryLossDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainMemoryLossPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainMemoryLossPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMemoryLossDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMemoryLossDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "brainMemoryLossDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainMemoryLossDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.brainMemoryLossDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.brainMemoryLossPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "brainDizzinessDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainDizzinessDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainDizzinessDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainDizzinessDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainDizzinessDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainDizzinessDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainDizzinessDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainDizzinessDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainDizzinessDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainDizzinessDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainDizzinessDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainDizzinessPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainDizzinessPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainDizzinessDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainDizzinessDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "brainDizzinessDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainDizzinessDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.brainDizzinessDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.brainDizzinessPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "brainFaintingDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainFaintingDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainFaintingDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainFaintingDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainFaintingDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainFaintingDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainFaintingDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainFaintingDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainFaintingDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainFaintingDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainFaintingDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainFaintingPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainFaintingPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainFaintingDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainFaintingDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "brainFaintingDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainFaintingDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.brainFaintingDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.brainFaintingPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "brainSeizuresDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainSeizuresDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainSeizuresDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainSeizuresDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainSeizuresDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainSeizuresDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainSeizuresDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainSeizuresDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainSeizuresDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainSeizuresDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainSeizuresDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainSeizuresPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainSeizuresPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainSeizuresDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainSeizuresDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "brainSeizuresDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainSeizuresDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.brainSeizuresDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.brainSeizuresPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "brainEpilepsyDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainEpilepsyDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainEpilepsyDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainEpilepsyDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainEpilepsyDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainEpilepsyDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainEpilepsyDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainEpilepsyDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainEpilepsyDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainEpilepsyDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainEpilepsyDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainEpilepsyPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainEpilepsyPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainEpilepsyDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainEpilepsyDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "brainEpilepsyDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainEpilepsyDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.brainEpilepsyDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.brainEpilepsyPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "brainMultipleSclerosisDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainMultipleSclerosisDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainMultipleSclerosisDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainMultipleSclerosisDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMultipleSclerosisDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainMultipleSclerosisDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainMultipleSclerosisDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMultipleSclerosisDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainMultipleSclerosisDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainMultipleSclerosisDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMultipleSclerosisDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainMultipleSclerosisPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainMultipleSclerosisPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMultipleSclerosisDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMultipleSclerosisDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "brainMultipleSclerosisDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainMultipleSclerosisDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.brainMultipleSclerosisDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.brainMultipleSclerosisPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "brainCarpalTunnelDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainCarpalTunnelDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainCarpalTunnelLocations" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainCarpalTunnelLocations",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainCarpalTunnelDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainCarpalTunnelDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainCarpalTunnelDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainCarpalTunnelDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainCarpalTunnelDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainCarpalTunnelDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainCarpalTunnelDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainCarpalTunnelDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainCarpalTunnelDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainCarpalTunnelDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainCarpalTunnelPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainCarpalTunnelPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainCarpalTunnelDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainCarpalTunnelDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "brainCarpalTunnelDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainCarpalTunnelDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.brainCarpalTunnelDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.brainCarpalTunnelPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "brainNeuropathyDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainNeuropathyDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainNeuropathyLocations" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainNeuropathyLocations",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainNeuropathyDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainNeuropathyDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainNeuropathyDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainNeuropathyDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainNeuropathyDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainNeuropathyDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainNeuropathyDiagnosis), 'YES');\n  });\n}"
                  },
                  "brainNeuropathyDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainNeuropathyDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainNeuropathyDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainNeuropathyPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainNeuropathyPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainNeuropathyDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainNeuropathyDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "brainNeuropathyDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainNeuropathyDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.brainNeuropathyDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.brainNeuropathyPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "brainOtherDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainOtherDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainOtherDiagnosis2" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainOtherDiagnosis2",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.greaterThan(pmrl.length(parent.brainOtherDiagnosisGroup), Big('1'))) {\n      valid = 'YES';\n    } else {\n      valid = 'NO';\n    }\n    return valid;\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainOtherDiagnosisGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainOtherDiagnosisGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.brainOtherDiagnosisGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.brainOtherDiagnosisGroup), Big('2'));\n  });\n}" ],
                    "objectFields" : {
                      "brainOtherDiagnosisDetails" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainOtherDiagnosisGroup.brainOtherDiagnosisDetails",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainOtherDiagnosis), 'YES');\n  });\n}"
                      },
                      "brainOtherDateOfDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainOtherDiagnosisGroup.brainOtherDateOfDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainOtherDiagnosis), 'YES');\n  });\n}"
                      },
                      "brainOtherDateLastSeenByPhysician" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainOtherDiagnosisGroup.brainOtherDateLastSeenByPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainOtherDiagnosis), 'YES');\n  });\n}"
                      },
                      "brainOtherDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainOtherDiagnosisGroup.brainOtherDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainOtherDiagnosis), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "brainOtherPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainOtherDiagnosisGroup.brainOtherPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainOtherDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainOtherDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "brainOtherDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainOtherDiagnosisGroup.brainOtherDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.brainOtherDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.brainOtherPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "2"
                  },
                  "brainSeizureOrEpilepsyResponseGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainSeizureOrEpilepsyResponseGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.brainSeizureOrEpilepsyResponseGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.brainSeizureOrEpilepsyResponseGroup), Big('2'));\n  });\n}" ],
                    "objectFields" : {
                      "brainSeizureOrEpilepsyType" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainSeizureOrEpilepsyResponseGroup.brainSeizureOrEpilepsyType",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.parent.brainSeizuresDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.brainEpilepsyDiagnosis), 'YES'));\n  });\n}"
                      },
                      "brainSeizureOrEpilepsyDateOfLastAttack" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainSeizureOrEpilepsyResponseGroup.brainSeizureOrEpilepsyDateOfLastAttack",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.parent.brainSeizuresDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.brainEpilepsyDiagnosis), 'YES'));\n  });\n}"
                      },
                      "brainSeizureOrEpilepsyFrequencyOfAttacks" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainSeizureOrEpilepsyResponseGroup.brainSeizureOrEpilepsyFrequencyOfAttacks",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.parent.brainSeizuresDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.brainEpilepsyDiagnosis), 'YES'));\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "2"
                  },
                  "brainTreatmentTypeMedication" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainTreatmentTypeMedication",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainTreatmentTypeMedicationGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainTreatmentTypeMedicationGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.brainTreatmentTypeMedicationGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.brainTreatmentTypeMedicationGroup), Big('5'));\n  });\n}" ],
                    "objectFields" : {
                      "brainTreatmentTypeMedicationDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainTreatmentTypeMedicationGroup.brainTreatmentTypeMedicationDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainTreatmentTypeMedication), 'YES');\n  });\n}"
                      },
                      "brainTreatmentTypeMedicationNameOfMedication" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainTreatmentTypeMedicationGroup.brainTreatmentTypeMedicationNameOfMedication",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainTreatmentTypeMedication), 'YES');\n  });\n}"
                      },
                      "brainTreatmentTypeMedicationDosageFrequency" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainTreatmentTypeMedicationGroup.brainTreatmentTypeMedicationDosageFrequency",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainTreatmentTypeMedication), 'YES');\n  });\n}"
                      },
                      "brainTreatmentTypeMedicationDateFirstTaken" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainTreatmentTypeMedicationGroup.brainTreatmentTypeMedicationDateFirstTaken",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainTreatmentTypeMedication), 'YES');\n  });\n}"
                      },
                      "brainTreatmentTypeMedicationDateLastTaken" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainTreatmentTypeMedicationGroup.brainTreatmentTypeMedicationDateLastTaken",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainTreatmentTypeMedication), 'YES');\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "5"
                  },
                  "brainRecommendedTestOrSurgery" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainRecommendedTestOrSurgery",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainRecommendedTestOrSurgeryGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainRecommendedTestOrSurgeryGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.brainRecommendedTestOrSurgeryGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.brainRecommendedTestOrSurgeryGroup), Big('5'));\n  });\n}" ],
                    "objectFields" : {
                      "brainRecommendedTestOrSurgeryDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainRecommendedTestOrSurgeryGroup.brainRecommendedTestOrSurgeryDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainRecommendedTestOrSurgery), 'YES');\n  });\n}"
                      },
                      "brainRecommendedTestOrSurgeryTypeOfTestSurgery" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainRecommendedTestOrSurgeryGroup.brainRecommendedTestOrSurgeryTypeOfTestSurgery",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainRecommendedTestOrSurgery), 'YES');\n  });\n}"
                      },
                      "brainRecommendedTestOrSurgeryDate" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainRecommendedTestOrSurgeryGroup.brainRecommendedTestOrSurgeryDate",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainRecommendedTestOrSurgery), 'YES');\n  });\n}"
                      },
                      "brainRecommendedTestOrSurgeryResults" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainRecommendedTestOrSurgeryGroup.brainRecommendedTestOrSurgeryResults",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainRecommendedTestOrSurgery), 'YES');\n  });\n}"
                      },
                      "brainRecommendedTestOrSurgeryDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainRecommendedTestOrSurgeryGroup.brainRecommendedTestOrSurgeryDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainRecommendedTestOrSurgery), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "brainRecommendedTestOrSurgeryPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainRecommendedTestOrSurgeryGroup.brainRecommendedTestOrSurgeryPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainRecommendedTestOrSurgery), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainRecommendedTestOrSurgeryDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "brainRecommendedTestOrSurgeryDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainRecommendedTestOrSurgeryGroup.brainRecommendedTestOrSurgeryDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.brainRecommendedTestOrSurgeryDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.brainRecommendedTestOrSurgeryPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "5"
                  },
                  "brainTreatmentTypeHospitalizationOrOutPatient" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainTreatmentTypeHospitalizationOrOutPatient",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainTreatmentTypeHospitalizationOrOutPatientGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainTreatmentTypeHospitalizationOrOutPatientGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.brainTreatmentTypeHospitalizationOrOutPatientGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.brainTreatmentTypeHospitalizationOrOutPatientGroup), Big('5'));\n  });\n}" ],
                    "objectFields" : {
                      "brainTreatmentTypeHospitalizationOrOutPatientDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainTreatmentTypeHospitalizationOrOutPatientGroup.brainTreatmentTypeHospitalizationOrOutPatientDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}"
                      },
                      "brainTreatmentTypeHospitalizationOrOutPatientDateOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainTreatmentTypeHospitalizationOrOutPatientGroup.brainTreatmentTypeHospitalizationOrOutPatientDateOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}"
                      },
                      "brainTreatmentTypeHospitalizationOrOutPatientDurationOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainTreatmentTypeHospitalizationOrOutPatientGroup.brainTreatmentTypeHospitalizationOrOutPatientDurationOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}"
                      },
                      "brainTreatmentTypeHospitalizationOrOutPatientTypeOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainTreatmentTypeHospitalizationOrOutPatientGroup.brainTreatmentTypeHospitalizationOrOutPatientTypeOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}"
                      },
                      "brainTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainTreatmentTypeHospitalizationOrOutPatientGroup.brainTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "brainTreatmentTypeHospitalizationOrOutPatientPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainTreatmentTypeHospitalizationOrOutPatientGroup.brainTreatmentTypeHospitalizationOrOutPatientPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainTreatmentTypeHospitalizationOrOutPatient), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "brainTreatmentTypeHospitalizationOrOutPatientDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.brainTreatmentTypeHospitalizationOrOutPatientGroup.brainTreatmentTypeHospitalizationOrOutPatientDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.brainTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.brainTreatmentTypeHospitalizationOrOutPatientPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "5"
                  },
                  "brainMissedWorkForCondition" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainMissedWorkForCondition",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "brainMissedWorkForConditionDetails" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainMissedWorkForConditionDetails",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMissedWorkForCondition), 'YES');\n  });\n}"
                  },
                  "brainAdditionalInformationOrComments" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.brainAdditionalInformationOrComments",
                    "validationRules" : [ ],
                    "required" : "false"
                  },
                  "musculoskeletalChronicPainQuestion" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalChronicPainQuestion",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && ((!pmrl.isDefined(parent.musculoskeletalBackPainDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalBackPainDiagnosis), 'NO')) && (!pmrl.isDefined(parent.musculoskeletalNeckPainDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalNeckPainDiagnosis), 'NO')) && (!pmrl.isDefined(parent.musculoskeletalSpinalStenosisDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalSpinalStenosisDiagnosis), 'NO')) && (!pmrl.isDefined(parent.musculoskeletalHerniatedDiscDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalHerniatedDiscDiagnosis), 'NO')) && (!pmrl.isDefined(parent.musculoskeletalDegenerativeDiscDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalDegenerativeDiscDiagnosis), 'NO')) && (!pmrl.isDefined(parent.musculoskeletalArthritisDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalArthritisDiagnosis), 'NO')) && (!pmrl.isDefined(parent.musculoskeletalFibromyalgiaDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalFibromyalgiaDiagnosis), 'NO')) && (!pmrl.isDefined(parent.musculoskeletalLupusDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalLupusDiagnosis), 'NO')) && (!pmrl.isDefined(parent.musculoskeletalChronicPainDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainDiagnosis), 'NO')) && (!pmrl.isDefined(parent.musculoskeletalChiropracticCareDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChiropracticCareDiagnosis), 'NO')) && (!pmrl.isDefined(parent.musculoskeletalOtherDiagnosis) || pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalOtherDiagnosis), 'NO')) || (!pmrl.isDefined(parent.musculoskeletalTreatmentTypeMedicationInjections) || pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalTreatmentTypeMedicationInjections), 'NO')) && (!pmrl.isDefined(parent.musculoskeletalTreatmentTypePhysicalTherapy) || pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalTreatmentTypePhysicalTherapy), 'NO')) && (!pmrl.isDefined(parent.musculoskeletalTreatmentTypeSurgery) || pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalTreatmentTypeSurgery), 'NO')) && (!pmrl.isDefined(parent.musculoskeletalTreatmentTypeOther) || pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalTreatmentTypeOther), 'NO')))) {\n      valid = 'Please select at least one diagnosis and one treatment type below';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalBackPainDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalBackPainDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalBackPainDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalBackPainDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalBackPainDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalBackPainDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalBackPainDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalBackPainDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalBackPainDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalBackPainDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalBackPainDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalBackPainPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalBackPainPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalBackPainDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalBackPainDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "musculoskeletalBackPainDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalBackPainDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalBackPainDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.musculoskeletalBackPainPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "musculoskeletalNeckPainDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalNeckPainDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalNeckPainDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalNeckPainDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalNeckPainDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalNeckPainDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalNeckPainDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalNeckPainDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalNeckPainDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalNeckPainDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalNeckPainDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalNeckPainPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalNeckPainPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalNeckPainDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalNeckPainDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "musculoskeletalNeckPainDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalNeckPainDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalNeckPainDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.musculoskeletalNeckPainPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "musculoskeletalSpinalStenosisDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalSpinalStenosisDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalSpinalStenosisDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalSpinalStenosisDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalSpinalStenosisDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalSpinalStenosisDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalSpinalStenosisDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalSpinalStenosisDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalSpinalStenosisDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalSpinalStenosisDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalSpinalStenosisDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalSpinalStenosisPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalSpinalStenosisPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalSpinalStenosisDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalSpinalStenosisDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "musculoskeletalSpinalStenosisDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalSpinalStenosisDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalSpinalStenosisDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.musculoskeletalSpinalStenosisPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "musculoskeletalHerniatedDiscDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalHerniatedDiscDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalHerniatedDiscLocation" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalHerniatedDiscLocation",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalHerniatedDiscDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalHerniatedDiscDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalHerniatedDiscDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalHerniatedDiscDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalHerniatedDiscDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalHerniatedDiscDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalHerniatedDiscDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalHerniatedDiscDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalHerniatedDiscDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalHerniatedDiscDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalHerniatedDiscPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalHerniatedDiscPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalHerniatedDiscDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalHerniatedDiscDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "musculoskeletalHerniatedDiscDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalHerniatedDiscDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalHerniatedDiscDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.musculoskeletalHerniatedDiscPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "musculoskeletalDegenerativeDiscDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalDegenerativeDiscDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalDegenerativeDiscLocation" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalDegenerativeDiscLocation",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalDegenerativeDiscDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalDegenerativeDiscDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalDegenerativeDiscDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalDegenerativeDiscDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalDegenerativeDiscDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalDegenerativeDiscDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalDegenerativeDiscDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalDegenerativeDiscDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalDegenerativeDiscDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalDegenerativeDiscDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalDegenerativeDiscPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalDegenerativeDiscPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalHerniatedDiscDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalDegenerativeDiscDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "musculoskeletalDegenerativeDiscDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalDegenerativeDiscDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalDegenerativeDiscDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.musculoskeletalDegenerativeDiscPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "musculoskeletalArthritisDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalArthritisDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalArthritisType" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalArthritisType",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalArthritisDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalArthritisLocation" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalArthritisLocation",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalArthritisDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalArthritisDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalArthritisDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalArthritisDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalArthritisDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalArthritisDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalArthritisDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalArthritisDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalArthritisDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalArthritisDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalArthritisPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalArthritisPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalArthritisDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalArthritisDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "musculoskeletalArthritisDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalArthritisDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalArthritisDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.musculoskeletalArthritisPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "musculoskeletalFibromyalgiaDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalFibromyalgiaDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalFibromyalgiaDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalFibromyalgiaDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalFibromyalgiaDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalFibromyalgiaDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalFibromyalgiaDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalFibromyalgiaDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalFibromyalgiaDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalFibromyalgiaDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalFibromyalgiaDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalFibromyalgiaPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalFibromyalgiaPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalFibromyalgiaDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalFibromyalgiaDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "musculoskeletalFibromyalgiaDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalFibromyalgiaDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalFibromyalgiaDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.musculoskeletalFibromyalgiaPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "musculoskeletalLupusDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalLupusDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalLupusType" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalLupusType",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalLupusDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalLupusDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalLupusDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalLupusDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalLupusDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalLupusDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalLupusDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalLupusDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalLupusDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalLupusDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalLupusPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalLupusPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalLupusDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalLupusDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "musculoskeletalLupusDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalLupusDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalLupusDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.musculoskeletalLupusPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "musculoskeletalChronicPainDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalChronicPainDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalChronicPainType" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalChronicPainType",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalChronicPainLocation" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalChronicPainLocation",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalChronicPainDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalChronicPainDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalChronicPainDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalChronicPainDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalChronicPainDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalChronicPainDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalChronicPainPhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalChronicPainPhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "musculoskeletalChronicPainDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalChronicPainDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.musculoskeletalChronicPainPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "musculoskeletalChiropracticCareDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalChiropracticCareDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalChiropracticCareLocation" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalChiropracticCareLocation",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChiropracticCareDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalChiropracticCareDateOfDiagnosis" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalChiropracticCareDateOfDiagnosis",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChiropracticCareDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalChiropracticCareDateLastSeenByPhysician" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalChiropracticCareDateLastSeenByPhysician",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChiropracticCareDiagnosis), 'YES');\n  });\n}"
                  },
                  "musculoskeletalChiropracticCareDiagnosedByPCP" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalChiropracticCareDiagnosedByPCP",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChiropracticCareDiagnosis), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalChiropracticCarePhysicianNameAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalChiropracticCarePhysicianNameAddress",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChiropracticCareDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChiropracticCareDiagnosedByPCP), 'NO');\n  });\n}"
                  },
                  "musculoskeletalChiropracticCareDiagnosingPhysicianInfo" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalChiropracticCareDiagnosingPhysicianInfo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChiropracticCareDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.musculoskeletalChiropracticCarePhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "musculoskeletalOtherDiagnosis" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalOtherDiagnosis",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalOtherDiagnosisGroup" : {
                    "type" : "OBJECT",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalOtherDiagnosisGroup",
                    "validationRules" : [ ],
                    "objectFields" : {
                      "musculoskeletalOtherDetails" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalOtherDiagnosisGroup.musculoskeletalOtherDetails",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalOtherDiagnosis), 'YES');\n  });\n}"
                      },
                      "musculoskeletalOtherDateOfDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalOtherDiagnosisGroup.musculoskeletalOtherDateOfDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalOtherDiagnosis), 'YES');\n  });\n}"
                      },
                      "musculoskeletalOtherDateLastSeenByPhysician" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalOtherDiagnosisGroup.musculoskeletalOtherDateLastSeenByPhysician",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalOtherDiagnosis), 'YES');\n  });\n}"
                      },
                      "musculoskeletalOtherDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalOtherDiagnosisGroup.musculoskeletalOtherDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalOtherDiagnosis), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "musculoskeletalOtherPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalOtherDiagnosisGroup.musculoskeletalOtherPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalOtherDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalOtherDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "musculoskeletalOtherDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalOtherDiagnosisGroup.musculoskeletalOtherDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalOtherDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.musculoskeletalOtherPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    }
                  },
                  "musculoskeletalTreatmentTypeMedicationInjections" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeMedicationInjections",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalTreatmentTypeMedicationInjectionsGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeMedicationInjectionsGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.musculoskeletalTreatmentTypeMedicationInjectionsGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.musculoskeletalTreatmentTypeMedicationInjectionsGroup), Big('5'));\n  });\n}" ],
                    "objectFields" : {
                      "musculoskeletalTreatmentTypeMedicationInjectionsDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeMedicationInjectionsGroup.musculoskeletalTreatmentTypeMedicationInjectionsDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeMedicationInjections), 'YES');\n  });\n}"
                      },
                      "musculoskeletalTreatmentTypeMedicationInjectionsNameOfMedication" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeMedicationInjectionsGroup.musculoskeletalTreatmentTypeMedicationInjectionsNameOfMedication",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeMedicationInjections), 'YES');\n  });\n}"
                      },
                      "musculoskeletalTreatmentTypeMedicationInjectionsDosageFrequency" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeMedicationInjectionsGroup.musculoskeletalTreatmentTypeMedicationInjectionsDosageFrequency",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeMedicationInjections), 'YES');\n  });\n}"
                      },
                      "musculoskeletalTreatmentTypeMedicationInjectionsDateFirstTaken" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeMedicationInjectionsGroup.musculoskeletalTreatmentTypeMedicationInjectionsDateFirstTaken",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeMedicationInjections), 'YES');\n  });\n}"
                      },
                      "musculoskeletalTreatmentTypeMedicationInjectionsDateLastTaken" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeMedicationInjectionsGroup.musculoskeletalTreatmentTypeMedicationInjectionsDateLastTaken",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeMedicationInjections), 'YES');\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "5"
                  },
                  "musculoskeletalTreatmentTypePhysicalTherapy" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypePhysicalTherapy",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalTreatmentTypePhysicalTherapyGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypePhysicalTherapyGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.musculoskeletalTreatmentTypePhysicalTherapyGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.musculoskeletalTreatmentTypePhysicalTherapyGroup), Big('5'));\n  });\n}" ],
                    "objectFields" : {
                      "musculoskeletalTreatmentTypePhysicalTherapyDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypePhysicalTherapyGroup.musculoskeletalTreatmentTypePhysicalTherapyDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypePhysicalTherapy), 'YES');\n  });\n}"
                      },
                      "musculoskeletalTreatmentTypePhysicalTherapyDateStarted" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypePhysicalTherapyGroup.musculoskeletalTreatmentTypePhysicalTherapyDateStarted",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypePhysicalTherapy), 'YES');\n  });\n}"
                      },
                      "musculoskeletalTreatmentTypePhysicalTherapyDateEnded" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypePhysicalTherapyGroup.musculoskeletalTreatmentTypePhysicalTherapyDateEnded",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypePhysicalTherapy), 'YES');\n  });\n}"
                      },
                      "musculoskeletalTreatmentTypePhysicalTherapyFrequency" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypePhysicalTherapyGroup.musculoskeletalTreatmentTypePhysicalTherapyFrequency",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypePhysicalTherapy), 'YES');\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "5"
                  },
                  "musculoskeletalTreatmentTypeSurgery" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeSurgery",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalTreatmentTypeSurgeryGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeSurgeryGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.musculoskeletalTreatmentTypeSurgeryGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.musculoskeletalTreatmentTypeSurgeryGroup), Big('5'));\n  });\n}" ],
                    "objectFields" : {
                      "musculoskeletalTreatmentTypeSurgeryDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeSurgeryGroup.musculoskeletalTreatmentTypeSurgeryDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeSurgery), 'YES');\n  });\n}"
                      },
                      "musculoskeletalTreatmentTypeSurgeryType" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeSurgeryGroup.musculoskeletalTreatmentTypeSurgeryType",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeSurgery), 'YES');\n  });\n}"
                      },
                      "musculoskeletalTreatmentTypeSurgeryDate" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeSurgeryGroup.musculoskeletalTreatmentTypeSurgeryDate",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeSurgery), 'YES');\n  });\n}"
                      },
                      "musculoskeletalTreatmentTypeSurgeryResults" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeSurgeryGroup.musculoskeletalTreatmentTypeSurgeryResults",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeSurgery), 'YES');\n  });\n}"
                      },
                      "musculoskeletalTreatmentTypeSurgeryDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeSurgeryGroup.musculoskeletalTreatmentTypeSurgeryDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeSurgery), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "musculoskeletalTreatmentTypeSurgeryPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeSurgeryGroup.musculoskeletalTreatmentTypeSurgeryPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeSurgery), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalTreatmentTypeSurgeryDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "musculoskeletalTreatmentTypeSurgeryDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeSurgeryGroup.musculoskeletalTreatmentTypeSurgeryDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalTreatmentTypeSurgeryDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.musculoskeletalTreatmentTypeSurgeryPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "5"
                  },
                  "musculoskeletalTreatmentTypeOther" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeOther",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalTreatmentTypeOtherGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeOtherGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.musculoskeletalTreatmentTypeOtherGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.musculoskeletalTreatmentTypeOtherGroup), Big('5'));\n  });\n}" ],
                    "objectFields" : {
                      "musculoskeletalTreatmentTypeOtherDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeOtherGroup.musculoskeletalTreatmentTypeOtherDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeOther), 'YES');\n  });\n}"
                      },
                      "musculoskeletalTreatmentTypeOtherTypeOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeOtherGroup.musculoskeletalTreatmentTypeOtherTypeOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeOther), 'YES');\n  });\n}"
                      },
                      "musculoskeletalTreatmentTypeOtherDateStarted" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeOtherGroup.musculoskeletalTreatmentTypeOtherDateStarted",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeOther), 'YES');\n  });\n}"
                      },
                      "musculoskeletalTreatmentTypeOtherDateEnded" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeOtherGroup.musculoskeletalTreatmentTypeOtherDateEnded",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeOther), 'YES');\n  });\n}"
                      },
                      "musculoskeletalTreatmentTypeOtherDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeOtherGroup.musculoskeletalTreatmentTypeOtherDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeOther), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "musculoskeletalTreatmentTypeOtherPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeOtherGroup.musculoskeletalTreatmentTypeOtherPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeOther), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalTreatmentTypeOtherDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "musculoskeletalTreatmentTypeOtherDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeOtherGroup.musculoskeletalTreatmentTypeOtherDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalTreatmentTypeOtherDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.musculoskeletalTreatmentTypeOtherPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "5"
                  },
                  "musculoskeletalRecommendedTestOrSurgery" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalRecommendedTestOrSurgery",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalRecommendedTestOrSurgeryGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalRecommendedTestOrSurgeryGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.musculoskeletalRecommendedTestOrSurgeryGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.musculoskeletalRecommendedTestOrSurgeryGroup), Big('5'));\n  });\n}" ],
                    "objectFields" : {
                      "musculoskeletalRecommendedTestOrSurgeryDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalRecommendedTestOrSurgeryGroup.musculoskeletalRecommendedTestOrSurgeryDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalRecommendedTestOrSurgery), 'YES');\n  });\n}"
                      },
                      "musculoskeletalRecommendedTestOrSurgeryTypeOfTestSurgery" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalRecommendedTestOrSurgeryGroup.musculoskeletalRecommendedTestOrSurgeryTypeOfTestSurgery",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalRecommendedTestOrSurgery), 'YES');\n  });\n}"
                      },
                      "musculoskeletalRecommendedTestOrSurgeryDate" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalRecommendedTestOrSurgeryGroup.musculoskeletalRecommendedTestOrSurgeryDate",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalRecommendedTestOrSurgery), 'YES');\n  });\n}"
                      },
                      "musculoskeletalRecommendedTestOrSurgeryResults" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalRecommendedTestOrSurgeryGroup.musculoskeletalRecommendedTestOrSurgeryResults",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalRecommendedTestOrSurgery), 'YES');\n  });\n}"
                      },
                      "musculoskeletalRecommendedTestOrSurgeryDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalRecommendedTestOrSurgeryGroup.musculoskeletalRecommendedTestOrSurgeryDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalRecommendedTestOrSurgery), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "musculoskeletalRecommendedTestOrSurgeryPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalRecommendedTestOrSurgeryGroup.musculoskeletalRecommendedTestOrSurgeryPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalRecommendedTestOrSurgery), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalRecommendedTestOrSurgeryDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "musculoskeletalRecommendedTestOrSurgeryDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalRecommendedTestOrSurgeryGroup.musculoskeletalRecommendedTestOrSurgeryDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalRecommendedTestOrSurgeryDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.musculoskeletalRecommendedTestOrSurgeryPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "5"
                  },
                  "musculoskeletalTreatmentTypeHospitalizationOrOutPatient" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeHospitalizationOrOutPatient",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalTreatmentTypeHospitalizationOrOutPatientGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeHospitalizationOrOutPatientGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.musculoskeletalTreatmentTypeHospitalizationOrOutPatientGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.musculoskeletalTreatmentTypeHospitalizationOrOutPatientGroup), Big('5'));\n  });\n}" ],
                    "objectFields" : {
                      "musculoskeletalTreatmentTypeHospitalizationOrOutPatientDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeHospitalizationOrOutPatientGroup.musculoskeletalTreatmentTypeHospitalizationOrOutPatientDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}"
                      },
                      "musculoskeletalTreatmentTypeHospitalizationOrOutPatientDateOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeHospitalizationOrOutPatientGroup.musculoskeletalTreatmentTypeHospitalizationOrOutPatientDateOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}"
                      },
                      "musculoskeletalTreatmentTypeHospitalizationOrOutPatientDurationOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeHospitalizationOrOutPatientGroup.musculoskeletalTreatmentTypeHospitalizationOrOutPatientDurationOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}"
                      },
                      "musculoskeletalTreatmentTypeHospitalizationOrOutPatientTypeOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeHospitalizationOrOutPatientGroup.musculoskeletalTreatmentTypeHospitalizationOrOutPatientTypeOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}"
                      },
                      "musculoskeletalTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeHospitalizationOrOutPatientGroup.musculoskeletalTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "musculoskeletalTreatmentTypeHospitalizationOrOutPatientPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeHospitalizationOrOutPatientGroup.musculoskeletalTreatmentTypeHospitalizationOrOutPatientPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeHospitalizationOrOutPatient), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "musculoskeletalTreatmentTypeHospitalizationOrOutPatientDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeHospitalizationOrOutPatientGroup.musculoskeletalTreatmentTypeHospitalizationOrOutPatientDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.musculoskeletalTreatmentTypeHospitalizationOrOutPatientPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "5"
                  },
                  "musculoskeletalMissedWorkForCondition" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalMissedWorkForCondition",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "musculoskeletalMissedWorkForConditionDetails" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalMissedWorkForConditionDetails",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalMissedWorkForCondition), 'YES');\n  });\n}"
                  },
                  "musculoskeletalAdditionalInformationOrComments" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.musculoskeletalAdditionalInformationOrComments",
                    "validationRules" : [ ],
                    "required" : "false"
                  },
                  "eyeEarNoseBloodQuestion" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.eyeEarNoseBloodQuestion",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(pmrl.toUpperCase(parent.eyeEarNoseBloodQuestion), 'YES') && ((!pmrl.isDefined(parent.generalTreatmentTypeMedication) || pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeMedication), 'NO')) && (!pmrl.isDefined(parent.generalTreatmentTypeSurgery) || pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeSurgery), 'NO')) && (!pmrl.isDefined(parent.generalTreatmentTypeOther) || pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeOther), 'NO')))) {\n      valid = 'Please select at least one treatment type below';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "generalDiagnosisGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalDiagnosisGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.generalDiagnosisGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.generalDiagnosisGroup), Big('3'));\n  });\n}" ],
                    "objectFields" : {
                      "generalIndicateDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalDiagnosisGroup.generalIndicateDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES');\n  });\n}"
                      },
                      "generalDateOfDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalDiagnosisGroup.generalDateOfDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES');\n  });\n}"
                      },
                      "generalDateLastSeen" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalDiagnosisGroup.generalDateLastSeen",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES');\n  });\n}"
                      },
                      "generalResultsOfLastVisit" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalDiagnosisGroup.generalResultsOfLastVisit",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES');\n  });\n}"
                      },
                      "generalDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalDiagnosisGroup.generalDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "generalPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalDiagnosisGroup.generalPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "generalDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalDiagnosisGroup.generalDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.generalDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.generalPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "3"
                  },
                  "generalTreatmentTypeMedication" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalTreatmentTypeMedication",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "generalMedicationTreatmentGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalMedicationTreatmentGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.generalMedicationTreatmentGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.generalMedicationTreatmentGroup), Big('3'));\n  });\n}" ],
                    "objectFields" : {
                      "generalMedicationDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalMedicationTreatmentGroup.generalMedicationDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeMedication), 'YES');\n  });\n}"
                      },
                      "generalMedicationName" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalMedicationTreatmentGroup.generalMedicationName",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeMedication), 'YES');\n  });\n}"
                      },
                      "generalMedicationDosage" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalMedicationTreatmentGroup.generalMedicationDosage",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeMedication), 'YES');\n  });\n}"
                      },
                      "generalMedicationFirstTaken" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalMedicationTreatmentGroup.generalMedicationFirstTaken",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeMedication), 'YES');\n  });\n}"
                      },
                      "generalMedicationLastTaken" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalMedicationTreatmentGroup.generalMedicationLastTaken",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeMedication), 'YES');\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "3"
                  },
                  "generalTreatmentTypeSurgery" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalTreatmentTypeSurgery",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "generalSurgeryTreatmentGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalSurgeryTreatmentGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.generalSurgeryTreatmentGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.generalSurgeryTreatmentGroup), Big('3'));\n  });\n}" ],
                    "objectFields" : {
                      "generalSurgeryDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalSurgeryTreatmentGroup.generalSurgeryDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery), 'YES');\n  });\n}"
                      },
                      "generalSurgeryType" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalSurgeryTreatmentGroup.generalSurgeryType",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery), 'YES');\n  });\n}"
                      },
                      "generalSurgeryDate" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalSurgeryTreatmentGroup.generalSurgeryDate",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery), 'YES');\n  });\n}"
                      },
                      "generalSurgeryResults" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalSurgeryTreatmentGroup.generalSurgeryResults",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery), 'YES');\n  });\n}"
                      },
                      "generalSurgeryDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalSurgeryTreatmentGroup.generalSurgeryDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "generalSurgeryPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalSurgeryTreatmentGroup.generalSurgeryPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalSurgeryDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "generalSurgeryDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalSurgeryTreatmentGroup.generalSurgeryDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.generalSurgeryDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.generalSurgeryPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "3"
                  },
                  "generalTreatmentTypeOther" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalTreatmentTypeOther",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "generalOtherTreatmentGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalOtherTreatmentGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.generalOtherTreatmentGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.generalOtherTreatmentGroup), Big('3'));\n  });\n}" ],
                    "objectFields" : {
                      "generalOtherDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalOtherTreatmentGroup.generalOtherDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther), 'YES');\n  });\n}"
                      },
                      "generalOtherTypeOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalOtherTreatmentGroup.generalOtherTypeOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther), 'YES');\n  });\n}"
                      },
                      "generalOtherDateStarted" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalOtherTreatmentGroup.generalOtherDateStarted",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther), 'YES');\n  });\n}"
                      },
                      "generalOtherLastTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalOtherTreatmentGroup.generalOtherLastTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther), 'YES');\n  });\n}"
                      },
                      "generalOtherDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalOtherTreatmentGroup.generalOtherDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "generalOtherPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalOtherTreatmentGroup.generalOtherPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalOtherDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "generalOtherDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalOtherTreatmentGroup.generalOtherDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.generalOtherDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.generalOtherPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "3"
                  },
                  "generalRecommendedToHaveTestOrSurgery" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgery",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.eyeEarNoseBloodQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "generalRecommendedToHaveTestOrSurgeryGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.generalRecommendedToHaveTestOrSurgeryGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.generalRecommendedToHaveTestOrSurgeryGroup), Big('3'));\n  });\n}" ],
                    "objectFields" : {
                      "generalRecommendedDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup.generalRecommendedDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery), 'YES');\n  });\n}"
                      },
                      "generalRecommendedTypeOfTest" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup.generalRecommendedTypeOfTest",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery), 'YES');\n  });\n}"
                      },
                      "generalRecommendedDate" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup.generalRecommendedDate",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery), 'YES');\n  });\n}"
                      },
                      "generalRecommendedResults" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup.generalRecommendedResults",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery), 'YES');\n  });\n}"
                      },
                      "generalRecommendedDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup.generalRecommendedDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "generalRecommendedPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup.generalRecommendedPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalRecommendedDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "generalRecommendedDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup.generalRecommendedDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.generalRecommendedDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.generalRecommendedPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "3"
                  },
                  "generalHospitalizedForCondition" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalHospitalizedForCondition",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.eyeEarNoseBloodQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "generalHospitalizedGroup" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalHospitalizedGroup",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.generalHospitalizedGroup), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.generalHospitalizedGroup), Big('3'));\n  });\n}" ],
                    "objectFields" : {
                      "generalHospitalizedForConditionDiagnosis" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalHospitalizedGroup.generalHospitalizedForConditionDiagnosis",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition), 'YES');\n  });\n}"
                      },
                      "generalHospitalizedForConditionDateOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalHospitalizedGroup.generalHospitalizedForConditionDateOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition), 'YES');\n  });\n}"
                      },
                      "generalHospitalizedForConditionDurationOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalHospitalizedGroup.generalHospitalizedForConditionDurationOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition), 'YES');\n  });\n}"
                      },
                      "generalHospitalizedForConditionTypeOfTreatment" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalHospitalizedGroup.generalHospitalizedForConditionTypeOfTreatment",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition), 'YES');\n  });\n}"
                      },
                      "generalHospitalizedForConditionDiagnosedByPCP" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalHospitalizedGroup.generalHospitalizedForConditionDiagnosedByPCP",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "generalHospitalizedForConditionPhysicianNameAddress" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalHospitalizedGroup.generalHospitalizedForConditionPhysicianNameAddress",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalHospitalizedForConditionDiagnosedByPCP), 'NO');\n  });\n}"
                      },
                      "generalHospitalizedForConditionDiagnosingPhysicianInfo" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalHospitalizedGroup.generalHospitalizedForConditionDiagnosingPhysicianInfo",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.generalHospitalizedForConditionDiagnosedByPCP), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.generalHospitalizedForConditionPhysicianNameAddress;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "3"
                  },
                  "generalMissedWorkForThisCondition" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalMissedWorkForThisCondition",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.eyeEarNoseBloodQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "generalMissedWorkForThisConditionDetails" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalMissedWorkForThisConditionDetails",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalMissedWorkForThisCondition), 'YES');\n  });\n}"
                  },
                  "generalCalculatedMissedWorkForThisCondition" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalCalculatedMissedWorkForThisCondition",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.generalMissedWorkForThisCondition), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.generalMissedWorkForThisCondition2), 'YES')) {\n      returnValue = 'YES';\n    } else {\n      returnValue = 'NO';\n    }\n    return returnValue;\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "generalFormAdditionalInformation1" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalFormAdditionalInformation1",
                    "validationRules" : [ ],
                    "required" : "false"
                  },
                  "diagnosticEvaluationQuestion" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.diagnosticEvaluationQuestion",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.isDefined(parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.otherMedicationQuestion) && pmrl.equal(pmrl.toUpperCase(parent.diagnosticEvaluationQuestion), 'YES') && ((!pmrl.isDefined(parent.generalTreatmentTypeMedication2) || pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeMedication2), 'NO')) && (!pmrl.isDefined(parent.generalTreatmentTypeSurgery2) || pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeSurgery2), 'NO')) && (!pmrl.isDefined(parent.generalTreatmentTypeOther2) || pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeOther2), 'NO')))) {\n      valid = 'Please select at least one treatment type below';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "otherDiagnosesTreatmentQuestion" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.otherDiagnosesTreatmentQuestion",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.isDefined(parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.otherMedicationQuestion) && pmrl.equal(pmrl.toUpperCase(parent.otherDiagnosesTreatmentQuestion), 'YES') && ((!pmrl.isDefined(parent.generalTreatmentTypeMedication2) || pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeMedication2), 'NO')) && (!pmrl.isDefined(parent.generalTreatmentTypeSurgery2) || pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeSurgery2), 'NO')) && (!pmrl.isDefined(parent.generalTreatmentTypeOther2) || pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeOther2), 'NO')))) {\n      valid = 'Please select at least one treatment type below';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "otherMedicationQuestion" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.otherMedicationQuestion",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.isDefined(parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.otherMedicationQuestion) && pmrl.equal(pmrl.toUpperCase(parent.otherMedicationQuestion), 'YES') && ((!pmrl.isDefined(parent.generalTreatmentTypeMedication2) || pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeMedication2), 'NO')) && (!pmrl.isDefined(parent.generalTreatmentTypeSurgery2) || pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeSurgery2), 'NO')) && (!pmrl.isDefined(parent.generalTreatmentTypeOther2) || pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeOther2), 'NO')))) {\n      valid = 'Please select at least one treatment type below';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "generalDiagnosisGroup2" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalDiagnosisGroup2",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.generalDiagnosisGroup2), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.generalDiagnosisGroup2), Big('3'));\n  });\n}" ],
                    "objectFields" : {
                      "generalIndicateDiagnosis2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalDiagnosisGroup2.generalIndicateDiagnosis2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES');\n  });\n}"
                      },
                      "generalDateOfDiagnosis2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalDiagnosisGroup2.generalDateOfDiagnosis2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES');\n  });\n}"
                      },
                      "generalDateLastSeen2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalDiagnosisGroup2.generalDateLastSeen2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES');\n  });\n}"
                      },
                      "generalResultsOfLastVisit2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalDiagnosisGroup2.generalResultsOfLastVisit2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES');\n  });\n}"
                      },
                      "generalDiagnosedByPCP2" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalDiagnosisGroup2.generalDiagnosedByPCP2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "generalPhysicianNameAddress2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalDiagnosisGroup2.generalPhysicianNameAddress2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.generalDiagnosedByPCP2), 'NO');\n  });\n}"
                      },
                      "generalDiagnosingPhysicianInfo2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalDiagnosisGroup2.generalDiagnosingPhysicianInfo2",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.generalDiagnosedByPCP2), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.generalPhysicianNameAddress2;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "3"
                  },
                  "generalTreatmentTypeMedication2" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalTreatmentTypeMedication2",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "generalMedicationTreatmentGroup2" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalMedicationTreatmentGroup2",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.generalMedicationTreatmentGroup2), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.generalMedicationTreatmentGroup2), Big('4'));\n  });\n}" ],
                    "objectFields" : {
                      "generalMedicationDiagnosis2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalMedicationTreatmentGroup2.generalMedicationDiagnosis2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeMedication2), 'YES');\n  });\n}"
                      },
                      "generalMedicationName2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalMedicationTreatmentGroup2.generalMedicationName2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeMedication2), 'YES');\n  });\n}"
                      },
                      "generalMedicationDosage2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalMedicationTreatmentGroup2.generalMedicationDosage2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeMedication2), 'YES');\n  });\n}"
                      },
                      "generalMedicationFirstTaken2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalMedicationTreatmentGroup2.generalMedicationFirstTaken2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeMedication2), 'YES');\n  });\n}"
                      },
                      "generalMedicationLastTaken2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalMedicationTreatmentGroup2.generalMedicationLastTaken2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeMedication2), 'YES');\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "4"
                  },
                  "generalTreatmentTypeSurgery2" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalTreatmentTypeSurgery2",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "generalSurgeryTreatmentGroup2" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalSurgeryTreatmentGroup2",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.generalSurgeryTreatmentGroup2), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.generalSurgeryTreatmentGroup2), Big('3'));\n  });\n}" ],
                    "objectFields" : {
                      "generalSurgeryDiagnosis2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalSurgeryTreatmentGroup2.generalSurgeryDiagnosis2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery2), 'YES');\n  });\n}"
                      },
                      "generalSurgeryType2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalSurgeryTreatmentGroup2.generalSurgeryType2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery2), 'YES');\n  });\n}"
                      },
                      "generalSurgeryDate2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalSurgeryTreatmentGroup2.generalSurgeryDate2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery2), 'YES');\n  });\n}"
                      },
                      "generalSurgeryResults2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalSurgeryTreatmentGroup2.generalSurgeryResults2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery2), 'YES');\n  });\n}"
                      },
                      "generalSurgeryDiagnosedByPCP2" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalSurgeryTreatmentGroup2.generalSurgeryDiagnosedByPCP2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery2), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "generalSurgeryPhysicianNameAddress2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalSurgeryTreatmentGroup2.generalSurgeryPhysicianNameAddress2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery2), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalSurgeryDiagnosedByPCP2), 'NO');\n  });\n}"
                      },
                      "generalSurgeryDiagnosingPhysicianInfo2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalSurgeryTreatmentGroup2.generalSurgeryDiagnosingPhysicianInfo2",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.generalSurgeryDiagnosedByPCP2), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.generalSurgeryPhysicianNameAddress2;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "3"
                  },
                  "generalTreatmentTypeOther2" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalTreatmentTypeOther2",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "generalOtherTreatmentGroup2" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalOtherTreatmentGroup2",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.generalOtherTreatmentGroup2), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.generalOtherTreatmentGroup2), Big('3'));\n  });\n}" ],
                    "objectFields" : {
                      "generalOtherDiagnosis2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalOtherTreatmentGroup2.generalOtherDiagnosis2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther2), 'YES');\n  });\n}"
                      },
                      "generalOtherTypeOfTreatment2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalOtherTreatmentGroup2.generalOtherTypeOfTreatment2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther2), 'YES');\n  });\n}"
                      },
                      "generalOtherDateStarted2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalOtherTreatmentGroup2.generalOtherDateStarted2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther2), 'YES');\n  });\n}"
                      },
                      "generalOtherLastTreatment2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalOtherTreatmentGroup2.generalOtherLastTreatment2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther2), 'YES');\n  });\n}"
                      },
                      "generalOtherDiagnosedByPCP2" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalOtherTreatmentGroup2.generalOtherDiagnosedByPCP2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther2), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "generalOtherPhysicianNameAddress2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalOtherTreatmentGroup2.generalOtherPhysicianNameAddress2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther2), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalOtherDiagnosedByPCP2), 'NO');\n  });\n}"
                      },
                      "generalOtherDiagnosingPhysicianInfo2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalOtherTreatmentGroup2.generalOtherDiagnosingPhysicianInfo2",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.generalOtherDiagnosedByPCP2), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.generalOtherPhysicianNameAddress2;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "3"
                  },
                  "generalRecommendedToHaveTestOrSurgery2" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgery2",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherMedicationQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "generalRecommendedToHaveTestOrSurgeryGroup2" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup2",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.generalRecommendedToHaveTestOrSurgeryGroup2), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.generalRecommendedToHaveTestOrSurgeryGroup2), Big('3'));\n  });\n}" ],
                    "objectFields" : {
                      "generalRecommendedDiagnosis2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup2.generalRecommendedDiagnosis2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery2), 'YES');\n  });\n}"
                      },
                      "generalRecommendedTypeOfTest2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup2.generalRecommendedTypeOfTest2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery2), 'YES');\n  });\n}"
                      },
                      "generalRecommendedDate2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup2.generalRecommendedDate2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery2), 'YES');\n  });\n}"
                      },
                      "generalRecommendedResults2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup2.generalRecommendedResults2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery2), 'YES');\n  });\n}"
                      },
                      "generalRecommendedDiagnosedByPCP2" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup2.generalRecommendedDiagnosedByPCP2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery2), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "generalRecommendedPhysicianNameAddress2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup2.generalRecommendedPhysicianNameAddress2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery2), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalRecommendedDiagnosedByPCP2), 'NO');\n  });\n}"
                      },
                      "generalRecommendedDiagnosingPhysicianInfo2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup2.generalRecommendedDiagnosingPhysicianInfo2",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.generalRecommendedDiagnosedByPCP2), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.generalRecommendedPhysicianNameAddress2;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "3"
                  },
                  "generalHospitalizedForCondition2" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalHospitalizedForCondition2",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherMedicationQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "generalHospitalizedGroup2" : {
                    "type" : "LIST",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalHospitalizedGroup2",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    return pmrl.greaterThanEqual(pmrl.length(parent.generalHospitalizedGroup2), Big('1')) && pmrl.lessThanEqual(pmrl.length(parent.generalHospitalizedGroup2), Big('3'));\n  });\n}" ],
                    "objectFields" : {
                      "generalHospitalizedForConditionDiagnosis2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalHospitalizedGroup2.generalHospitalizedForConditionDiagnosis2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition2), 'YES');\n  });\n}"
                      },
                      "generalHospitalizedForConditionDateOfTreatment2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalHospitalizedGroup2.generalHospitalizedForConditionDateOfTreatment2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition2), 'YES');\n  });\n}"
                      },
                      "generalHospitalizedForConditionDurationOfTreatment2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalHospitalizedGroup2.generalHospitalizedForConditionDurationOfTreatment2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition2), 'YES');\n  });\n}"
                      },
                      "generalHospitalizedForConditionTypeOfTreatment2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalHospitalizedGroup2.generalHospitalizedForConditionTypeOfTreatment2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition2), 'YES');\n  });\n}"
                      },
                      "generalHospitalizedForConditionDiagnosedByPCP2" : {
                        "type" : "ENUM",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalHospitalizedGroup2.generalHospitalizedForConditionDiagnosedByPCP2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition2), 'YES');\n  });\n}",
                        "possibleValues" : [ {
                          "value" : "YES",
                          "displayValue" : "Yes"
                        }, {
                          "value" : "NO",
                          "displayValue" : "No"
                        } ]
                      },
                      "generalHospitalizedForConditionPhysicianNameAddress2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalHospitalizedGroup2.generalHospitalizedForConditionPhysicianNameAddress2",
                        "validationRules" : [ ],
                        "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition2), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalHospitalizedForConditionDiagnosedByPCP2), 'NO');\n  });\n}"
                      },
                      "generalHospitalizedDiagnosingPhysicianInfo2" : {
                        "type" : "STRING",
                        "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                        "referenceName" : "insureds.underwritingFactors.healthFactors.generalHospitalizedGroup2.generalHospitalizedDiagnosingPhysicianInfo2",
                        "validationRules" : [ ],
                        "required" : "false",
                        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.generalHospitalizedForConditionDiagnosedByPCP2), 'YES')) {\n      returnValue = 'See Primary Care Physician Information';\n    } else {\n      returnValue = parent.generalHospitalizedForConditionPhysicianNameAddress2;\n    }\n    return returnValue;\n  });\n}"
                      }
                    },
                    "minItemCount" : "1",
                    "maxItemCount" : "3"
                  },
                  "generalMissedWorkForThisCondition2" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalMissedWorkForThisCondition2",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherMedicationQuestion), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "generalMissedWorkForThisConditionDetails2" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalMissedWorkForThisConditionDetails2",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(pmrl.toUpperCase(parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.generalMissedWorkForThisCondition2), 'YES');\n  });\n}"
                  },
                  "generalFormAdditionalInformation2" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalFormAdditionalInformation2",
                    "validationRules" : [ ],
                    "required" : "false"
                  },
                  "generalCalculatedTreatmentTypeMedication" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalCalculatedTreatmentTypeMedication",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeMedication), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeMedication2), 'YES')) {\n      returnValue = 'YES';\n    } else {\n      returnValue = 'NO';\n    }\n    return returnValue;\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "generalCalculatedTreatmentTypeSurgery" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalCalculatedTreatmentTypeSurgery",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeSurgery), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeSurgery2), 'YES')) {\n      returnValue = 'YES';\n    } else {\n      returnValue = 'NO';\n    }\n    return returnValue;\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "generalCalculatedTreatmentTypeOther" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalCalculatedTreatmentTypeOther",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeOther), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeOther2), 'YES')) {\n      returnValue = 'YES';\n    } else {\n      returnValue = 'NO';\n    }\n    return returnValue;\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "generalCalculatedRecommendedToHaveTestOrSurgery" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalCalculatedRecommendedToHaveTestOrSurgery",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.generalRecommendedToHaveTestOrSurgery), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.generalRecommendedToHaveTestOrSurgery2), 'YES')) {\n      returnValue = 'YES';\n    } else {\n      returnValue = 'NO';\n    }\n    return returnValue;\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "generalCalculatedHospitalizedForCondition" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.healthFactors.generalCalculatedHospitalizedForCondition",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.generalHospitalizedForCondition), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.generalHospitalizedForCondition2), 'YES')) {\n      returnValue = 'YES';\n    } else {\n      returnValue = 'NO';\n    }\n    return returnValue;\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  }
                }
              },
              "financialFactors" : {
                "type" : "OBJECT",
                "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.underwritingFactors.financialFactors",
                "validationRules" : [ ],
                "objectFields" : {
                  "unearnedIncomeCapitalGainsPensionsRoyalties" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.unearnedIncomeCapitalGainsPensionsRoyalties",
                    "validationRules" : [ ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "earnedIncomeYtd" : {
                    "type" : "NUMBER",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.earnedIncomeYtd",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'NO') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'NO');\n  });\n}"
                  },
                  "earnedIncomeLastYr" : {
                    "type" : "NUMBER",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.earnedIncomeLastYr",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'NO') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'NO');\n  });\n}"
                  },
                  "earnedIncome2YrAgo" : {
                    "type" : "NUMBER",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.earnedIncome2YrAgo",
                    "validationRules" : [ ],
                    "required" : "false"
                  },
                  "soleProprietorOr1099NetIncomeYtd" : {
                    "type" : "NUMBER",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.soleProprietorOr1099NetIncomeYtd",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessSoleProprietor1099), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessSoleProprietor1099), 'YES');\n  });\n}"
                  },
                  "soleProprietorOr1099NetIncomeLastYr" : {
                    "type" : "NUMBER",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.soleProprietorOr1099NetIncomeLastYr",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessSoleProprietor1099), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessSoleProprietor1099), 'YES');\n  });\n}"
                  },
                  "soleProprietorOr1099NetIncome2YrAgo" : {
                    "type" : "NUMBER",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.soleProprietorOr1099NetIncome2YrAgo",
                    "validationRules" : [ ],
                    "required" : "false"
                  },
                  "partnershipOrLlcYtd" : {
                    "type" : "NUMBER",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.partnershipOrLlcYtd",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessPartnership), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessLlc), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessPartnership), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessLlc), 'YES');\n  });\n}"
                  },
                  "partnershipOrLlcLastYr" : {
                    "type" : "NUMBER",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.partnershipOrLlcLastYr",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessPartnership), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessLlc), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessPartnership), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessLlc), 'YES');\n  });\n}"
                  },
                  "partnershipOrLlc2YrAgo" : {
                    "type" : "NUMBER",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.partnershipOrLlc2YrAgo",
                    "validationRules" : [ ],
                    "required" : "false"
                  },
                  "sCorporationNetIncomeYtd" : {
                    "type" : "NUMBER",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.sCorporationNetIncomeYtd",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessSCorporation), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessSCorporation), 'YES');\n  });\n}"
                  },
                  "sCorporationNetIncomeLastYr" : {
                    "type" : "NUMBER",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.sCorporationNetIncomeLastYr",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessSCorporation), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessSCorporation), 'YES');\n  });\n}"
                  },
                  "sCorporationNetIncome2YrAgo" : {
                    "type" : "NUMBER",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.sCorporationNetIncome2YrAgo",
                    "validationRules" : [ ],
                    "required" : "false"
                  },
                  "cCorporationNetIncomeYtd" : {
                    "type" : "NUMBER",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.cCorporationNetIncomeYtd",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessCCorporation), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessCCorporation), 'YES');\n  });\n}"
                  },
                  "cCorporationNetIncomeLastYr" : {
                    "type" : "NUMBER",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.cCorporationNetIncomeLastYr",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessCCorporation), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessCCorporation), 'YES');\n  });\n}"
                  },
                  "cCorporationNetIncome2YrAgo" : {
                    "type" : "NUMBER",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.cCorporationNetIncome2YrAgo",
                    "validationRules" : [ ],
                    "required" : "false"
                  },
                  "pensionPlanOrProfitShareYtd" : {
                    "type" : "NUMBER",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.pensionPlanOrProfitShareYtd",
                    "validationRules" : [ ],
                    "required" : "false"
                  },
                  "pensionPlanOrProfitShareLastYr" : {
                    "type" : "NUMBER",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.pensionPlanOrProfitShareLastYr",
                    "validationRules" : [ ],
                    "required" : "false"
                  },
                  "pensionPlanOrProfitShare2YrAgo" : {
                    "type" : "NUMBER",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.pensionPlanOrProfitShare2YrAgo",
                    "validationRules" : [ ],
                    "required" : "false"
                  },
                  "totalEarnedIncomeYtd" : {
                    "type" : "NUMBER",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.totalEarnedIncomeYtd",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var totalEarnedYtd = Big('0');\n    if (pmrl.isDefined(parent.earnedIncomeYtd)) {\n      totalEarnedYtd = pmrl.plus(totalEarnedYtd, parent.earnedIncomeYtd);\n    }\n    if (pmrl.isDefined(parent.soleProprietorOr1099NetIncomeYtd)) {\n      totalEarnedYtd = pmrl.plus(totalEarnedYtd, parent.soleProprietorOr1099NetIncomeYtd);\n    }\n    if (pmrl.isDefined(parent.partnershipOrLlcYtd)) {\n      totalEarnedYtd = pmrl.plus(totalEarnedYtd, parent.partnershipOrLlcYtd);\n    }\n    if (pmrl.isDefined(parent.sCorporationNetIncomeYtd)) {\n      totalEarnedYtd = pmrl.plus(totalEarnedYtd, parent.sCorporationNetIncomeYtd);\n    }\n    if (pmrl.isDefined(parent.cCorporationNetIncomeYtd)) {\n      totalEarnedYtd = pmrl.plus(totalEarnedYtd, parent.cCorporationNetIncomeYtd);\n    }\n    if (pmrl.isDefined(parent.pensionPlanOrProfitShareYtd)) {\n      totalEarnedYtd = pmrl.plus(totalEarnedYtd, parent.pensionPlanOrProfitShareYtd);\n    }\n    return totalEarnedYtd;\n  });\n}"
                  },
                  "totalEarnedIncomeLastYr" : {
                    "type" : "NUMBER",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.totalEarnedIncomeLastYr",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var quotedIncome = parent.parent.parent.annualEarnedIncome;\n    var totalEarnedIncome = parent.totalEarnedIncomeLastYr;\n    var returnValue = true;\n    if (pmrl.isDefined(quotedIncome) && pmrl.greaterThan(totalEarnedIncome, Big('0')) && pmrl.greaterThan(quotedIncome, totalEarnedIncome)) {\n      if (pmrl.greaterThan(pmrl.minus(quotedIncome, totalEarnedIncome), Big('10000'))) {\n        returnValue = pmrl.concat('The quoted income was $', quotedIncome, '. For accurate quoting, adjust quoted amount to within $10,000 of total above.');\n      }\n    } else if (pmrl.isDefined(quotedIncome) && pmrl.greaterThan(totalEarnedIncome, Big('0')) && pmrl.lessThan(quotedIncome, totalEarnedIncome)) {\n      if (pmrl.greaterThan(pmrl.minus(totalEarnedIncome, quotedIncome), Big('10000'))) {\n        returnValue = pmrl.concat('The quoted income was $', quotedIncome, '. For accurate quoting, adjust quoted amount to within $10,000 of total above.');\n      }\n    }\n    return returnValue;\n  });\n}" ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var totalEarnedLastYr = Big('0');\n    if (pmrl.isDefined(parent.earnedIncomeLastYr)) {\n      totalEarnedLastYr = pmrl.plus(totalEarnedLastYr, parent.earnedIncomeLastYr);\n    }\n    if (pmrl.isDefined(parent.soleProprietorOr1099NetIncomeLastYr)) {\n      totalEarnedLastYr = pmrl.plus(totalEarnedLastYr, parent.soleProprietorOr1099NetIncomeLastYr);\n    }\n    if (pmrl.isDefined(parent.partnershipOrLlcLastYr)) {\n      totalEarnedLastYr = pmrl.plus(totalEarnedLastYr, parent.partnershipOrLlcLastYr);\n    }\n    if (pmrl.isDefined(parent.sCorporationNetIncomeLastYr)) {\n      totalEarnedLastYr = pmrl.plus(totalEarnedLastYr, parent.sCorporationNetIncomeLastYr);\n    }\n    if (pmrl.isDefined(parent.cCorporationNetIncomeLastYr)) {\n      totalEarnedLastYr = pmrl.plus(totalEarnedLastYr, parent.cCorporationNetIncomeLastYr);\n    }\n    if (pmrl.isDefined(parent.pensionPlanOrProfitShareLastYr)) {\n      totalEarnedLastYr = pmrl.plus(totalEarnedLastYr, parent.pensionPlanOrProfitShareLastYr);\n    }\n    return totalEarnedLastYr;\n  });\n}"
                  },
                  "totalEarnedIncome2YrAgo" : {
                    "type" : "NUMBER",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.totalEarnedIncome2YrAgo",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var totalEarned2YrAgo = Big('0');\n    if (pmrl.isDefined(parent.earnedIncome2YrAgo)) {\n      totalEarned2YrAgo = pmrl.plus(totalEarned2YrAgo, parent.earnedIncome2YrAgo);\n    }\n    if (pmrl.isDefined(parent.soleProprietorOr1099NetIncome2YrAgo)) {\n      totalEarned2YrAgo = pmrl.plus(totalEarned2YrAgo, parent.soleProprietorOr1099NetIncome2YrAgo);\n    }\n    if (pmrl.isDefined(parent.partnershipOrLlc2YrAgo)) {\n      totalEarned2YrAgo = pmrl.plus(totalEarned2YrAgo, parent.partnershipOrLlc2YrAgo);\n    }\n    if (pmrl.isDefined(parent.sCorporationNetIncome2YrAgo)) {\n      totalEarned2YrAgo = pmrl.plus(totalEarned2YrAgo, parent.sCorporationNetIncome2YrAgo);\n    }\n    if (pmrl.isDefined(parent.cCorporationNetIncome2YrAgo)) {\n      totalEarned2YrAgo = pmrl.plus(totalEarned2YrAgo, parent.cCorporationNetIncome2YrAgo);\n    }\n    if (pmrl.isDefined(parent.pensionPlanOrProfitShare2YrAgo)) {\n      totalEarned2YrAgo = pmrl.plus(totalEarned2YrAgo, parent.pensionPlanOrProfitShare2YrAgo);\n    }\n    return totalEarned2YrAgo;\n  });\n}"
                  },
                  "unearnedIncomeGreaterThanEarnedIncome" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.unearnedIncomeGreaterThanEarnedIncome",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.unearnedIncomeCapitalGainsPensionsRoyalties), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "unearnedIncomeGreaterThanEarnedIncomeItemize" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.unearnedIncomeGreaterThanEarnedIncomeItemize",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.unearnedIncomeCapitalGainsPensionsRoyalties), 'YES') && pmrl.equal(parent.unearnedIncomeGreaterThanEarnedIncome, 'YES');\n  });\n}"
                  },
                  "netWorthGreaterThan10Mil" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.netWorthGreaterThan10Mil",
                    "validationRules" : [ ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "filedClaim" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.filedClaim",
                    "validationRules" : [ ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "filedClaimDetails" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.filedClaimDetails",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.filedClaim), 'YES');\n  });\n}"
                  },
                  "bankruptcy" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.bankruptcy",
                    "validationRules" : [ ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "bankruptcyDetails" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.bankruptcyDetails",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.bankruptcy), 'YES');\n  });\n}"
                  },
                  "coReplFormReasonForReplacing" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.coReplFormReasonForReplacing",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if ((pmrl.equal(parent.parent.parent.additionalFields.insuranceInForce, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance, 'YES')) && pmrl.equal(parent.parent.parent.residentialAddress.state, 'CO') && pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0'))) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.parent.parent.otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.parent.parent.otherCoverages[i].coverageReplacing, 'YES')) {\n          valid = true;\n        }\n      }\n    }\n    return valid;\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "ADDITIONAL_BENEFITS",
                      "displayValue" : "Additional Benefits"
                    }, {
                      "value" : "NO_CHANGE",
                      "displayValue" : "No change in benefits but lower premiums"
                    }, {
                      "value" : "FEWER",
                      "displayValue" : "Fewer benefits and lower premiums"
                    }, {
                      "value" : "OTHER",
                      "displayValue" : "Other"
                    } ]
                  },
                  "coReplFormReasonForReplacingOther" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.financialFactors.coReplFormReasonForReplacingOther",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if ((pmrl.equal(parent.parent.parent.additionalFields.insuranceInForce, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor, 'YES') || pmrl.equal(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance, 'YES')) && pmrl.equal(parent.parent.parent.residentialAddress.state, 'CO') && pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0'))) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.parent.parent.otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.parent.parent.otherCoverages[i].coverageReplacing, 'YES') && pmrl.equal(parent.coReplFormReasonForReplacing, 'OTHER')) {\n          valid = true;\n        }\n      }\n    }\n    return valid;\n  });\n}"
                  }
                }
              },
              "occupationFactors" : {
                "type" : "OBJECT",
                "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.underwritingFactors.occupationFactors",
                "validationRules" : [ ],
                "objectFields" : {
                  "organizationAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.organizationAddress",
                    "validationRules" : [ ],
                    "required" : "false"
                  },
                  "primaryOccupation" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.primaryOccupation",
                    "validationRules" : [ ],
                    "required" : "true"
                  },
                  "typeOfBusinessOrIndustry" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.typeOfBusinessOrIndustry",
                    "validationRules" : [ ],
                    "required" : "true"
                  },
                  "jobDutiesAndPercentageOfTimeSpentInEach" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.jobDutiesAndPercentageOfTimeSpentInEach",
                    "validationRules" : [ ],
                    "required" : "true"
                  },
                  "workHoursPerWeekInPrimaryOcc" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.workHoursPerWeekInPrimaryOcc",
                    "validationRules" : [ ],
                    "required" : "true"
                  },
                  "beenAbleToWorkFullTimeWithNoRestrictions" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.beenAbleToWorkFullTimeWithNoRestrictions",
                    "validationRules" : [ ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "detailOfRestrictions" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.detailOfRestrictions",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.beenAbleToWorkFullTimeWithNoRestrictions), 'YES');\n  });\n}"
                  },
                  "howLongWithCurrentEmployerOrOwnedBusiness" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.howLongWithCurrentEmployerOrOwnedBusiness",
                    "validationRules" : [ ],
                    "required" : "true"
                  },
                  "workOutOfYourHome" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.workOutOfYourHome",
                    "validationRules" : [ ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "howManyHoursPerWeek" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.howManyHoursPerWeek",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.workOutOfYourHome), 'YES');\n  });\n}"
                  },
                  "employerOrBusinessName" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.employerOrBusinessName",
                    "validationRules" : [ ],
                    "required" : "true"
                  },
                  "employerOrBusinessAddress" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.employerOrBusinessAddress",
                    "validationRules" : [ ],
                    "required" : "true"
                  },
                  "businessWebsite" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.businessWebsite",
                    "validationRules" : [ ],
                    "required" : "false"
                  },
                  "ownershipInCompanyWorkFor" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.ownershipInCompanyWorkFor",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(pmrl.toUpperCase(parent.ownershipInCompanyWorkFor), 'YES') && ((!pmrl.isDefined(parent.ownershipTypeOfBusinessSoleProprietor1099) || pmrl.equal(pmrl.toUpperCase(parent.ownershipTypeOfBusinessSoleProprietor1099), 'NO')) && (!pmrl.isDefined(parent.ownershipTypeOfBusinessPartnership) || pmrl.equal(pmrl.toUpperCase(parent.ownershipTypeOfBusinessPartnership), 'NO')) && (!pmrl.isDefined(parent.ownershipTypeOfBusinessLlc) || pmrl.equal(pmrl.toUpperCase(parent.ownershipTypeOfBusinessLlc), 'NO')) && (!pmrl.isDefined(parent.ownershipTypeOfBusinessSCorporation) || pmrl.equal(pmrl.toUpperCase(parent.ownershipTypeOfBusinessSCorporation), 'NO')) && (!pmrl.isDefined(parent.ownershipTypeOfBusinessCCorporation) || pmrl.equal(pmrl.toUpperCase(parent.ownershipTypeOfBusinessCCorporation), 'NO')))) {\n      valid = 'Please select at least one business type';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "ownershipPercentage" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.ownershipPercentage",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.lessThan(parent.ownershipPercentage, Big('101')) && pmrl.greaterThan(parent.ownershipPercentage, Big('0'))) {\n      valid = true;\n    } else {\n      valid = 'Please enter a valid percentage of ownership, up to 100%';\n    }\n    return valid;\n  });\n}" ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.ownershipInCompanyWorkFor), 'YES');\n  });\n}"
                  },
                  "ownershipPeopleEmployed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.ownershipPeopleEmployed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.ownershipInCompanyWorkFor), 'YES');\n  });\n}"
                  },
                  "ownershipTypeOfBusinessSoleProprietor1099" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.ownershipTypeOfBusinessSoleProprietor1099",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "ownershipTypeOfBusinessPartnership" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.ownershipTypeOfBusinessPartnership",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "ownershipTypeOfBusinessLlc" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.ownershipTypeOfBusinessLlc",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "ownershipTypeOfBusinessSCorporation" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.ownershipTypeOfBusinessSCorporation",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "ownershipTypeOfBusinessCCorporation" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.ownershipTypeOfBusinessCCorporation",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "otherFullOrPartTimeEmployment" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.otherFullOrPartTimeEmployment",
                    "validationRules" : [ ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "otherOccupation" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.otherOccupation",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.otherFullOrPartTimeEmployment), 'YES');\n  });\n}"
                  },
                  "otherJobDutiesAndPercentageOfTimeSpentInEach" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.otherJobDutiesAndPercentageOfTimeSpentInEach",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.otherFullOrPartTimeEmployment), 'YES');\n  });\n}"
                  },
                  "otherOccWorkHoursPerWeek" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.otherOccWorkHoursPerWeek",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.otherFullOrPartTimeEmployment), 'YES');\n  });\n}"
                  },
                  "independentContractorOrOwnershipOfCompanyYouWorkFor" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(pmrl.toUpperCase(parent.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && ((!pmrl.isDefined(parent.otherOwnershipTypeOfBusinessSoleProprietor1099) || pmrl.equal(pmrl.toUpperCase(parent.otherOwnershipTypeOfBusinessSoleProprietor1099), 'NO')) && (!pmrl.isDefined(parent.otherOwnershipTypeOfBusinessPartnership) || pmrl.equal(pmrl.toUpperCase(parent.otherOwnershipTypeOfBusinessPartnership), 'NO')) && (!pmrl.isDefined(parent.otherOwnershipTypeOfBusinessLlc) || pmrl.equal(pmrl.toUpperCase(parent.otherOwnershipTypeOfBusinessLlc), 'NO')) && (!pmrl.isDefined(parent.otherOwnershipTypeOfBusinessSCorporation) || pmrl.equal(pmrl.toUpperCase(parent.otherOwnershipTypeOfBusinessSCorporation), 'NO')) && (!pmrl.isDefined(parent.otherOwnershipTypeOfBusinessCCorporation) || pmrl.equal(pmrl.toUpperCase(parent.otherOwnershipTypeOfBusinessCCorporation), 'NO')))) {\n      valid = 'Please select at least one business type';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.otherFullOrPartTimeEmployment), 'YES');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "otherOwnershipPercentage" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.otherOwnershipPercentage",
                    "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.lessThan(parent.otherOwnershipPercentage, Big('101')) && pmrl.greaterThan(parent.otherOwnershipPercentage, Big('0'))) {\n      valid = true;\n    } else {\n      valid = 'Please enter a valid percentage of ownership, up to 100%';\n    }\n    return valid;\n  });\n}" ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES');\n  });\n}"
                  },
                  "otherOwnershipPeopleEmployed" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.otherOwnershipPeopleEmployed",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES');\n  });\n}"
                  },
                  "otherOwnershipTypeOfBusinessSoleProprietor1099" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.otherOwnershipTypeOfBusinessSoleProprietor1099",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "otherOwnershipTypeOfBusinessPartnership" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.otherOwnershipTypeOfBusinessPartnership",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "otherOwnershipTypeOfBusinessLlc" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.otherOwnershipTypeOfBusinessLlc",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "otherOwnershipTypeOfBusinessSCorporation" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.otherOwnershipTypeOfBusinessSCorporation",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "otherOwnershipTypeOfBusinessCCorporation" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.otherOwnershipTypeOfBusinessCCorporation",
                    "validationRules" : [ ],
                    "required" : "false",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "planToChangeEmployers" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.planToChangeEmployers",
                    "validationRules" : [ ],
                    "required" : "true",
                    "possibleValues" : [ {
                      "value" : "YES",
                      "displayValue" : "Yes"
                    }, {
                      "value" : "NO",
                      "displayValue" : "No"
                    } ]
                  },
                  "planToChangeEmployersDetails" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.underwritingFactors.occupationFactors.planToChangeEmployersDetails",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.planToChangeEmployers), 'YES');\n  });\n}"
                  }
                }
              }
            }
          },
          "citizenship" : {
            "type" : "OBJECT",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "insureds.citizenship",
            "validationRules" : [ ],
            "objectFields" : {
              "permanentResidentCard" : {
                "type" : "ENUM",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.citizenship.permanentResidentCard",
                "validationRules" : [ ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.citizen), 'NO');\n  });\n}",
                "possibleValues" : [ {
                  "value" : "YES",
                  "displayValue" : "Yes"
                }, {
                  "value" : "NO",
                  "displayValue" : "No"
                } ]
              },
              "permanentResidentCardNumber" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.citizenship.permanentResidentCardNumber",
                "validationRules" : [ ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.citizen), 'NO') && pmrl.equal(pmrl.toUpperCase(parent.permanentResidentCard), 'YES');\n  });\n}"
              },
              "visaType" : {
                "type" : "ENUM",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.citizenship.visaType",
                "validationRules" : [ ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.citizen), 'NO') && pmrl.equal(pmrl.toUpperCase(parent.permanentResidentCard), 'NO');\n  });\n}",
                "possibleValues" : [ {
                  "value" : "STUDENT",
                  "displayValue" : "Student"
                }, {
                  "value" : "PERMANENT_RESIDENT",
                  "displayValue" : "Permanent Resident"
                }, {
                  "value" : "WORK",
                  "displayValue" : "Work"
                } ]
              },
              "visaCardNumber" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.citizenship.visaCardNumber",
                "validationRules" : [ ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.citizen), 'NO') && pmrl.equal(pmrl.toUpperCase(parent.permanentResidentCard), 'NO');\n  });\n}"
              },
              "visaExpirationMonth" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.citizenship.visaExpirationMonth",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.equal(parent.visaExpirationMonth, '01') || pmrl.equal(parent.visaExpirationMonth, '02') || pmrl.equal(parent.visaExpirationMonth, '03') || pmrl.equal(parent.visaExpirationMonth, '04') || pmrl.equal(parent.visaExpirationMonth, '05') || pmrl.equal(parent.visaExpirationMonth, '06') || pmrl.equal(parent.visaExpirationMonth, '07') || pmrl.equal(parent.visaExpirationMonth, '08') || pmrl.equal(parent.visaExpirationMonth, '09') || pmrl.equal(parent.visaExpirationMonth, '10') || pmrl.equal(parent.visaExpirationMonth, '11') || pmrl.equal(parent.visaExpirationMonth, '12')) {\n      valid = true;\n    } else {\n      valid = 'Please specify an expiration month between 01 and 12';\n    }\n    return valid;\n  });\n}" ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.citizen), 'NO') && pmrl.equal(pmrl.toUpperCase(parent.permanentResidentCard), 'NO');\n  });\n}",
                "format" : "[0-9]+"
              },
              "visaExpirationYear" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.citizenship.visaExpirationYear",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.lessThan(pmrl.length(parent.visaExpirationYear), Big('4'))) {\n      valid = 'Please enter the expiration year in YYYY format';\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}" ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.citizen), 'NO') && pmrl.equal(pmrl.toUpperCase(parent.permanentResidentCard), 'NO');\n  });\n}",
                "format" : "[0-9]+"
              },
              "countryOfPermanentResidence" : {
                "type" : "LOOKUP",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.citizenship.countryOfPermanentResidence",
                "validationRules" : [ ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.citizen), 'NO');\n  });\n}",
                "tableName" : "birthCountryTbl",
                "column" : "birthCountry"
              },
              "countryOfPermanentResidenceOther" : {
                "type" : "STRING",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.citizenship.countryOfPermanentResidenceOther",
                "validationRules" : [ ],
                "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.citizen), 'NO') && pmrl.equal(pmrl.toUpperCase(parent.countryOfPermanentResidence), 'OTHER');\n  });\n}",
                "format" : "[a-zA-Z' -]+"
              },
              "citizen" : {
                "type" : "ENUM",
                "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                "referenceName" : "insureds.citizenship.citizen",
                "validationRules" : [ ],
                "required" : "true",
                "possibleValues" : [ {
                  "value" : "YES",
                  "displayValue" : "Yes"
                }, {
                  "value" : "NO",
                  "displayValue" : "No"
                } ]
              },
              "additionalFields" : {
                "type" : "OBJECT",
                "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
                "referenceName" : "insureds.citizenship.additionalFields",
                "validationRules" : [ ],
                "objectFields" : {
                  "howLongLiveInUsa" : {
                    "type" : "ENUM",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.citizenship.additionalFields.howLongLiveInUsa",
                    "validationRules" : [ ],
                    "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.citizen), 'NO');\n  });\n}",
                    "possibleValues" : [ {
                      "value" : "LESS_THAN_12_MONTHS",
                      "displayValue" : "Less Than 12 Months"
                    }, {
                      "value" : "MORE_THAN_12_MONTHS",
                      "displayValue" : "More Than 12 Months"
                    } ]
                  },
                  "visaCalculatedExpirationDate" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.citizenship.additionalFields.visaCalculatedExpirationDate",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var value = '';\n    if (pmrl.isDefined(parent.parent.visaExpirationMonth)) {\n      value = pmrl.concat(pmrl.concat(value, ''), parent.parent.visaExpirationMonth);\n    }\n    if (pmrl.isDefined(parent.parent.visaExpirationYear)) {\n      value = pmrl.concat(pmrl.concat(value, '/'), parent.parent.visaExpirationYear);\n    }\n    return value;\n  });\n}"
                  },
                  "countryOfPermanentResidenceCalculated" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.citizenship.additionalFields.countryOfPermanentResidenceCalculated",
                    "validationRules" : [ ],
                    "required" : "false",
                    "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var returnValue;\n    if (pmrl.equal(pmrl.toUpperCase(parent.parent.countryOfPermanentResidence), 'OTHER')) {\n      returnValue = parent.parent.countryOfPermanentResidenceOther;\n    } else {\n      returnValue = parent.parent.countryOfPermanentResidence;\n    }\n    return returnValue;\n  });\n}"
                  },
                  "citizenshipAdditionalInformationComments" : {
                    "type" : "STRING",
                    "contexts" : [ "UNDERWRITING", "APPLICATION" ],
                    "referenceName" : "insureds.citizenship.additionalFields.citizenshipAdditionalInformationComments",
                    "validationRules" : [ ],
                    "required" : "false"
                  }
                }
              }
            }
          },
          "tobaccoUse" : {
            "type" : "ENUM",
            "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "insureds.tobaccoUse",
            "validationRules" : [ ],
            "required" : "true",
            "possibleValues" : [ {
              "value" : "YES",
              "displayValue" : "Yes"
            }, {
              "value" : "NO",
              "displayValue" : "No"
            } ]
          }
        },
        "minItemCount" : "1"
      },
      "additionalFields" : {
        "type" : "OBJECT",
        "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
        "referenceName" : "additionalFields",
        "validationRules" : [ ],
        "objectFields" : {
          "premiumAllowancesDiscounts" : {
            "type" : "LOOKUP",
            "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "additionalFields.premiumAllowancesDiscounts",
            "validationRules" : [ ],
            "required" : "false",
            "tableName" : "premAllowDiscTbl",
            "column" : "premiumAllowancesDiscountsValues",
            "filters" : [ "parent.specialRestrictionEmployee", "parent.premiumAllowancesDiscounts" ]
          },
          "discountAssociationName" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "additionalFields.discountAssociationName",
            "validationRules" : [ ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.parent.discountAssociationGroup, 'YES');\n  });\n}"
          },
          "discountAssociationNumber" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "additionalFields.discountAssociationNumber",
            "validationRules" : [ ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.parent.discountAssociationGroup, 'YES');\n  });\n}"
          },
          "discountAssociationJoinDate" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "additionalFields.discountAssociationJoinDate",
            "validationRules" : [ ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.parent.discountAssociationGroup, 'YES');\n  });\n}"
          },
          "discountCommonEmployerName" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "additionalFields.discountCommonEmployerName",
            "validationRules" : [ ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.parent.discountCommonEmployer, 'YES');\n  });\n}"
          },
          "discountCommonGroupNumber" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "additionalFields.discountCommonGroupNumber",
            "validationRules" : [ ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.parent.discountCommonEmployer, 'YES');\n  });\n}"
          },
          "discountCommonEmployerAddress" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "additionalFields.discountCommonEmployerAddress",
            "validationRules" : [ ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.parent.discountCommonEmployer, 'YES');\n  });\n}"
          },
          "discountCommonEmployerApplicantNames" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "additionalFields.discountCommonEmployerApplicantNames",
            "validationRules" : [ ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.parent.discountCommonEmployer, 'YES');\n  });\n}"
          },
          "discountMultiPolicyLifePolicyNumber" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "additionalFields.discountMultiPolicyLifePolicyNumber",
            "validationRules" : [ ],
            "required" : "false"
          },
          "discountMultiPolicyLtcPolicyNumber" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "additionalFields.discountMultiPolicyLtcPolicyNumber",
            "validationRules" : [ ],
            "required" : "false"
          },
          "discountHouseholdFullName" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "additionalFields.discountHouseholdFullName",
            "validationRules" : [ ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.parent.discountHousehold, 'YES');\n  });\n}"
          },
          "discountHouseholdExistingPolicyNumber" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "additionalFields.discountHouseholdExistingPolicyNumber",
            "validationRules" : [ ],
            "required" : "false"
          },
          "discountHouseholdIdentifier" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "additionalFields.discountHouseholdIdentifier",
            "validationRules" : [ ],
            "required" : "false"
          },
          "programsStudentProgram" : {
            "type" : "ENUM",
            "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "additionalFields.programsStudentProgram",
            "validationRules" : [ ],
            "required" : "false",
            "possibleValues" : [ {
              "value" : "YES",
              "displayValue" : "Yes"
            }, {
              "value" : "NO",
              "displayValue" : "No"
            } ]
          },
          "programsStudentProgramCalc" : {
            "type" : "ENUM",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "additionalFields.programsStudentProgramCalc",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var value = 'NO';\n    if (pmrl.equal(parent.parent.insureds[Big('0')].additionalFields.occupationDescription, 'STUDENT')) {\n      value = 'YES';\n    }\n    return value;\n  });\n}",
            "possibleValues" : [ {
              "value" : "YES",
              "displayValue" : "Yes"
            }, {
              "value" : "NO",
              "displayValue" : "No"
            } ]
          },
          "programsStudentProgramProgramOfStudy" : {
            "type" : "ENUM",
            "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "additionalFields.programsStudentProgramProgramOfStudy",
            "validationRules" : [ ],
            "required" : "false",
            "possibleValues" : [ {
              "value" : "ACCOUNTANTS",
              "displayValue" : "Accountants"
            }, {
              "value" : "AUDIOLOGISTS",
              "displayValue" : "Audiologists"
            }, {
              "value" : "CHIROPRACTORS",
              "displayValue" : "Chiropractors"
            }, {
              "value" : "DENTAL_HYGIENISTS",
              "displayValue" : "Dental Hygienists"
            }, {
              "value" : "DENTISTS",
              "displayValue" : "Dentists"
            }, {
              "value" : "HEALTH_CARE_TECHNICIAN",
              "displayValue" : "Health Care Technician"
            }, {
              "value" : "ENGINEER_ARCHITECTS",
              "displayValue" : "Engineer,Architects"
            }, {
              "value" : "ATTORNEY_LAWYER",
              "displayValue" : "Attorney Lawyer"
            }, {
              "value" : "NURSE_ANESTHETISTS_NURSE_MIDWIVES_NURSE_PRACTITIONERS",
              "displayValue" : "Nurse Anesthetists,Nurse Midwives,Nurse Practitioners"
            }, {
              "value" : "OCCUPATIONAL_THERAPISTS",
              "displayValue" : "Occupational Therapists"
            }, {
              "value" : "OPTOMETRISTS",
              "displayValue" : "Optometrists"
            }, {
              "value" : "PHARMACISTS",
              "displayValue" : "Pharmacists"
            }, {
              "value" : "PHYSICAL_THERAPISTS",
              "displayValue" : "Physical Therapists"
            }, {
              "value" : "PHYSICIAN_ASSISTANTS",
              "displayValue" : "Physician Assistants"
            }, {
              "value" : "PHYSICIANS",
              "displayValue" : "Physicians"
            }, {
              "value" : "PODIATRISTS",
              "displayValue" : "Podiatrists"
            }, {
              "value" : "PSYCHOLOGISTS",
              "displayValue" : "Psychologists"
            }, {
              "value" : "RADIATION_TECHNICIAN",
              "displayValue" : "Radiation Technician"
            }, {
              "value" : "REGISTERED_NURSES",
              "displayValue" : "Registered Nurses"
            }, {
              "value" : "RESPIRATORY_THERAPISTS",
              "displayValue" : "Respiratory Therapists"
            }, {
              "value" : "SPEECH_LANGUAGE_PATHOLOGISTS",
              "displayValue" : "Speech-Language Pathologists"
            }, {
              "value" : "VETERINARIANS_SMALL_ANIMAL",
              "displayValue" : "Veterinarians,Small Animal"
            }, {
              "value" : "VETERINARIANS_LARGE_ANIMAL",
              "displayValue" : "Veterinarians, Large Animal"
            }, {
              "value" : "VETERINARY_TECHNICIANS",
              "displayValue" : "Veterinary Technicians"
            } ]
          },
          "applyingWithPartnerFullName" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "additionalFields.applyingWithPartnerFullName",
            "validationRules" : [ ],
            "required" : "false"
          },
          "naturalDisasterBenefit" : {
            "type" : "ENUM",
            "contexts" : [ "ADMIN" ],
            "referenceName" : "additionalFields.naturalDisasterBenefit",
            "validationRules" : [ ],
            "required" : "false",
            "possibleValues" : [ {
              "value" : "YES",
              "displayValue" : "Yes"
            }, {
              "value" : "NO",
              "displayValue" : "No"
            } ]
          },
          "totalMonthlyBenefitAmount" : {
            "type" : "NUMBER",
            "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "additionalFields.totalMonthlyBenefitAmount",
            "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var isIndividualPaying;\n    var benefitPeriod = parent.parent.benefitPeriod;\n    var issueState = parent.parent.issueState;\n    var annualEarnedIncome = parent.parent.insureds[Big('0')].annualEarnedIncome;\n    var occupationClass = parent.parent.insureds[Big('0')].occupationClass;\n    var selfEmployed = parent.parent.insureds[Big('0')].additionalFields.selfEmployed;\n    var issueLimit = Big('0');\n    var returnValue = true;\n    var baseBenefitAmount = parent.parent.insureds[Big('0')].coverages.base[Big('0')].benefitAmount;\n    var sisBenefitAmount = Big('0');\n    var specialRestrictionEmployee = parent.specialRestrictionEmployee;\n    if (pmrl.isDefined(parent.parent.payors)) {\n      isIndividualPaying = parent.parent.payors[Big('0')].additionalFields.proposedInsuredInsuredThePayor;\n    }\n    if (pmrl.isDefined(parent.parent.insureds[Big('0')].coverages.sis) && pmrl.isDefined(parent.parent.insureds[Big('0')].coverages.sis[Big('0')].benefitAmount)) {\n      sisBenefitAmount = parent.parent.insureds[Big('0')].coverages.sis[Big('0')].benefitAmount;\n    }\n    if (pmrl.isDefined(parent.parent.insureds[Big('0')].additionalFields.issueLimit) && pmrl.notEqual(occupationClass, 'OCCUPATION_CLASS_N')) {\n      issueLimit = parent.parent.insureds[Big('0')].additionalFields.issueLimit;\n    }\n    var startingTotalBenefit = Big('0');\n    var individualPolicies = Big('0');\n    var groupPolicies = Big('0');\n    var individualExistingTotal = Big('0');\n    var groupExistingTotal = Big('0');\n    var sdiExistingTotal = Big('0');\n    if (pmrl.notEqual(specialRestrictionEmployee, \"STUDENT\")) {\n      if (pmrl.isDefined(parent.parent.insureds[Big('0')].otherCoverages)) {\n        for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n          var multiCoverageTypes = parent.parent.insureds[Big('0')].otherCoverages[i].coverageType;\n          var multipleBenefitPercentageIncome = parent.parent.insureds[Big('0')].otherCoverages[i].additionalFields.benefitAmountPercentageIncome;\n          if (pmrl.isDefined(multiCoverageTypes) && pmrl.isDefined(multipleBenefitPercentageIncome) && (pmrl.equal(multiCoverageTypes, 'INDIVIDUAL') || pmrl.equal(multiCoverageTypes, 'ASSOCIATION'))) {\n            individualPolicies = pmrl.plus(individualPolicies, Big('1'));\n            individualExistingTotal = pmrl.plus(individualExistingTotal, multipleBenefitPercentageIncome);\n          } else if (pmrl.equal(parent.parent.insureds[Big('0')].otherCoverages[i].coverageType, 'GROUP')) {\n            groupPolicies = pmrl.plus(groupPolicies, Big('1'));\n            groupExistingTotal = pmrl.plus(groupExistingTotal, multipleBenefitPercentageIncome);\n          }\n        }\n      }\n    }\n    if (pmrl.isDefined(benefitPeriod) && pmrl.isDefined(issueState) && pmrl.isDefined(specialRestrictionEmployee) && pmrl.equal(specialRestrictionEmployee, 'STATE_DI_ELIGIBILITY') && (pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_6MO') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_1YR'))) {\n      sdiExistingTotal = pmrl.rangeLookup(tables, 'sdiValuesTbl', {\n        annualEarnedIncome: annualEarnedIncome\n      }, 'annualEarnedIncome');\n      sdiExistingTotal = pmrl.exactLookup(tables, 'sdiValuesTbl', {\n        annualEarnedIncome: sdiExistingTotal,\n        issueState\n      }, 'sdiAmount');\n    }\n    if (pmrl.isDefined(benefitPeriod) && pmrl.isDefined(occupationClass) && pmrl.isDefined(parent.parent.insureds[Big('0')].birthDate) && pmrl.isDefined(specialRestrictionEmployee) && pmrl.equal(parent.parent.insureds[Big('0')].additionalFields.occupationDescription, 'STUDENT') && pmrl.equal(specialRestrictionEmployee, \"STUDENT\")) {\n      var studentStartingTotalBenefit = pmrl.exactLookup(tables, \"studentMaxTbl\", {\n        occupationSpecialty: parent.parent.insureds[Big('0')].additionalFields.occupationSpecialty\n      }, \"maxBenefit\");\n      if (!pmrl.isDefined(studentStartingTotalBenefit)) {\n        startingTotalBenefit = Big('0');\n      } else {\n        startingTotalBenefit = studentStartingTotalBenefit;\n      }\n    } else if (pmrl.isDefined(benefitPeriod) && pmrl.isDefined(annualEarnedIncome) && pmrl.greaterThanEqual(annualEarnedIncome, Big('15000')) && pmrl.isDefined(occupationClass) && pmrl.isDefined(selfEmployed) && pmrl.isDefined(parent.parent.insureds[Big('0')].birthDate) && pmrl.isDefined(specialRestrictionEmployee) && pmrl.isDefined(isIndividualPaying) && pmrl.equal(individualPolicies, Big('0')) && pmrl.equal(groupPolicies, Big('0'))) {\n      if (pmrl.equal(selfEmployed, \"NO\")) {\n        if (pmrl.equal(isIndividualPaying, \"YES\")) {\n          startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeQualTotalTbl\", {\n            annualEarnedIncome\n          }, \"total\");\n        } else {\n          startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeErQualTotalTbl\", {\n            annualEarnedIncome\n          }, \"total\");\n        }\n      } else {\n        if (pmrl.equal(isIndividualPaying, \"YES\")) {\n          startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeSeQualTotalTbl\", {\n            annualEarnedIncome\n          }, \"total\");\n        } else {\n          startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeErSeQualTotalTbl\", {\n            annualEarnedIncome\n          }, \"total\");\n        }\n      }\n    } else if (pmrl.isDefined(benefitPeriod) && pmrl.isDefined(annualEarnedIncome) && pmrl.greaterThanEqual(annualEarnedIncome, Big('15000')) && pmrl.isDefined(occupationClass) && pmrl.isDefined(specialRestrictionEmployee) && pmrl.isDefined(selfEmployed) && pmrl.isDefined(parent.parent.insureds[Big('0')].birthDate) && (pmrl.greaterThan(individualPolicies, Big('0')) || pmrl.greaterThan(groupPolicies, Big('0')))) {\n      if (pmrl.equal(selfEmployed, \"NO\")) {\n        if (pmrl.equal(isIndividualPaying, 'YES')) {\n          if (pmrl.equal(groupPolicies, Big('0'))) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeGrpEe\", {\n              annualEarnedIncome\n            }, \"total\");\n          } else {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeGrpBuyEe\", {\n              annualEarnedIncome\n            }, \"total\");\n          }\n        } else {\n          if (pmrl.equal(groupPolicies, Big('0'))) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeGrpEr\", {\n              annualEarnedIncome\n            }, \"total\");\n          } else {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeGrpBuyEr\", {\n              annualEarnedIncome\n            }, \"total\");\n          }\n        }\n      } else {\n        if (pmrl.equal(isIndividualPaying, 'YES')) {\n          if (pmrl.equal(groupPolicies, Big('0'))) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeGrpEESe\", {\n              annualEarnedIncome\n            }, \"total\");\n          } else {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeGrpBuyEeSe\", {\n              annualEarnedIncome\n            }, \"total\");\n          }\n        } else {\n          if (pmrl.equal(groupPolicies, Big('0'))) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeGrpErSe\", {\n              annualEarnedIncome\n            }, \"total\");\n          } else {\n            startingTotalBenefit = pmrl.rangeLookup(tables, \"incomeGrpBuyErSe\", {\n              annualEarnedIncome\n            }, \"total\");\n          }\n        }\n      }\n    }\n    if (pmrl.greaterThan(individualPolicies, Big('0')) && pmrl.equal(groupPolicies, Big('0'))) {\n      startingTotalBenefit = pmrl.minus(pmrl.minus(startingTotalBenefit, individualExistingTotal), sdiExistingTotal);\n    } else if (pmrl.equal(individualPolicies, Big('0')) && pmrl.greaterThan(groupPolicies, Big('0'))) {\n      if (pmrl.equal(isIndividualPaying, 'YES')) {\n        startingTotalBenefit = pmrl.minus(pmrl.minus(startingTotalBenefit, pmrl.times(groupExistingTotal, Big('.8'))), sdiExistingTotal);\n      } else {\n        startingTotalBenefit = pmrl.minus(pmrl.minus(startingTotalBenefit, groupExistingTotal), sdiExistingTotal);\n      }\n    } else if (pmrl.greaterThan(individualPolicies, Big('0')) && pmrl.greaterThan(groupPolicies, Big('0'))) {\n      if (pmrl.equal(isIndividualPaying, 'YES')) {\n        startingTotalBenefit = pmrl.minus(pmrl.minus(startingTotalBenefit, sdiExistingTotal), pmrl.plus(pmrl.times(groupExistingTotal, Big('.8')), individualExistingTotal));\n      } else {\n        startingTotalBenefit = pmrl.minus(pmrl.minus(pmrl.minus(startingTotalBenefit, groupExistingTotal), individualExistingTotal), sdiExistingTotal);\n      }\n    } else if (pmrl.equal(individualPolicies, Big('0')) && pmrl.equal(groupPolicies, Big('0'))) {\n      startingTotalBenefit = pmrl.minus(startingTotalBenefit, sdiExistingTotal);\n    }\n    if (pmrl.greaterThan(startingTotalBenefit, issueLimit)) {\n      startingTotalBenefit = issueLimit;\n    }\n    startingTotalBenefit = pmrl.times(pmrl.round(pmrl.div(pmrl.minus(startingTotalBenefit, Big('50')), Big('100')), Big('0')), Big('100'));\n    if (pmrl.lessThanEqual(startingTotalBenefit, Big('0'))) {\n      startingTotalBenefit = Big('0');\n    }\n    if (pmrl.greaterThan(pmrl.length(parent.parent.insureds[Big('0')].coverages.sis), Big('0')) && pmrl.isDefined(baseBenefitAmount) && pmrl.isDefined(parent.parent.insureds[Big('0')].coverages.sis[Big('0')].benefitAmount)) {\n      if (pmrl.greaterThan(sisBenefitAmount, startingTotalBenefit)) {\n        returnValue = pmrl.concat('The Total Benefit allowed is $', startingTotalBenefit, '. Reduce SIS Benefit.');\n      } else if (pmrl.greaterThan(pmrl.plus(baseBenefitAmount, sisBenefitAmount), startingTotalBenefit)) {\n        returnValue = pmrl.concat('The combined total benefit is greater than $', startingTotalBenefit, '.');\n      }\n    } else if (pmrl.isDefined(baseBenefitAmount)) {\n      if (pmrl.greaterThan(baseBenefitAmount, startingTotalBenefit)) {\n        returnValue = pmrl.concat('The Total Benefit allowed is $', startingTotalBenefit, '. Reduce Base Benefit.');\n      }\n    }\n    if (pmrl.isDefined(baseBenefitAmount) && pmrl.greaterThan(baseBenefitAmount, Big('0')) && pmrl.lessThan(pmrl.plus(baseBenefitAmount, sisBenefitAmount), Big('300'))) {\n      returnValue = 'Combined total benefit must be at least $300.';\n    }\n    return returnValue;\n  });\n}" ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var totalMonthly = Big('0');\n    for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.parent.insureds[Big('0')].coverages.base)); i = pmrl.plus(i, Big('1'))) {\n      if (pmrl.isDefined(parent.parent.insureds[Big('0')].coverages.base[i].benefitAmount)) {\n        totalMonthly = pmrl.plus(totalMonthly, parent.parent.insureds[Big('0')].coverages.base[i].benefitAmount);\n      }\n    }\n    for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.parent.insureds[Big('0')].coverages.sis)); i = pmrl.plus(i, Big('1'))) {\n      if (pmrl.isDefined(parent.parent.insureds[Big('0')].coverages.sis[i].benefitAmount)) {\n        totalMonthly = pmrl.plus(totalMonthly, parent.parent.insureds[Big('0')].coverages.sis[i].benefitAmount);\n      }\n    }\n    return totalMonthly;\n  });\n}"
          },
          "programsStudentProgramProgramOfStudyCalc" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "additionalFields.programsStudentProgramProgramOfStudyCalc",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var value = ' ';\n    if (pmrl.equal(parent.parent.insureds[Big('0')].additionalFields.occupationDescription, 'STUDENT')) {\n      value = parent.parent.insureds[Big('0')].additionalFields.occupationSpecialty;\n    }\n    return value;\n  });\n}"
          },
          "totalMonthlyMaximumCalc" : {
            "type" : "NUMBER",
            "contexts" : [ "QUOTE", "APPLICATION" ],
            "referenceName" : "additionalFields.totalMonthlyMaximumCalc",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var isIndividualPaying;\n    var benefitPeriod = parent.parent.benefitPeriod;\n    var issueState = parent.parent.issueState;\n    var annualEarnedIncome = parent.parent.insureds[Big('0')].annualEarnedIncome;\n    var occupationClass = parent.parent.insureds[Big('0')].occupationClass;\n    var selfEmployed = parent.parent.insureds[Big('0')].additionalFields.selfEmployed;\n    var specialRestrictionEmployee = parent.specialRestrictionEmployee;\n    var issueLimit = Big('0');\n    if (pmrl.isDefined(parent.parent.payors)) {\n      isIndividualPaying = parent.parent.payors[Big('0')].additionalFields.proposedInsuredInsuredThePayor;\n    }\n    if (pmrl.isDefined(parent.parent.insureds[Big('0')].additionalFields.issueLimit) && pmrl.notEqual(occupationClass, 'OCCUPATION_CLASS_N')) {\n      issueLimit = parent.parent.insureds[Big('0')].additionalFields.issueLimit;\n    }\n    var startingTotalBenefit = Big('0');\n    var individualPolicies = Big('0');\n    var groupPolicies = Big('0');\n    var individualExistingTotal = Big('0');\n    var groupExistingTotal = Big('0');\n    var sdiExistingTotal = Big('0');\n    if (pmrl.notEqual(specialRestrictionEmployee, 'STUDENT')) {\n      if (pmrl.greaterThan(pmrl.length(parent.parent.insureds[Big('0')].otherCoverages), Big('0'))) {\n        for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n          var multiCoverageTypes = parent.parent.insureds[Big('0')].otherCoverages[i].coverageType;\n          var multipleBenefitPercentageIncome = parent.parent.insureds[Big('0')].otherCoverages[i].additionalFields.benefitAmountPercentageIncome;\n          if (pmrl.isDefined(multiCoverageTypes) && pmrl.isDefined(multipleBenefitPercentageIncome) && (pmrl.equal(multiCoverageTypes, 'INDIVIDUAL') || pmrl.equal(multiCoverageTypes, 'ASSOCIATION'))) {\n            individualPolicies = pmrl.plus(individualPolicies, Big('1'));\n            individualExistingTotal = pmrl.plus(individualExistingTotal, multipleBenefitPercentageIncome);\n          } else if (pmrl.equal(parent.parent.insureds[Big('0')].otherCoverages[i].coverageType, 'GROUP')) {\n            groupPolicies = pmrl.plus(groupPolicies, Big('1'));\n            groupExistingTotal = pmrl.plus(groupExistingTotal, multipleBenefitPercentageIncome);\n          }\n        }\n      }\n    }\n    if (pmrl.isDefined(benefitPeriod) && pmrl.isDefined(issueState) && pmrl.isDefined(specialRestrictionEmployee) && pmrl.equal(specialRestrictionEmployee, 'STATE_DI_ELIGIBILITY') && (pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_6MO') || pmrl.equal(benefitPeriod, 'BENEFIT_PERIOD_1YR'))) {\n      sdiExistingTotal = pmrl.rangeLookup(tables, 'sdiValuesTbl', {\n        annualEarnedIncome: annualEarnedIncome\n      }, 'annualEarnedIncome');\n      sdiExistingTotal = pmrl.exactLookup(tables, 'sdiValuesTbl', {\n        annualEarnedIncome: sdiExistingTotal,\n        issueState\n      }, 'sdiAmount');\n    }\n    if (pmrl.isDefined(benefitPeriod) && pmrl.isDefined(occupationClass) && pmrl.isDefined(parent.parent.insureds[Big('0')].birthDate) && pmrl.isDefined(specialRestrictionEmployee) && pmrl.equal(parent.parent.insureds[Big('0')].additionalFields.occupationDescription, 'STUDENT') && pmrl.equal(specialRestrictionEmployee, 'STUDENT')) {\n      var studentStartingTotalBenefit = pmrl.exactLookup(tables, 'studentMaxTbl', {\n        occupationSpecialty: parent.parent.insureds[Big('0')].additionalFields.occupationSpecialty\n      }, 'maxBenefit');\n      if (!pmrl.isDefined(studentStartingTotalBenefit)) {\n        startingTotalBenefit = Big('0');\n      } else {\n        startingTotalBenefit = studentStartingTotalBenefit;\n      }\n    } else if (pmrl.isDefined(benefitPeriod) && pmrl.isDefined(annualEarnedIncome) && pmrl.greaterThanEqual(annualEarnedIncome, Big('15000')) && pmrl.isDefined(occupationClass) && pmrl.isDefined(specialRestrictionEmployee) && pmrl.isDefined(selfEmployed) && pmrl.isDefined(parent.parent.insureds[Big('0')].birthDate) && pmrl.isDefined(isIndividualPaying) && pmrl.equal(individualPolicies, Big('0')) && pmrl.equal(groupPolicies, Big('0'))) {\n      if (pmrl.equal(selfEmployed, 'NO')) {\n        if (pmrl.equal(isIndividualPaying, 'YES')) {\n          startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeQualTotalTbl', {\n            annualEarnedIncome\n          }, 'total');\n        } else {\n          startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeErQualTotalTbl', {\n            annualEarnedIncome\n          }, 'total');\n        }\n      } else {\n        if (pmrl.equal(isIndividualPaying, 'YES')) {\n          startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeSeQualTotalTbl', {\n            annualEarnedIncome\n          }, 'total');\n        } else {\n          startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeErSeQualTotalTbl', {\n            annualEarnedIncome\n          }, 'total');\n        }\n      }\n    } else if (pmrl.isDefined(benefitPeriod) && pmrl.isDefined(annualEarnedIncome) && pmrl.greaterThanEqual(annualEarnedIncome, Big('15000')) && pmrl.isDefined(occupationClass) && pmrl.isDefined(specialRestrictionEmployee) && pmrl.isDefined(selfEmployed) && pmrl.isDefined(parent.parent.insureds[Big('0')].birthDate) && (pmrl.greaterThan(individualPolicies, Big('0')) || pmrl.greaterThan(groupPolicies, Big('0')))) {\n      if (pmrl.equal(selfEmployed, 'NO')) {\n        if (pmrl.equal(isIndividualPaying, 'YES')) {\n          if (pmrl.equal(groupPolicies, Big('0'))) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeGrpEe', {\n              annualEarnedIncome\n            }, 'total');\n          } else {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeGrpBuyEe', {\n              annualEarnedIncome\n            }, 'total');\n          }\n        } else {\n          if (pmrl.equal(groupPolicies, Big('0'))) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeGrpEr', {\n              annualEarnedIncome\n            }, 'total');\n          } else {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeGrpBuyEr', {\n              annualEarnedIncome\n            }, 'total');\n          }\n        }\n      } else {\n        if (pmrl.equal(isIndividualPaying, 'YES')) {\n          if (pmrl.equal(groupPolicies, Big('0'))) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeGrpEESe', {\n              annualEarnedIncome\n            }, 'total');\n          } else {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeGrpBuyEeSe', {\n              annualEarnedIncome\n            }, 'total');\n          }\n        } else {\n          if (pmrl.equal(groupPolicies, Big('0'))) {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeGrpErSe', {\n              annualEarnedIncome\n            }, 'total');\n          } else {\n            startingTotalBenefit = pmrl.rangeLookup(tables, 'incomeGrpBuyErSe', {\n              annualEarnedIncome\n            }, 'total');\n          }\n        }\n      }\n    }\n    if (pmrl.greaterThan(individualPolicies, Big('0')) && pmrl.equal(groupPolicies, Big('0'))) {\n      startingTotalBenefit = pmrl.minus(pmrl.minus(startingTotalBenefit, individualExistingTotal), sdiExistingTotal);\n    } else if (pmrl.equal(individualPolicies, Big('0')) && pmrl.greaterThan(groupPolicies, Big('0'))) {\n      if (pmrl.equal(isIndividualPaying, 'YES')) {\n        startingTotalBenefit = pmrl.minus(pmrl.minus(startingTotalBenefit, pmrl.times(groupExistingTotal, Big('.8'))), sdiExistingTotal);\n      } else {\n        startingTotalBenefit = pmrl.minus(pmrl.minus(startingTotalBenefit, groupExistingTotal), sdiExistingTotal);\n      }\n    } else if (pmrl.greaterThan(individualPolicies, Big('0')) && pmrl.greaterThan(groupPolicies, Big('0'))) {\n      if (pmrl.equal(isIndividualPaying, 'YES')) {\n        startingTotalBenefit = pmrl.minus(pmrl.minus(startingTotalBenefit, sdiExistingTotal), pmrl.plus(pmrl.times(groupExistingTotal, Big('.8')), individualExistingTotal));\n      } else {\n        startingTotalBenefit = pmrl.minus(pmrl.minus(pmrl.minus(startingTotalBenefit, groupExistingTotal), individualExistingTotal), sdiExistingTotal);\n      }\n    } else if (pmrl.equal(individualPolicies, Big('0')) && pmrl.equal(groupPolicies, Big('0'))) {\n      startingTotalBenefit = pmrl.minus(startingTotalBenefit, sdiExistingTotal);\n    }\n    if (pmrl.greaterThan(startingTotalBenefit, issueLimit)) {\n      startingTotalBenefit = issueLimit;\n    }\n    startingTotalBenefit = pmrl.times(pmrl.round(pmrl.div(pmrl.minus(startingTotalBenefit, Big('50')), Big('100')), Big('0')), Big('100'));\n    if (pmrl.lessThanEqual(startingTotalBenefit, Big('0'))) {\n      startingTotalBenefit = Big('0');\n    }\n    return startingTotalBenefit;\n  });\n}"
          },
          "statSeries" : {
            "type" : "NUMBER",
            "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "additionalFields.statSeries",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if ((pmrl.isDefined(parent.parent.distributionChannel) || pmrl.isDefined(parent.parent.policyRenewability) || pmrl.isDefined(parent.parent.productInfo.productName)) && (pmrl.equal(parent.parent.distributionChannel, 'AGENCY') && pmrl.equal(parent.parent.policyRenewability, 'GUARANTEED_RENEWABLE'))) {\n      valid = Big('50056');\n    } else {\n      if (pmrl.equal(parent.parent.distributionChannel, 'AGENCY') && pmrl.equal(parent.parent.policyRenewability, 'NON_CANCELLABLE')) {\n        valid = Big('50054');\n      } else {\n        if (pmrl.equal(parent.parent.distributionChannel, 'BROKERAGE') && pmrl.equal(parent.parent.policyRenewability, 'GUARANTEED_RENEWABLE')) {\n          valid = Big('50060');\n        } else {\n          if (pmrl.equal(parent.parent.distributionChannel, 'BROKERAGE') && pmrl.equal(parent.parent.policyRenewability, 'NON_CANCELLABLE')) {\n            valid = Big('50058');\n          }\n        }\n      }\n    }\n    return valid;\n  });\n}"
          },
          "specialRestrictionEmployee" : {
            "type" : "LOOKUP",
            "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "additionalFields.specialRestrictionEmployee",
            "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid = true;\n    if (pmrl.isDefined(parent.premiumAllowancesDiscounts) && pmrl.equal(parent.specialRestrictionEmployee, \"STUDENT\")) {\n      valid = 'Discounts are not eligible with the Student Program.';\n    } else if (pmrl.equal(parent.parent.insureds[Big('0')].additionalFields.occupationDescription, 'STUDENT') && pmrl.isDefined(parent.specialRestrictionEmployee) && pmrl.notEqual(parent.specialRestrictionEmployee, 'STUDENT')) {\n      valid = 'Based on occupation selection, select Student in this field.';\n    }\n    return valid;\n  });\n}" ],
            "required" : "true",
            "tableName" : "specRestrictTbl",
            "column" : "specialRestrictionEmployee",
            "filters" : [ "parent.parent.issueState" ]
          },
          "programsMultiLife" : {
            "type" : "ENUM",
            "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "additionalFields.programsMultiLife",
            "validationRules" : [ ],
            "required" : "false",
            "possibleValues" : [ {
              "value" : "YES",
              "displayValue" : "Yes"
            }, {
              "value" : "NO",
              "displayValue" : "No"
            } ]
          },
          "programsMultiLifeGroupNumber" : {
            "type" : "STRING",
            "contexts" : [ "QUOTE", "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "additionalFields.programsMultiLifeGroupNumber",
            "validationRules" : [ ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.programsMultiLife, 'YES');\n  });\n}"
          },
          "discountAmount" : {
            "type" : "NUMBER",
            "contexts" : [ "QUOTE", "UNDERWRITING", "ADMIN", "APPLICATION" ],
            "referenceName" : "additionalFields.discountAmount",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var discountAmount = Big('0');\n    if (pmrl.isDefined(rates)) {\n      if (pmrl.isDefined(parent.parent.insureds[Big('0')].coverages)) {\n        for (var record = Big('0'); pmrl.lessThan(record, pmrl.length(parent.parent.insureds[Big('0')].coverages.base)); record = pmrl.plus(record, Big('1'))) {\n          discountAmount = pmrl.plus(discountAmount, parent.parent.insureds[Big('0')].coverages.base[record].additionalFields.discountAmount);\n        }\n        if (pmrl.greaterThan(pmrl.length(parent.parent.insureds[Big('0')].coverages.sis), Big('0'))) {\n          for (var record = Big('0'); pmrl.lessThan(record, pmrl.length(parent.parent.insureds[Big('0')].coverages.sis)); record = pmrl.plus(record, Big('1'))) {\n            discountAmount = pmrl.plus(discountAmount, parent.parent.insureds[Big('0')].coverages.sis[record].additionalFields.discountAmount);\n          }\n        }\n        var DECIMAL_PLACES_TO_ROUND = Big('2');\n        discountAmount = pmrl.round(discountAmount, DECIMAL_PLACES_TO_ROUND);\n      }\n    }\n    return discountAmount;\n  });\n}"
          },
          "policyDiscountPercent" : {
            "type" : "NUMBER",
            "contexts" : [ "QUOTE", "ADMIN", "APPLICATION" ],
            "referenceName" : "additionalFields.policyDiscountPercent",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var finalDiscountPercent = Big('0');\n    if (pmrl.isDefined(rates)) {\n      var associationDiscount = Big('0');\n      var multiLifeDiscount = Big('0');\n      var multiPolicyDiscount = Big('0');\n      var selfEmployedDiscount = Big('0');\n      var spouseDiscount = Big('0');\n      var commonEmployerDiscount = Big('0');\n      var DECIMAL_PLACES_TO_ROUND = Big('2');\n      var MINIMUM_PREMIUM_AMOUNT = Big('.01');\n      var SELECTED_YES = 'YES';\n      if (pmrl.equal(parent.parent.discountAssociationGroup, SELECTED_YES)) {\n        associationDiscount = Big('0.15');\n      }\n      var associationDiscountValue = pmrl.minus(Big('1'), associationDiscount);\n      if (pmrl.equal(parent.parent.additionalFields.programsMultiLife, SELECTED_YES)) {\n        multiLifeDiscount = Big('0.20');\n      }\n      var multiLifeDiscountValue = pmrl.minus(Big('1'), multiLifeDiscount);\n      if (pmrl.equal(parent.parent.discountMultiPolicy, SELECTED_YES)) {\n        multiPolicyDiscount = Big('0.10');\n      }\n      var multiPolicyDiscountValue = pmrl.minus(Big('1'), multiPolicyDiscount);\n      if (pmrl.equal(parent.parent.discountSelfEmployed, SELECTED_YES)) {\n        selfEmployedDiscount = Big('0.15');\n      }\n      var selfEmployedDiscountValue = pmrl.minus(Big('1'), selfEmployedDiscount);\n      if (pmrl.equal(parent.parent.discountHousehold, SELECTED_YES)) {\n        spouseDiscount = Big('0.10');\n      }\n      var spouseDiscountValue = pmrl.minus(Big('1'), spouseDiscount);\n      if (pmrl.equal(parent.parent.discountCommonEmployer, SELECTED_YES)) {\n        commonEmployerDiscount = Big('0.15');\n      }\n      var commonEmployerDiscountValue = pmrl.minus(Big('1'), commonEmployerDiscount);\n      finalDiscountPercent = pmrl.round(pmrl.max(pmrl.times(pmrl.times(pmrl.times(pmrl.times(pmrl.times(associationDiscountValue, multiLifeDiscountValue), multiPolicyDiscountValue), selfEmployedDiscountValue), spouseDiscountValue), commonEmployerDiscountValue), Big('0.7')), Big('5'));\n    }\n    return finalDiscountPercent;\n  });\n}"
          },
          "policyFactorPercent" : {
            "type" : "NUMBER",
            "contexts" : [ "QUOTE", "ADMIN", "APPLICATION" ],
            "referenceName" : "additionalFields.policyFactorPercent",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var policyProductPercent = Big('0');\n    if (pmrl.isDefined(rates)) {\n      policyProductPercent = pmrl.times(pmrl.times(pmrl.times(rates[Big('0')].occupationClassFactors, rates[Big('0')].tobaccoFactor), rates[Big('0')].uwClassFactors), rates[Big('0')].modalFactors);\n    }\n    return policyProductPercent;\n  });\n}"
          },
          "reasonToBelieveReplacing" : {
            "type" : "ENUM",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "additionalFields.reasonToBelieveReplacing",
            "validationRules" : [ ],
            "required" : "true",
            "possibleValues" : [ {
              "value" : "YES",
              "displayValue" : "Yes"
            }, {
              "value" : "NO",
              "displayValue" : "No"
            } ]
          },
          "explainIfNotAskedEachQuestion" : {
            "type" : "STRING",
            "contexts" : [ "APPLICATION" ],
            "referenceName" : "additionalFields.explainIfNotAskedEachQuestion",
            "validationRules" : [ ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.askedEachQuestion, 'NO');\n  });\n}"
          },
          "conductedInterviewInPerson" : {
            "type" : "ENUM",
            "contexts" : [ "APPLICATION" ],
            "referenceName" : "additionalFields.conductedInterviewInPerson",
            "validationRules" : [ ],
            "required" : "true",
            "possibleValues" : [ {
              "value" : "YES",
              "displayValue" : "Yes"
            }, {
              "value" : "NO",
              "displayValue" : "No"
            } ]
          },
          "explainIfNotInterviewInPerson" : {
            "type" : "STRING",
            "contexts" : [ "APPLICATION" ],
            "referenceName" : "additionalFields.explainIfNotInterviewInPerson",
            "validationRules" : [ ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.conductedInterviewInPerson, 'NO');\n  });\n}"
          },
          "askedEachQuestion" : {
            "type" : "ENUM",
            "contexts" : [ "APPLICATION" ],
            "referenceName" : "additionalFields.askedEachQuestion",
            "validationRules" : [ ],
            "required" : "true",
            "possibleValues" : [ {
              "value" : "YES",
              "displayValue" : "Yes"
            }, {
              "value" : "NO",
              "displayValue" : "No"
            } ]
          },
          "policyHierarchyName" : {
            "type" : "STRING",
            "contexts" : [ "UNDERWRITING", "APPLICATION" ],
            "referenceName" : "additionalFields.policyHierarchyName",
            "validationRules" : [ ],
            "required" : "true"
          },
          "totalPremiumBeforeDiscount" : {
            "type" : "NUMBER",
            "contexts" : [ "QUOTE", "ADMIN", "APPLICATION" ],
            "referenceName" : "additionalFields.totalPremiumBeforeDiscount",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var premiumAmount = Big('0');\n    if (pmrl.isDefined(rates)) {\n      if (pmrl.isDefined(parent.parent.insureds[Big('0')].coverages)) {\n        if (pmrl.greaterThan(pmrl.length(parent.parent.insureds[Big('0')].coverages.base), Big('0'))) {\n          for (var record = Big('0'); pmrl.lessThan(record, pmrl.length(parent.parent.insureds[Big('0')].coverages.base)); record = pmrl.plus(record, Big('1'))) {\n            premiumAmount = pmrl.plus(premiumAmount, parent.parent.insureds[Big('0')].coverages.base[record].additionalFields.premBeforeDiscount);\n          }\n        }\n        if (pmrl.greaterThan(pmrl.length(parent.parent.insureds[Big('0')].coverages.sis), Big('0'))) {\n          for (var record = Big('0'); pmrl.lessThan(record, pmrl.length(parent.parent.insureds[Big('0')].coverages.sis)); record = pmrl.plus(record, Big('1'))) {\n            premiumAmount = pmrl.plus(premiumAmount, parent.parent.insureds[Big('0')].coverages.sis[record].additionalFields.premBeforeDiscount);\n          }\n        }\n        if (pmrl.greaterThan(pmrl.length(parent.parent.insureds[Big('0')].coverages.futureInsurabilityOptionRider), Big('0'))) {\n          premiumAmount = pmrl.plus(premiumAmount, parent.parent.insureds[Big('0')].coverages.futureInsurabilityOptionRider[Big('0')].premiumAmount);\n        }\n        if (pmrl.greaterThan(pmrl.length(parent.parent.insureds[Big('0')].coverages.autoIncreaseBenefitRider), Big('0'))) {\n          premiumAmount = pmrl.plus(premiumAmount, parent.parent.insureds[Big('0')].coverages.autoIncreaseBenefitRider[Big('0')].premiumAmount);\n        }\n      }\n    }\n    return premiumAmount;\n  });\n}"
          },
          "accumulationPeriod" : {
            "type" : "NUMBER",
            "contexts" : [ "ADMIN" ],
            "referenceName" : "additionalFields.accumulationPeriod",
            "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid = true;\n    if (pmrl.equal(parent.accumulationPeriod, \"Error\")) {\n      valid = \"Error\";\n    }\n    return valid;\n  });\n}" ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var value;\n    if (pmrl.equal(parent.parent.eliminationPeriod, 'ELIMINATION_PERIOD_30_DAYS')) {\n      value = '60';\n    } else if (pmrl.equal(parent.parent.eliminationPeriod, 'ELIMINATION_PERIOD_60_DAYS')) {\n      value = '120';\n    } else if (pmrl.equal(parent.parent.eliminationPeriod, 'ELIMINATION_PERIOD_90_DAYS')) {\n      value = '180';\n    } else if (pmrl.equal(parent.parent.eliminationPeriod, 'ELIMINATION_PERIOD_180_DAYS')) {\n      value = '360';\n    } else if (pmrl.equal(parent.parent.eliminationPeriod, 'ELIMINATION_PERIOD_365_DAYS')) {\n      value = '540';\n    } else if (pmrl.equal(parent.parent.eliminationPeriod, 'ELIMINATION_PERIOD_730_DAYS')) {\n      value = '1095';\n    } else {\n      value = 'Error';\n    }\n    return value;\n  });\n}"
          },
          "discountPercent" : {
            "type" : "NUMBER",
            "contexts" : [ "ADMIN" ],
            "referenceName" : "additionalFields.discountPercent",
            "validationRules" : [ ],
            "required" : "false",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var discountPercent = Big('0');\n    if (pmrl.isDefined(parent.policyDiscountPercent)) {\n      var discountPercent = pmrl.minus(Big('1'), parent.policyDiscountPercent);\n    }\n    return discountPercent;\n  });\n}"
          },
          "policyDecision" : {
            "type" : "OBJECT",
            "contexts" : [ "ADMIN" ],
            "referenceName" : "additionalFields.policyDecision",
            "validationRules" : [ ],
            "objectFields" : {
              "premiumAdjustment" : {
                "type" : "ENUM",
                "contexts" : [ "ADMIN" ],
                "referenceName" : "additionalFields.policyDecision.premiumAdjustment",
                "validationRules" : [ ],
                "required" : "true",
                "possibleValues" : [ {
                  "value" : "TRUE",
                  "displayValue" : "True"
                }, {
                  "value" : "FALSE",
                  "displayValue" : "False"
                } ]
              },
              "premiumAdjustmentText" : {
                "type" : "STRING",
                "contexts" : [ "ADMIN" ],
                "referenceName" : "additionalFields.policyDecision.premiumAdjustmentText",
                "validationRules" : [ ],
                "required" : "false"
              },
              "premiumAdjustmentType" : {
                "type" : "ENUM",
                "contexts" : [ "ADMIN" ],
                "referenceName" : "additionalFields.policyDecision.premiumAdjustmentType",
                "validationRules" : [ ],
                "required" : "false",
                "possibleValues" : [ {
                  "value" : "INCREASE",
                  "displayValue" : "increase"
                }, {
                  "value" : "DECREASE",
                  "displayValue" : "decrease"
                } ]
              },
              "premiumAdjustmentPct" : {
                "type" : "STRING",
                "contexts" : [ "ADMIN" ],
                "referenceName" : "additionalFields.policyDecision.premiumAdjustmentPct",
                "validationRules" : [ ],
                "required" : "false"
              },
              "permanentExclusion" : {
                "type" : "ENUM",
                "contexts" : [ "ADMIN" ],
                "referenceName" : "additionalFields.policyDecision.permanentExclusion",
                "validationRules" : [ ],
                "required" : "true",
                "possibleValues" : [ {
                  "value" : "TRUE",
                  "displayValue" : "True"
                }, {
                  "value" : "FALSE",
                  "displayValue" : "False"
                } ]
              },
              "permanentExclusionDetail" : {
                "type" : "LIST",
                "contexts" : [ "ADMIN" ],
                "referenceName" : "additionalFields.policyDecision.permanentExclusionDetail",
                "validationRules" : [ ],
                "objectFields" : {
                  "code" : {
                    "type" : "LOOKUP",
                    "contexts" : [ "ADMIN" ],
                    "referenceName" : "additionalFields.policyDecision.permanentExclusionDetail.code",
                    "validationRules" : [ ],
                    "required" : "false",
                    "tableName" : "policyExclusionTbl",
                    "column" : "code"
                  },
                  "detail" : {
                    "type" : "STRING",
                    "contexts" : [ "ADMIN" ],
                    "referenceName" : "additionalFields.policyDecision.permanentExclusionDetail.detail",
                    "validationRules" : [ ],
                    "required" : "false"
                  }
                }
              },
              "reviewableExclusion" : {
                "type" : "ENUM",
                "contexts" : [ "ADMIN" ],
                "referenceName" : "additionalFields.policyDecision.reviewableExclusion",
                "validationRules" : [ ],
                "required" : "true",
                "possibleValues" : [ {
                  "value" : "TRUE",
                  "displayValue" : "True"
                }, {
                  "value" : "FALSE",
                  "displayValue" : "False"
                } ]
              },
              "reviewableExclusionMonths" : {
                "type" : "STRING",
                "contexts" : [ "ADMIN" ],
                "referenceName" : "additionalFields.policyDecision.reviewableExclusionMonths",
                "validationRules" : [ ],
                "required" : "false"
              },
              "reviewableExclusionDetail" : {
                "type" : "LIST",
                "contexts" : [ "ADMIN" ],
                "referenceName" : "additionalFields.policyDecision.reviewableExclusionDetail",
                "validationRules" : [ ],
                "objectFields" : {
                  "code" : {
                    "type" : "LOOKUP",
                    "contexts" : [ "ADMIN" ],
                    "referenceName" : "additionalFields.policyDecision.reviewableExclusionDetail.code",
                    "validationRules" : [ ],
                    "required" : "false",
                    "tableName" : "policyExclusionTbl",
                    "column" : "code"
                  },
                  "detail" : {
                    "type" : "STRING",
                    "contexts" : [ "ADMIN" ],
                    "referenceName" : "additionalFields.policyDecision.reviewableExclusionDetail.detail",
                    "validationRules" : [ ],
                    "required" : "false"
                  }
                }
              },
              "amendmentsList" : {
                "type" : "LIST",
                "contexts" : [ "ADMIN" ],
                "referenceName" : "additionalFields.policyDecision.amendmentsList",
                "validationRules" : [ ],
                "objectFields" : {
                  "amendmentsText" : {
                    "type" : "STRING",
                    "contexts" : [ "ADMIN" ],
                    "referenceName" : "additionalFields.policyDecision.amendmentsList.amendmentsText",
                    "validationRules" : [ ],
                    "required" : "false"
                  }
                }
              },
              "policyStatus" : {
                "type" : "ENUM",
                "contexts" : [ "ADMIN" ],
                "referenceName" : "additionalFields.policyDecision.policyStatus",
                "validationRules" : [ ],
                "required" : "true",
                "possibleValues" : [ {
                  "value" : "PENDING",
                  "displayValue" : "Pending"
                }, {
                  "value" : "INCOMPLETE",
                  "displayValue" : "Incomplete"
                }, {
                  "value" : "DECLINE",
                  "displayValue" : "Decline"
                }, {
                  "value" : "WITHDRAWN",
                  "displayValue" : "Withdrawn"
                }, {
                  "value" : "ISSUE",
                  "displayValue" : "Issue"
                }, {
                  "value" : "DEATH",
                  "displayValue" : "Death"
                } ]
              },
              "declineCode" : {
                "type" : "LIST",
                "contexts" : [ "ADMIN" ],
                "referenceName" : "additionalFields.policyDecision.declineCode",
                "validationRules" : [ "{\n  (function (parent, context, tables, rates) {\n    var valid = true;\n    if (pmrl.equal(parent.policyStatus, \"DECLINE\") && pmrl.lessThan(pmrl.length(parent.declineCode), Big('1'))) {\n      valid = 'At least one decline code must be entered';\n    }\n    return valid;\n  });\n}" ],
                "objectFields" : {
                  "code" : {
                    "type" : "LOOKUP",
                    "contexts" : [ "ADMIN" ],
                    "referenceName" : "additionalFields.policyDecision.declineCode.code",
                    "validationRules" : [ ],
                    "required" : "false",
                    "tableName" : "policyExclusionTbl",
                    "column" : "code"
                  },
                  "detail" : {
                    "type" : "STRING",
                    "contexts" : [ "ADMIN" ],
                    "referenceName" : "additionalFields.policyDecision.declineCode.detail",
                    "validationRules" : [ ],
                    "required" : "false"
                  }
                }
              },
              "withdrawnCode" : {
                "type" : "STRING",
                "contexts" : [ "ADMIN" ],
                "referenceName" : "additionalFields.policyDecision.withdrawnCode",
                "validationRules" : [ ],
                "required" : "false",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var withdrawn = '';\n    if (pmrl.equal(parent.policyStatus, 'WITHDRAWN')) {\n      withdrawn = Big('9924');\n    } else {\n      withdrawn = '';\n    }\n    return withdrawn;\n  });\n}"
              },
              "iccState" : {
                "type" : "STRING",
                "contexts" : [ "ADMIN" ],
                "referenceName" : "additionalFields.policyDecision.iccState",
                "validationRules" : [ ],
                "required" : "false",
                "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var valid = true;\n    var iccStateFound = pmrl.exactLookup(tables, 'iccStateTbl', {\n      issueState: parent.parent.parent.issueState\n    }, 'issueState');\n    if (pmrl.equal(iccStateFound, null)) {\n      valid = false;\n    }\n    return valid;\n  });\n}"
              },
              "policyDispositionText" : {
                "type" : "STRING",
                "contexts" : [ "ADMIN" ],
                "referenceName" : "additionalFields.policyDecision.policyDispositionText",
                "validationRules" : [ ],
                "required" : "false"
              }
            }
          }
        }
      },
      "policyPremiumAmount" : {
        "type" : "NUMBER",
        "contexts" : [ "QUOTE", "ADMIN", "APPLICATION" ],
        "referenceName" : "policyPremiumAmount",
        "validationRules" : [ ],
        "required" : "false",
        "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    var cumulativePremiumAmount = Big('0');\n    if (pmrl.isDefined(rates)) {\n      if (pmrl.isDefined(parent.insureds[Big('0')].coverages)) {\n        for (var record = Big('0'); pmrl.lessThan(record, pmrl.length(parent.insureds[Big('0')].coverages.base)); record = pmrl.plus(record, Big('1'))) {\n          cumulativePremiumAmount = pmrl.plus(cumulativePremiumAmount, parent.insureds[Big('0')].coverages.base[record].premiumAmount);\n        }\n        if (pmrl.greaterThan(pmrl.length(parent.insureds[Big('0')].coverages.sis), Big('0'))) {\n          for (var record = Big('0'); pmrl.lessThan(record, pmrl.length(parent.insureds[Big('0')].coverages.sis)); record = pmrl.plus(record, Big('1'))) {\n            cumulativePremiumAmount = pmrl.plus(cumulativePremiumAmount, parent.insureds[Big('0')].coverages.sis[record].premiumAmount);\n          }\n        }\n        if (pmrl.greaterThan(pmrl.length(parent.insureds[Big('0')].coverages.futureInsurabilityOptionRider), Big('0'))) {\n          cumulativePremiumAmount = pmrl.plus(cumulativePremiumAmount, parent.insureds[Big('0')].coverages.futureInsurabilityOptionRider[Big('0')].premiumAmount);\n        }\n        if (pmrl.greaterThan(pmrl.length(parent.insureds[Big('0')].coverages.autoIncreaseBenefitRider), Big('0'))) {\n          cumulativePremiumAmount = pmrl.plus(cumulativePremiumAmount, parent.insureds[Big('0')].coverages.autoIncreaseBenefitRider[Big('0')].premiumAmount);\n        }\n      }\n    }\n    return cumulativePremiumAmount;\n  });\n}"
      },
      "productInfo" : {
        "type" : "OBJECT",
        "contexts" : [ "ADMIN", "APPLICATION" ],
        "referenceName" : "productInfo",
        "validationRules" : [ ],
        "objectFields" : {
          "lineOfBusiness" : {
            "type" : "ENUM",
            "contexts" : [ "ADMIN", "APPLICATION" ],
            "referenceName" : "productInfo.lineOfBusiness",
            "validationRules" : [ ],
            "required" : "true",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    return 'HEALTH';\n  });\n}",
            "possibleValues" : [ {
              "value" : "HEALTH",
              "displayValue" : "Health"
            } ]
          },
          "productGroup" : {
            "type" : "ENUM",
            "contexts" : [ "ADMIN", "APPLICATION" ],
            "referenceName" : "productInfo.productGroup",
            "validationRules" : [ ],
            "required" : "true",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    return 'DISABILITY_INCOME';\n  });\n}",
            "possibleValues" : [ {
              "value" : "DISABILITY_INCOME",
              "displayValue" : "Disability Income"
            } ]
          },
          "productType" : {
            "type" : "ENUM",
            "contexts" : [ "ADMIN", "APPLICATION" ],
            "referenceName" : "productInfo.productType",
            "validationRules" : [ ],
            "required" : "true",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    return 'INDIVIDUAL_DI';\n  });\n}",
            "possibleValues" : [ {
              "value" : "INDIVIDUAL_DI",
              "displayValue" : "Individual DI"
            } ]
          },
          "productName" : {
            "type" : "ENUM",
            "contexts" : [ "ADMIN", "APPLICATION" ],
            "referenceName" : "productInfo.productName",
            "validationRules" : [ ],
            "required" : "true",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    return 'DI_INDIVIDUAL_ACCIDENT_ONLY';\n  });\n}",
            "possibleValues" : [ {
              "value" : "DI_INDIVIDUAL_ACCIDENT_ONLY",
              "displayValue" : "DI Individual Accident Only"
            } ]
          }
        }
      },
      "reinsurance" : {
        "type" : "ENUM",
        "contexts" : [ "UNDERWRITING", "ADMIN" ],
        "referenceName" : "reinsurance",
        "validationRules" : [ ],
        "required" : "true",
        "possibleValues" : [ {
          "value" : "YES",
          "displayValue" : "Yes"
        }, {
          "value" : "NO",
          "displayValue" : "No"
        } ]
      },
      "reinsuranceDeclined" : {
        "type" : "ENUM",
        "contexts" : [ "ADMIN" ],
        "referenceName" : "reinsuranceDeclined",
        "validationRules" : [ ],
        "required" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.equal(reinsurance, 'YES')) {\n      value = true;\n    }\n    return value;\n  });\n}",
        "possibleValues" : [ {
          "value" : "YES",
          "displayValue" : "Yes"
        }, {
          "value" : "NO",
          "displayValue" : "No"
        } ]
      },
      "productDefinitionInfo" : {
        "type" : "OBJECT",
        "contexts" : [ "QUOTE", "UNDERWRITING", "INIT", "ADMIN", "APPLICATION" ],
        "referenceName" : "productDefinitionInfo",
        "validationRules" : [ ],
        "objectFields" : {
          "productId" : {
            "type" : "ENUM",
            "contexts" : [ "QUOTE", "UNDERWRITING", "INIT", "ADMIN", "APPLICATION" ],
            "referenceName" : "productDefinitionInfo.productId",
            "validationRules" : [ ],
            "required" : "true",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    return 'DIAO19';\n  });\n}",
            "defaultValue" : "DIAO19",
            "possibleValues" : [ {
              "value" : "DIAO19",
              "displayValue" : "DIAO19"
            } ]
          },
          "productDefinitionVersion" : {
            "type" : "STRING",
            "contexts" : [ "QUOTE", "UNDERWRITING", "INIT", "ADMIN", "APPLICATION" ],
            "referenceName" : "productDefinitionInfo.productDefinitionVersion",
            "validationRules" : [ ],
            "required" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
            "calculationRules" : "{\n  (function (parent, context, tables, rates) {\n    return '1.0-SNAPSHOT';\n  });\n}",
            "defaultValue" : "1.0-SNAPSHOT"
          }
        }
      }
    },
    "documents" : {
      "brainQuestionnaire" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.brainNervesQuestion, 'YES') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'DE') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'FL') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MT') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'ND') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'SD') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diBrainQuestionnaire_ICC19_453782.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.brainNervesQuestion, 'YES') && (pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'DE') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'FL') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'MT') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'ND') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'SD'));\n  });\n}",
          "templateName" : "diBrainQuestionnaire_453782.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.brainNervesQuestion, 'YES') && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diBrainQuestionnaire_453782_WY.pdf"
        } ]
      },
      "replConsumerForm1" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && (pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'AR') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'CT') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'DE') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'IA') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'ID') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'OK') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'RI') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'TX') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'UT') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'VA') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'VT') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'WA') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'WV'))) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          value = true;\n          break;\n        }\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replFormNationalConsumer_M92841_1002.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'CO')) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          value = true;\n          break;\n        }\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_M9284_CO_0114a.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'FL')) {\n      if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages[Big('0')]) && pmrl.equal(parent.insureds[Big('0')].otherCoverages[Big('0')].coverageReplacing, 'YES')) {\n        value = true;\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_FL_M92846_1002a_1.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'IL')) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          value = true;\n          break;\n        }\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_M28635_ILa.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'KY')) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          value = true;\n          break;\n        }\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_M9284_KYa.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'LA')) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          value = true;\n          break;\n        }\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_M92841_LAa.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'MA')) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          value = true;\n          break;\n        }\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_M92842_0403a.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'ME')) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          value = true;\n          break;\n        }\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_M9284_MEa.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'NH')) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          value = true;\n          break;\n        }\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_M92841_Nha.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'NJ')) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          value = true;\n          break;\n        }\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_M928413_1002a.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'PA')) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          value = true;\n          break;\n        }\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_M92847_1002a.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'SC')) {\n      if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages[Big('0')]) && pmrl.equal(parent.insureds[Big('0')].otherCoverages[Big('0')].coverageReplacing, 'YES')) {\n        value = true;\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_m9284_SC_0711a_1.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'WI')) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          value = true;\n          break;\n        }\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_M18936_1002a.pdf"
        } ]
      },
      "replConsumerForm2" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'FL')) {\n      if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages[Big('1')]) && pmrl.equal(parent.insureds[Big('0')].otherCoverages[Big('0')].coverageReplacing, 'YES')) {\n        value = true;\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_FL_M92846_1002a_2.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'SC')) {\n      if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages[Big('1')]) && pmrl.equal(parent.insureds[Big('0')].otherCoverages[Big('1')].coverageReplacing, 'YES')) {\n        value = true;\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_m9284_SC_0711a_2.pdf"
        } ]
      },
      "associationMembershipForm" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.discountAssociationGroup, 'YES');\n  });\n}",
          "templateName" : "diAssociationMembershipForm_M27646.pdf"
        } ]
      },
      "amendment" : {
        "isBundle" : "false",
        "context" : "ADMIN",
        "templates" : [ {
          "type" : "THYMELEAF_HTML",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "amendment.html"
        } ]
      },
      "replConsumerForm3" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'FL')) {\n      if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages[Big('2')]) && pmrl.equal(parent.insureds[Big('0')].otherCoverages[Big('0')].coverageReplacing, 'YES')) {\n        value = true;\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_FL_M92846_1002a_3.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'SC')) {\n      if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages[Big('2')]) && pmrl.equal(parent.insureds[Big('0')].otherCoverages[Big('2')].coverageReplacing, 'YES')) {\n        value = true;\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_m9284_SC_0711a_3.pdf"
        } ]
      },
      "replConsumerForm4" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'FL')) {\n      if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages[Big('3')]) && pmrl.equal(parent.insureds[Big('0')].otherCoverages[Big('0')].coverageReplacing, 'YES')) {\n        value = true;\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_FL_M92846_1002a_4.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'SC')) {\n      if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages[Big('3')]) && pmrl.equal(parent.insureds[Big('0')].otherCoverages[Big('3')].coverageReplacing, 'YES')) {\n        value = true;\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_m9284_SC_0711a_4.pdf"
        } ]
      },
      "producerStatement" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "diProducerStatement.pdf"
        } ]
      },
      "bspAuthForm" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.payors) && pmrl.greaterThan(pmrl.length(parent.payors), Big('0')) && pmrl.equal(parent.payors[Big('0')].additionalFields.proposedInsuredInsuredThePayor, 'YES');\n  });\n}",
          "templateName" : "diBSPAuth.pdf"
        } ]
      },
      "diAOApplication" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'DE') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'FL') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MT') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'ND') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'SD') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diAOFullApp_ICC19_MA6033.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'FL');\n  });\n}",
          "templateName" : "diAOFullApp_MA6033_FL.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'DE') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'MT') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'ND') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'SD');\n  });\n}",
          "templateName" : "diAOFullApp_MA6033.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diAOFullApp_MA6033_WY.pdf"
        } ]
      },
      "statement_of_good_health" : {
        "isBundle" : "false",
        "context" : "ADMIN",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "ICC19-455138.pdf"
        } ]
      },
      "diStateSpecialForms" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'MT');\n  });\n}",
          "templateName" : "diStateSpecialForms_MC33703_0113.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'NM');\n  });\n}",
          "templateName" : "diStateSpecialForms_MLU21180_1106.pdf"
        } ]
      },
      "foreignNationalQuestionnaire" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(parent.insureds[Big('0')].citizenship.citizen, 'NO') || pmrl.equal(parent.insureds[Big('0')].underwritingFactors.activityFactors.foreignTravel, 'YES')) && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'DE') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'FL') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MT') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'ND') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'SD') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diForeignNational_ICC19_453785.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(parent.insureds[Big('0')].citizenship.citizen, 'NO') || pmrl.equal(parent.insureds[Big('0')].underwritingFactors.activityFactors.foreignTravel, 'YES')) && (pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'DE') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'FL') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'MT') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'ND') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'SD'));\n  });\n}",
          "templateName" : "diForeignNational_453785.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(parent.insureds[Big('0')].citizenship.citizen, 'NO') || pmrl.equal(parent.insureds[Big('0')].underwritingFactors.activityFactors.foreignTravel, 'YES')) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diForeignNational_453785_WY.pdf"
        } ]
      },
      "E_CONSENT_DISCLOSURE" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "E_CONSENT_DISCLOSURE.pdf"
        } ]
      },
      "QUOTE_ILLUSTRATION" : {
        "isBundle" : "false",
        "context" : "QUOTE",
        "templates" : [ {
          "type" : "THYMELEAF_HTML",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "illustration.html"
        } ]
      },
      "POLICY_ACCEPTANCE_APP_PACK" : {
        "isBundle" : "true",
        "context" : "ADMIN",
        "templates" : [ {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "statement_of_good_health"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "policy_schedule"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "amendment"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "invoice"
        } ]
      },
      "cardiacQuestionnaire" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.heartDiseaseQuestion, 'YES') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'DE') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'FL') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MT') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'ND') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'SD') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diCardiacQuestionnaire_ICC19_453787.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.heartDiseaseQuestion, 'YES') && (pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'DE') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'FL') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'MT') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'ND') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'SD'));\n  });\n}",
          "templateName" : "diCardiacQuestionnaire_453787.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.heartDiseaseQuestion, 'YES') && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diCardiacQuestionnaire_453787_WY.pdf"
        } ]
      },
      "replForm1" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && (pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'AR') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'CT') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'DE') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'IA') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'ID') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'OK') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'RI') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'TX') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'UT') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'VA') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'VT') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'WA') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'WV'))) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          value = true;\n          break;\n        }\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replFormNational_M92841_1002.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'CO')) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          value = true;\n          break;\n        }\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_M9284_CO_0114.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'FL')) {\n      if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages[Big('0')]) && pmrl.equal(parent.insureds[Big('0')].otherCoverages[Big('0')].coverageReplacing, 'YES')) {\n        value = true;\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_FL_M92846_1002_1.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'IL')) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          value = true;\n          break;\n        }\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_M28635_IL.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'KY')) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          value = true;\n          break;\n        }\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_M9284_KY.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'LA')) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          value = true;\n          break;\n        }\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_M92841_LA.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'MA')) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          value = true;\n          break;\n        }\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_M92842_0403.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'ME')) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          value = true;\n          break;\n        }\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_M9284_ME.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'NH')) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          value = true;\n          break;\n        }\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_M92841_NH.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'NJ')) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          value = true;\n          break;\n        }\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_M928413_1002.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'PA')) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          value = true;\n          break;\n        }\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_M92847_1002.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'SC')) {\n      if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages[Big('0')]) && pmrl.equal(parent.insureds[Big('0')].otherCoverages[Big('0')].coverageReplacing, 'YES')) {\n        value = true;\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_m9284_SC_0711_1.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'WI')) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          value = true;\n          break;\n        }\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_M18936_1002.pdf"
        } ]
      },
      "replForm2" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'FL')) {\n      if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages[Big('1')]) && pmrl.equal(parent.insureds[Big('0')].otherCoverages[Big('0')].coverageReplacing, 'YES')) {\n        value = true;\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_FL_M92846_1002_2.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'SC')) {\n      if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages[Big('1')]) && pmrl.equal(parent.insureds[Big('0')].otherCoverages[Big('1')].coverageReplacing, 'YES')) {\n        value = true;\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_m9284_SC_0711_2.pdf"
        } ]
      },
      "PRODUCER_APP_PACK" : {
        "isBundle" : "true",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "diAOApplication"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "activityQuestionnaire"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "alcoholDrugQuestionnaire"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "brainQuestionnaire"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "cancerQuestionnaire"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "cardiacQuestionnaire"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "diabetesQuestionnaire"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "foreignNationalQuestionnaire"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "generalQuestionnaire"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "mentalQuestionnaire"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "musculoskeletalQuestionnaire"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "bspAuthForm"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "replForm1"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "replForm2"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "replForm3"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "replForm4"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "associationMembershipForm"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "producerStatement"
        } ]
      },
      "musculoskeletalQuestionnaire" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.musculoskeletalChronicPainQuestion, 'YES') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'DE') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'FL') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MT') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'ND') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'SD') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diMusculoskeletalQuestionnaire_ICC19_453790.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.musculoskeletalChronicPainQuestion, 'YES') && (pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'DE') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'FL') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'MT') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'ND') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'SD'));\n  });\n}",
          "templateName" : "diMusculoskeletalQuestionnaire_453790.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.musculoskeletalChronicPainQuestion, 'YES') && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diMusculoskeletalQuestionnaire_453790_WY.pdf"
        } ]
      },
      "activityQuestionnaire" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].underwritingFactors.activityFactors.activityQuestion, 'YES') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'DE') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'FL') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MT') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'ND') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'SD') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diActivityQuestionnaire_ICC19_453780.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].underwritingFactors.activityFactors.activityQuestion, 'YES') && (pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'DE') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'FL') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'MT') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'ND') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'SD'));\n  });\n}",
          "templateName" : "diActivityQuestionnaire_453780.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].underwritingFactors.activityFactors.activityQuestion, 'YES') && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diActivityQuestionnaire_453780_WY.pdf"
        } ]
      },
      "replForm3" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'FL')) {\n      if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages[Big('2')]) && pmrl.equal(parent.insureds[Big('0')].otherCoverages[Big('0')].coverageReplacing, 'YES')) {\n        value = true;\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_FL_M92846_1002_3.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'SC')) {\n      if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages[Big('2')]) && pmrl.equal(parent.insureds[Big('0')].otherCoverages[Big('2')].coverageReplacing, 'YES')) {\n        value = true;\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_m9284_SC_0711_3.pdf"
        } ]
      },
      "replForm4" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'FL')) {\n      if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages[Big('3')]) && pmrl.equal(parent.insureds[Big('0')].otherCoverages[Big('0')].coverageReplacing, 'YES')) {\n        value = true;\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_FL_M92846_1002_4.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'SC')) {\n      if (pmrl.isDefined(parent.insureds[Big('0')].otherCoverages[Big('3')]) && pmrl.equal(parent.insureds[Big('0')].otherCoverages[Big('3')].coverageReplacing, 'YES')) {\n        value = true;\n      }\n    }\n    return value;\n  });\n}",
          "templateName" : "replForm_m9284_SC_0711_4.pdf"
        } ]
      },
      "cancerQuestionnaire" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.cancerQuestion, 'YES') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'DE') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'FL') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MT') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'ND') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'SD') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diCancerQuestionnaire_ICC19_453783.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.cancerQuestion, 'YES') && (pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'DE') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'FL') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'MT') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'ND') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'SD'));\n  });\n}",
          "templateName" : "diCancerQuestionnaire_453783.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.cancerQuestion, 'YES') && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diCancerQuestionnaire_ICC19_453783.pdf"
        } ]
      },
      "generalQuestionnaire" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.eyeEarNoseBloodQuestion, 'YES') || pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.diagnosticEvaluationQuestion, 'YES') || pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.otherDiagnosesTreatmentQuestion, 'YES') || pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.otherMedicationQuestion, 'YES')) && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'DE') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'FL') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MT') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'ND') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'SD') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diGeneralQuestionnaire_ICC19_453786.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.eyeEarNoseBloodQuestion, 'YES') || pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.diagnosticEvaluationQuestion, 'YES') || pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.otherDiagnosesTreatmentQuestion, 'YES') || pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.otherMedicationQuestion, 'YES')) && (pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'DE') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'FL') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'MT') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'ND') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'SD'));\n  });\n}",
          "templateName" : "diGeneralQuestionnaire_453786.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.eyeEarNoseBloodQuestion, 'YES') || pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.diagnosticEvaluationQuestion, 'YES') || pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.otherDiagnosesTreatmentQuestion, 'YES') || pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.otherMedicationQuestion, 'YES')) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diGeneralQuestionnaire_453786_WY.pdf"
        } ]
      },
      "outlineOfCoverageAOC" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'CA') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'DE') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'FL') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MT') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'ND') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'NY') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'SD') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'VI') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diOutlineOfCoverage_ICC19_D90AOC.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'DE');\n  });\n}",
          "templateName" : "diOutlineOfCoverage_D90AOC_DE.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'FL');\n  });\n}",
          "templateName" : "diOutlineOfCoverage_D90AOC_25777_FL.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'MT');\n  });\n}",
          "templateName" : "diOutlineOfCoverage_D90AOC_MT.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'ND');\n  });\n}",
          "templateName" : "diOutlineOfCoverage_D90AOC.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'SD');\n  });\n}",
          "templateName" : "diOutlineOfCoverage_D90AOC_SD.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diOutlineOfCoverage_D90AOC_WY.pdf"
        } ]
      },
      "mibInfo" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'AZ') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'CA') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'CT') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'GA') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'IL') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'KS') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MA') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'ME') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MN') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MT') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'NC') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'OH') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'OR') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'PA') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'VA');\n  });\n}",
          "templateName" : "diMIBInfoIC_M26978_0809.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'AZ') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'CA') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'CT') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'GA') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'KS') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'ME') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'MN') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'MT') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'NC') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'OH') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'VA');\n  });\n}",
          "templateName" : "diMIBInfo_M26977, M26978_0809.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'IL');\n  });\n}",
          "templateName" : "diMIBInfo_M26977, M26978_0809, IL Civil Union Law Notice.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'MA');\n  });\n}",
          "templateName" : "diMIBInfo_M26414, M26978_0809.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'OR');\n  });\n}",
          "templateName" : "diMIBInfo_M26977, M26978_0809, 86523.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'PA');\n  });\n}",
          "templateName" : "diMIBInfo_M26978_0809, 86523.pdf"
        } ]
      },
      "hipaaForm" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'AZ') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'CO') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'FL') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'HI') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'IL') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'KS') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'ME') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MI') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MN') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MT') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'NC') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'NH') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'NJ') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'NY') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'OK') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'RI') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'VA') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'VT');\n  });\n}",
          "templateName" : "diHIPAA_L8232_0913.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'AZ');\n  });\n}",
          "templateName" : "diHIPAA_MLU23203_AZ_0314.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'CO') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'IL') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'NH') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'NJ') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'RI');\n  });\n}",
          "templateName" : "diHIPAA_L8232_CUP_0913.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'FL');\n  });\n}",
          "templateName" : "diHIPAA_L8232_HI_0913.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'HI');\n  });\n}",
          "templateName" : "diHIPPA_M27932_FL_0913.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'KS');\n  });\n}",
          "templateName" : "diHIPAA_L8232_KS_0913.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'ME');\n  });\n}",
          "templateName" : "diHIPAA_L8232_ME_0913.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'MI');\n  });\n}",
          "templateName" : "diHIPAA_L8232_MI_0913.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'MN');\n  });\n}",
          "templateName" : "diHIPAA_L8232_MN_0913.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'MT');\n  });\n}",
          "templateName" : "diHIPAA_L8232_MT_0913.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'NC');\n  });\n}",
          "templateName" : "diHIPAA_L8232_NC_0913.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'OK');\n  });\n}",
          "templateName" : "diHIPAA_L8232_OK_0913.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'VT');\n  });\n}",
          "templateName" : "diHIPAA_L8232_VT_0913.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'VA');\n  });\n}",
          "templateName" : "diHIPAA_M27932_VA_0913.pdf"
        } ]
      },
      "mibAuth" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'AZ');\n  });\n}",
          "templateName" : "diHIPAA_MLU23213_AZ_0208_REV_0513.pdf"
        } ]
      },
      "diabetesQuestionnaire" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.diabetesQuestion, 'YES') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'DE') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'FL') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MT') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'ND') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'SD') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diDiabetesQuestionnaire_ICC19_453784.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.diabetesQuestion, 'YES') && (pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'DE') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'FL') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'MT') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'ND') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'SD'));\n  });\n}",
          "templateName" : "diDiabetesQuestionnaire_453784.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.diabetesQuestion, 'YES') && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diDiabetesQuestionnaire_453784_WY.pdf"
        } ]
      },
      "CLIENT_APP_PACK" : {
        "isBundle" : "true",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "diAOApplication"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "activityQuestionnaire"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "alcoholDrugQuestionnaire"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "brainQuestionnaire"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "cancerQuestionnaire"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "cardiacQuestionnaire"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "diabetesQuestionnaire"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "foreignNationalQuestionnaire"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "generalQuestionnaire"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "mentalQuestionnaire"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "musculoskeletalQuestionnaire"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "bspAuthForm"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "replForm1"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "replForm2"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "replForm3"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "replForm4"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "replConsumerForm1"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "replConsumerForm2"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "replConsumerForm3"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "replConsumerForm4"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "hipaaForm"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "mibAuth"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "associationMembershipForm"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "mibInfo"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "outlineOfCoverageAOC"
        }, {
          "type" : "REFERENCE",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "E_CONSENT_DISCLOSURE"
        } ]
      },
      "alcoholDrugQuestionnaire" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(parent.insureds[Big('0')].underwritingFactors.activityFactors.substanceAbuseDrugUsage, 'YES') || pmrl.equal(parent.insureds[Big('0')].underwritingFactors.activityFactors.substanceAbuseAlcoholUsage, 'YES')) && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'DE') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'FL') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MT') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'ND') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'SD') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diAlcDrugQuestionnaire_ICC19_453781.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return (pmrl.equal(parent.insureds[Big('0')].underwritingFactors.activityFactors.substanceAbuseDrugUsage, 'YES') || pmrl.equal(parent.insureds[Big('0')].underwritingFactors.activityFactors.substanceAbuseAlcoholUsage, 'YES')) && (pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'DE') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'FL') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'MT') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'ND') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'SD'));\n  });\n}",
          "templateName" : "diAlcDrugQuestionnaire_453781.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].underwritingFactors.activityFactors.substanceAbuseDrugUsage, 'YES') && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diAlcDrugQuestionnaire_453781_WY.pdf"
        } ]
      },
      "policy_schedule" : {
        "isBundle" : "false",
        "context" : "ADMIN",
        "templates" : [ {
          "type" : "THYMELEAF_HTML",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "policy-schedule.html"
        } ]
      },
      "invoice" : {
        "isBundle" : "false",
        "context" : "ADMIN",
        "templates" : [ {
          "type" : "THYMELEAF_HTML",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return true;\n  });\n}",
          "templateName" : "invoice.html"
        } ]
      },
      "mentalQuestionnaire" : {
        "isBundle" : "false",
        "context" : "APPLICATION",
        "templates" : [ {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.emotionalPsychologicalQuestion, 'YES') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'DE') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'FL') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MT') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'ND') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'SD') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diMentalQuestionnaire_ICC19_453789.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.emotionalPsychologicalQuestion, 'YES') && (pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'DE') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'FL') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'MT') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'ND') || pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'SD'));\n  });\n}",
          "templateName" : "diMentalQuestionnaire_453789.pdf"
        }, {
          "type" : "FILLABLE_PDF",
          "inclusionRule" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.emotionalPsychologicalQuestion, 'YES') && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'WY');\n  });\n}",
          "templateName" : "diMentalQuestionnaire_453789_WY.pdf"
        } ]
      }
    },
    "uiForms" : {
      "eapp" : {
        "sections" : [ {
          "rows" : [ {
            "indent" : "0",
            "fields" : [ {
              "type" : "HEADING",
              "label" : "Personal Information",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.personalInformationHeader"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "Proposed Insured's Information",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.personalInformationLabel"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "First Name",
              "enabled" : "true",
              "maxLength" : "20",
              "visible" : "true",
              "name" : "insureds[0].firstName"
            }, {
              "type" : "TEXT",
              "label" : "Middle Name",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "true",
              "name" : "insureds[0].middleName"
            }, {
              "type" : "TEXT",
              "label" : "Last Name",
              "enabled" : "true",
              "maxLength" : "30",
              "visible" : "true",
              "name" : "insureds[0].lastName"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Gender at Birth",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].gender"
            }, {
              "type" : "DATE",
              "label" : "Date of Birth",
              "subLabel" : "MM-DD-YYYY",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "true",
              "name" : "insureds[0].birthDate"
            }, {
              "type" : "TEXT",
              "label" : "Social Security Number",
              "subLabel" : "###-##-####",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "true",
              "name" : "insureds[0].socialSecurityNumber"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Cell Phone Number",
              "subLabel" : "###-###-####",
              "enabled" : "true",
              "maxLength" : "20",
              "visible" : "true",
              "name" : "insureds[0].cellPhoneNumber"
            }, {
              "type" : "TEXT",
              "label" : "Other Phone Number",
              "subLabel" : "###-###-####",
              "enabled" : "true",
              "maxLength" : "19",
              "visible" : "true",
              "name" : "insureds[0].homePhoneNumber"
            }, {
              "type" : "TEXT",
              "label" : "Email Address",
              "enabled" : "true",
              "maxLength" : "53",
              "visible" : "true",
              "name" : "insureds[0].emailAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "FIELD_GROUP",
              "label" : "",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.parent.insureds[0].residentialAddress",
              "group" : {
                "title" : "",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Primary Residence Address",
                    "enabled" : "true",
                    "maxLength" : "40",
                    "visible" : "true",
                    "name" : "insureds[0].residentialAddress.addressLine1"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "enabled" : "true",
                    "maxLength" : "40",
                    "visible" : "true",
                    "name" : "insureds[0].residentialAddress.addressLine2"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "City",
                    "enabled" : "true",
                    "maxLength" : "20",
                    "visible" : "true",
                    "name" : "insureds[0].residentialAddress.city"
                  }, {
                    "type" : "SELECT",
                    "label" : "State",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "insureds[0].residentialAddress.state"
                  }, {
                    "type" : "TEXT",
                    "label" : "Zip Code",
                    "enabled" : "true",
                    "maxLength" : "10",
                    "visible" : "true",
                    "name" : "insureds[0].residentialAddress.zipCode"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Select if Mailing Address is different than Residence Address",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].additionalFields.mailingAddressIndicator"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "FIELD_GROUP",
              "label" : "",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].additionalFields.mailingAddressIndicator), 'YES');\n  });\n}",
              "name" : "ui.insureds[0].mailingAddress",
              "group" : {
                "title" : "",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Mailing Address",
                    "enabled" : "true",
                    "maxLength" : "40",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.mailingAddressIndicator), 'YES');\n  });\n}",
                    "name" : "insureds[0].mailingAddress.addressLine1"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "enabled" : "true",
                    "maxLength" : "40",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.mailingAddressIndicator), 'YES');\n  });\n}",
                    "name" : "insureds[0].mailingAddress.addressLine2"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "City",
                    "enabled" : "true",
                    "maxLength" : "20",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.mailingAddressIndicator), 'YES');\n  });\n}",
                    "name" : "insureds[0].mailingAddress.city"
                  }, {
                    "type" : "SELECT",
                    "label" : "State",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.mailingAddressIndicator), 'YES');\n  });\n}",
                    "name" : "insureds[0].mailingAddress.state"
                  }, {
                    "type" : "TEXT",
                    "label" : "Zip Code",
                    "enabled" : "true",
                    "maxLength" : "10",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.mailingAddressIndicator), 'YES');\n  });\n}",
                    "name" : "insureds[0].mailingAddress.zipCode"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Driver License Number",
              "enabled" : "true",
              "maxLength" : "20",
              "visible" : "true",
              "name" : "insureds[0].driversLicenseNumber"
            }, {
              "type" : "SELECT",
              "label" : "Driver License Issue State",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].driversLicenseIssueState"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Does the client use tobacco?",
              "description" : "Answer yes if the client has used any form of tobacco or any form of nicotine replacement/cessation product (such as nicotine gum, patch, spray, ecigarette, vapor, etc.) in the last 12 months. Add any additional information to the producer form comment section.",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].tobaccoUse"
            }, {
              "type" : "NUMBER",
              "label" : "What is your total earned income for the previous year? If self-employed, taxable (net) income.",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "true",
              "name" : "insureds[0].annualEarnedIncome"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "Citizenship Information",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.citizenshipInformationLabel"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Are you a U.S. citizen?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].citizenship.citizen"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SELECT",
              "label" : "Birth Country",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].birthCountry"
            }, {
              "type" : "SELECT",
              "label" : "Birth State",
              "enabled" : "true",
              "maxLength" : "20",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.birthCountry), 'UNITED STATES');\n  });\n}",
              "name" : "insureds[0].birthState"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Please Specify:",
              "enabled" : "true",
              "maxLength" : "68",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.birthCountry), 'OTHER');\n  });\n}",
              "name" : "insureds[0].additionalFields.countryOther"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SELECT",
              "label" : "How long have you lived in the United States?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.citizen), 'NO');\n  });\n}",
              "name" : "insureds[0].citizenship.additionalFields.howLongLiveInUsa"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SELECT",
              "label" : "Country of permanent residence",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.citizen), 'NO');\n  });\n}",
              "name" : "insureds[0].citizenship.countryOfPermanentResidence"
            }, {
              "type" : "TEXT",
              "label" : "Please Specify:",
              "enabled" : "true",
              "maxLength" : "35",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.citizen), 'NO') && pmrl.equal(pmrl.toUpperCase(parent.countryOfPermanentResidence), 'OTHER');\n  });\n}",
              "name" : "insureds[0].citizenship.countryOfPermanentResidenceOther"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Do you have a Permanent Resident Card?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.citizen), 'NO');\n  });\n}",
              "name" : "insureds[0].citizenship.permanentResidentCard"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Permanent Resident Card Number",
              "enabled" : "true",
              "maxLength" : "22",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.citizen), 'NO') && pmrl.equal(pmrl.toUpperCase(parent.permanentResidentCard), 'YES');\n  });\n}",
              "name" : "insureds[0].citizenship.permanentResidentCardNumber"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "SELECT",
              "label" : "Visa Type",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.citizen), 'NO') && pmrl.equal(pmrl.toUpperCase(parent.permanentResidentCard), 'NO');\n  });\n}",
              "name" : "insureds[0].citizenship.visaType"
            }, {
              "type" : "TEXT",
              "label" : "Card Number",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.citizen), 'NO') && pmrl.equal(pmrl.toUpperCase(parent.permanentResidentCard), 'NO');\n  });\n}",
              "name" : "insureds[0].citizenship.visaCardNumber"
            }, {
              "type" : "NUMBER",
              "label" : "Expiration Month",
              "subLabel" : "MM",
              "enabled" : "true",
              "maxLength" : "2",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.citizen), 'NO') && pmrl.equal(pmrl.toUpperCase(parent.permanentResidentCard), 'NO');\n  });\n}",
              "name" : "insureds[0].citizenship.visaExpirationMonth"
            }, {
              "type" : "NUMBER",
              "label" : "Expiration Year",
              "subLabel" : "YYYY",
              "enabled" : "true",
              "maxLength" : "4",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.citizen), 'NO') && pmrl.equal(pmrl.toUpperCase(parent.permanentResidentCard), 'NO');\n  });\n}",
              "name" : "insureds[0].citizenship.visaExpirationYear"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Additional Information/Comments:",
              "enabled" : "true",
              "maxLength" : "810",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.citizen), 'NO');\n  });\n}",
              "name" : "insureds[0].citizenship.additionalFields.citizenshipAdditionalInformationComments"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "Beneficiary Information",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.beneficiaryInformationLabel"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "label" : "",
              "enabled" : "true",
              "visible" : "true",
              "name" : "beneficiaries",
              "group" : {
                "title" : "Beneficiary Information",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "First Name",
                    "description" : "Beneficiary is needed in the event the Survivor Benefit provision is exercised.",
                    "enabled" : "true",
                    "maxLength" : "20",
                    "visible" : "true",
                    "name" : "beneficiaries[$].firstName"
                  }, {
                    "type" : "TEXT",
                    "label" : "Middle Initial",
                    "enabled" : "true",
                    "maxLength" : "1",
                    "visible" : "true",
                    "name" : "beneficiaries[$].middleName"
                  }, {
                    "type" : "TEXT",
                    "label" : "Last Name",
                    "enabled" : "true",
                    "maxLength" : "30",
                    "visible" : "true",
                    "name" : "beneficiaries[$].lastName"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "SELECT",
                    "label" : "Relationship to Proposed Insured",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "beneficiaries[$].relationshipToInsured"
                  }, {
                    "type" : "TEXT",
                    "label" : "Please Specify:",
                    "enabled" : "true",
                    "maxLength" : "35",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.relationshipToInsured), 'OTHER');\n  });\n}",
                    "name" : "beneficiaries[$].relationshipToInsuredOther"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "Producer, please verify the following for quoting purposes:",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.quoteQuestionsLabel"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SELECT",
              "label" : "Occupation",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].additionalFields.occupationDescription"
            }, {
              "type" : "SELECT",
              "label" : "Specialty",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].additionalFields.occupationSpecialty"
            }, {
              "type" : "SELECT",
              "label" : "Occupational Class Quoted",
              "enabled" : "false",
              "visible" : "true",
              "name" : "insureds[0].occupationClass"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SELECT",
              "label" : "Risk Class Quoted",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].riskClass"
            }, {
              "type" : "SELECT",
              "label" : "Verify Special Restriction Employee Status",
              "enabled" : "true",
              "visible" : "true",
              "name" : "additionalFields.specialRestrictionEmployee"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.graduationDateSpaceholder"
            }, {
              "type" : "TEXT",
              "label" : "Estimated Graduation Date",
              "enabled" : "true",
              "maxLength" : "90",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.specialRestrictionEmployee), 'STUDENT');\n  });\n}",
              "name" : "insureds[0].additionalFields.estimatedGraduationDate"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Is the client self employed?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].additionalFields.selfEmployed"
            }, {
              "type" : "RADIO",
              "label" : "Will the insured be the payor?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "payors[0].additionalFields.proposedInsuredInsuredThePayor"
            } ]
          } ],
          "title" : "Personal Info"
        }, {
          "rows" : [ {
            "indent" : "0",
            "fields" : [ {
              "type" : "HEADING",
              "label" : "Accident Only Plan Information",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.asPolicyHeader"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].coverages.base",
              "group" : {
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "SELECT",
                    "label" : "Benefit Period",
                    "description" : "The maximum length of time disability benefits are payable.  The benefit period begins on the first day benefits become payable after expiration of the elimination period.",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "benefitPeriod"
                  }, {
                    "type" : "SELECT",
                    "label" : "Elimination Period",
                    "description" : "The number of calendar days of disability that must pass before benefits become payable.  The days within this period do not need to be consecutive but need to be completed within the accumulation period.",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "eliminationPeriod"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Select policy renewability:",
                    "description" : "Guaranteed Renewable - This policy guarantees the right to continue the coverage until age 67. During that time, we cannot cancel the policy as long as the required premiums are paid when due. After age 67, and each policy anniversary thereafter, you may continue coverage as provided under conditional renewability to age 75. OR Non-Cancelable - This policy guarantees the right to continue the coverage until age 67.  During this time, we cannot cancel your policy or change your premiums as long as required premiums are paid when due. After age 67, each year you may continue your coverage under conditional renewability to age 75.",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "policyRenewability"
                  }, {
                    "type" : "RADIO",
                    "label" : "Select a payment mode:",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "paymentSchedule"
                  } ]
                } ]
              },
              "maxItemCount" : "1"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "HEADING",
              "label" : "Benefit Amount Information",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.benefitAmountHeader"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].coverages.base",
              "group" : {
                "title" : "",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Select monthly benefit type:",
                    "description" : "Selecting a 'Specified Monthly Base Benefit' will allow the user to enter a specific monetary amount. Selecting 'Maximum Base Benefit' will automatically generate the maximum amount allowed based on entered criteria.",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "insureds[0].coverages.base[$].additionalFields.benefitAmountType"
                  }, {
                    "type" : "NUMBER",
                    "label" : "Total Monthly Benefit:",
                    "subLabel" : "This is the total benefit, including the base and the SIS benefits, if applicable.",
                    "description" : "If an injury prevents your client from performing the material and substantial duties of their regular occupation, and they are not gainfully employed in another occupation, we will pay a monthly benefit once the elimination period has been met. After the first 24 months following the elimination period, if the maximum benefit period has not been met, we will continue to pay a monthly benefit as long as they are unable to perform the material and substantial duties of any occupation for which they are reasonably suited because of education, training or experience.",
                    "enabled" : "false",
                    "visible" : "true",
                    "name" : "additionalFields.totalMonthlyBenefitAmount"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "NUMBER",
                    "label" : "Monthly Base Benefit",
                    "enabled" : "true",
                    "maxLength" : "5",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.equal(parent.benefitAmountType, 'SPECIFY') && pmrl.isDefined(parent.parent.parent.parent.parent.benefitPeriod) && pmrl.isDefined(parent.parent.parent.parent.annualEarnedIncome) && pmrl.isDefined(parent.parent.parent.parent.occupationClass) && pmrl.isDefined(parent.parent.parent.parent.additionalFields.selfEmployed)) {\n      value = true;\n    }\n    return value;\n  });\n}",
                    "name" : "insureds[0].coverages.base[$].additionalFields.specifiedBenefitAmount"
                  }, {
                    "type" : "PARAGRAPH",
                    "label" : "",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "ui.specifiedEntrySpaceHolder"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "NUMBER",
                    "label" : "Monthly Base Benefit",
                    "enabled" : "false",
                    "maxLength" : "5",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.equal(parent.benefitAmountType, 'MAXIMUM') && pmrl.isDefined(parent.parent.parent.parent.parent.benefitPeriod) && pmrl.isDefined(parent.parent.parent.parent.annualEarnedIncome) && pmrl.isDefined(parent.parent.parent.parent.parent.additionalFields.specialRestrictionEmployee) && pmrl.isDefined(parent.parent.parent.parent.occupationClass) && pmrl.isDefined(parent.parent.parent.parent.additionalFields.selfEmployed)) {\n      value = true;\n    }\n    return value;\n  });\n}",
                    "name" : "insureds[0].coverages.base[$].additionalFields.baseMaximumBenefitAmount"
                  }, {
                    "type" : "PARAGRAPH",
                    "label" : "",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "ui.monthlyEntrySpaceHolder"
                  } ]
                } ]
              },
              "maxItemCount" : "1"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "HEADING",
              "label" : "Optional benefits:",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.riderHeader"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "Select one or both no cost options:",
              "enabled" : "true",
              "maxLength" : "40",
              "visible" : "true",
              "name" : "ui.increaseOptionsHeader"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "label" : "Automatic Increase Benefit (AIB)",
              "subLabel" : "Automatically increases your monthly benefit by 4% each year.",
              "enabled" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    {\n      if (pmrl.greaterThan(pmrl.length(parent.autoIncreaseBenefitRider), Big('0')) || pmrl.isDefined(parent.parent.additionalFields.issueAge)) {\n        valid = true;\n      }\n    }\n    return valid;\n  });\n}",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var minAge = Big('18');\n    var maxAge = Big('55');\n    var valid = false;\n    if (pmrl.isDefined(parent.parent.additionalFields.issueAge)) {\n      if (pmrl.greaterThan(pmrl.length(parent.autoIncreaseBenefitRider), Big('0')) || pmrl.greaterThanEqual(parent.parent.additionalFields.issueAge, minAge) && pmrl.lessThanEqual(parent.parent.additionalFields.issueAge, maxAge)) {\n        valid = true;\n      }\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "name" : "insureds[0].coverages.autoIncreaseBenefitRider",
              "group" : {
                "title" : "The Automatic Increase Benefit has been added to your policy.",
                "rows" : [ {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "PARAGRAPH",
                    "label" : "",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "ui.aibBenefitSpaceholder"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "Automatic Increase Benefit (AIB)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var minAge = Big('18');\n    var maxAge = Big('55');\n    var valid = false;\n    if (pmrl.lessThan(pmrl.length(parent.insureds[Big('0')].coverages.autoIncreaseBenefitRider), Big('1')) && pmrl.isDefined(parent.insureds[Big('0')].additionalFields.issueAge) && (pmrl.lessThan(parent.insureds[Big('0')].additionalFields.issueAge, minAge) || pmrl.greaterThan(parent.insureds[Big('0')].additionalFields.issueAge, maxAge))) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "name" : "ui.notEligibleAIBRiderSubheading"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "AIB Coverage is only available to ages 18 thru 55.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var minAge = Big('18');\n    var maxAge = Big('55');\n    var valid = false;\n    if (pmrl.lessThan(pmrl.length(parent.insureds[Big('0')].coverages.autoIncreaseBenefitRider), Big('1')) && pmrl.isDefined(parent.insureds[Big('0')].additionalFields.issueAge) && (pmrl.lessThan(parent.insureds[Big('0')].additionalFields.issueAge, minAge) || pmrl.greaterThan(parent.insureds[Big('0')].additionalFields.issueAge, maxAge))) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "name" : "ui.notEligibleAIBRiderParagraph"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "label" : "Future Insurability Option (FIO)",
              "subLabel" : "Increases your monthly benefit every three years after you buy the policy.",
              "enabled" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if (pmrl.greaterThan(pmrl.length(parent.futureInsurabilityOptionRider), Big('0')) || pmrl.isDefined(parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.additionalFields.specialRestrictionEmployee)) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var minAge = Big('18');\n    var maxAge = Big('51');\n    var valid = true;\n    if (pmrl.equal(pmrl.length(parent.futureInsurabilityOptionRider), Big('0')) && (pmrl.isDefined(parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.additionalFields.specialRestrictionEmployee) && (pmrl.lessThan(parent.parent.additionalFields.issueAge, minAge) || pmrl.greaterThan(parent.parent.additionalFields.issueAge, maxAge) || pmrl.equal(parent.parent.parent.additionalFields.specialRestrictionEmployee, 'GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL')))) {\n      valid = false;\n    }\n    return valid;\n  });\n}",
              "name" : "insureds[0].coverages.futureInsurabilityOptionRider",
              "group" : {
                "title" : "The Future Insurability Option has been added to your policy.",
                "rows" : [ {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "PARAGRAPH",
                    "label" : "",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "ui.fioBenefitSpaceholder"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "Future Insurability Option (FIO)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var minAge = Big('18');\n    var maxAge = Big('51');\n    var valid = false;\n    if (pmrl.equal(pmrl.length(parent.insureds[Big('0')].coverages.futureInsurabilityOptionRider), Big('0')) && (pmrl.isDefined(parent.insureds[Big('0')].additionalFields.issueAge) && pmrl.isDefined(parent.additionalFields.specialRestrictionEmployee)) && (pmrl.lessThan(parent.insureds[Big('0')].additionalFields.issueAge, minAge) || pmrl.greaterThan(parent.insureds[Big('0')].additionalFields.issueAge, maxAge) || pmrl.equal(parent.additionalFields.specialRestrictionEmployee, 'GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL'))) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "name" : "ui.notEligibleFIORiderSubheading"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Coverage is available to ages 18 thru 51.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var minAge = Big('18');\n    var maxAge = Big('51');\n    var valid = false;\n    if (pmrl.equal(pmrl.length(parent.insureds[Big('0')].coverages.futureInsurabilityOptionRider), Big('0')) && pmrl.isDefined(parent.insureds[Big('0')].additionalFields.issueAge) && (pmrl.lessThan(parent.insureds[Big('0')].additionalFields.issueAge, minAge) || pmrl.greaterThan(parent.insureds[Big('0')].additionalFields.issueAge, maxAge))) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "name" : "ui.notEligibleAIBRiderParagraphAge"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "FIO Benefit is not available to Government Employees.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if (pmrl.equal(pmrl.length(parent.insureds[Big('0')].coverages.futureInsurabilityOptionRider), Big('0')) && pmrl.isDefined(parent.additionalFields.specialRestrictionEmployee) && pmrl.equal(parent.additionalFields.specialRestrictionEmployee, 'GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL')) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "name" : "ui.notEligibleAIBRiderParagraphSpecialRestriction"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "Optional SIS Benefit:",
              "enabled" : "true",
              "maxLength" : "40",
              "visible" : "true",
              "name" : "ui.increaseOptionsHeader"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "label" : "Social Insurance Supplement (SIS) Benefit",
              "subLabel" : "Lowers the premium since the benefit you receive is the amount of monthly income you purchase, less any benefits provided by social security.",
              "enabled" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if (pmrl.greaterThan(pmrl.length(parent.sis), Big('0')) || pmrl.isDefined(parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.additionalFields.specialRestrictionEmployee) && pmrl.isDefined(parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.benefitPeriod)) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var minAge = Big('18');\n    var maxAge = Big('61');\n    var valid = true;\n    if (pmrl.equal(pmrl.length(parent.sis), Big('0')) && (pmrl.isDefined(parent.parent.parent.benefitPeriod) && pmrl.isDefined(parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.additionalFields.specialRestrictionEmployee) && (pmrl.lessThan(parent.parent.additionalFields.issueAge, minAge) || pmrl.greaterThan(parent.parent.additionalFields.issueAge, maxAge) || pmrl.equal(parent.parent.parent.additionalFields.specialRestrictionEmployee, 'GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL') || pmrl.equal(parent.parent.parent.benefitPeriod, 'BENEFIT_PERIOD_6MO') || pmrl.equal(parent.parent.parent.benefitPeriod, 'BENEFIT_PERIOD_1YR')))) {\n      valid = false;\n    }\n    return valid;\n  });\n}",
              "name" : "insureds[0].coverages.sis",
              "group" : {
                "title" : "The Social Insurance Supplement Benefit has been added to your policy.",
                "rows" : [ {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Select SIS Benefit Amount Type:",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "insureds[0].coverages.sis[$].additionalFields.sisBenefitAmountType"
                  }, {
                    "type" : "PARAGRAPH",
                    "label" : "",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "ui.sisBenefitSpaceholder"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "NUMBER",
                    "label" : "Monthly SIS Base Benefit:",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.sisBenefitAmountType, 'SPECIFY');\n  });\n}",
                    "name" : "insureds[0].coverages.sis[$].additionalFields.sisSpecifiedBenefitAmount"
                  }, {
                    "type" : "PARAGRAPH",
                    "label" : "",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "ui.sisBenefitSpaceholder"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "NUMBER",
                    "label" : "Monthly SIS Base Benefit:",
                    "enabled" : "false",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.sisBenefitAmountType, 'MAXIMUM');\n  });\n}",
                    "name" : "insureds[0].coverages.sis[$].additionalFields.sisMaximumBenefitAmount"
                  }, {
                    "type" : "PARAGRAPH",
                    "label" : "",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "ui.sisBenefitSpaceholder"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "Social Insurance Supplement (SIS) Benefit",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var minAge = Big('18');\n    var maxAge = Big('61');\n    var valid = false;\n    if (pmrl.equal(pmrl.length(parent.insureds[Big('0')].coverages.sis), Big('0')) && (pmrl.isDefined(parent.benefitPeriod) && pmrl.isDefined(parent.insureds[Big('0')].additionalFields.issueAge) && pmrl.isDefined(parent.additionalFields.specialRestrictionEmployee)) && (pmrl.lessThan(parent.insureds[Big('0')].additionalFields.issueAge, minAge) || pmrl.greaterThan(parent.insureds[Big('0')].additionalFields.issueAge, maxAge) || pmrl.equal(parent.additionalFields.specialRestrictionEmployee, 'GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL') || pmrl.equal(parent.benefitPeriod, 'BENEFIT_PERIOD_6MO') || pmrl.equal(parent.benefitPeriod, 'BENEFIT_PERIOD_1YR'))) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "name" : "ui.notEligibleSISRiderSubheading"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Coverage is available to ages 18 thru 61.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var minAge = Big('18');\n    var maxAge = Big('61');\n    var valid = false;\n    if (pmrl.equal(pmrl.length(parent.insureds[Big('0')].coverages.sis), Big('0')) && pmrl.isDefined(parent.insureds[Big('0')].additionalFields.issueAge) && (pmrl.lessThan(parent.insureds[Big('0')].additionalFields.issueAge, minAge) || pmrl.greaterThan(parent.insureds[Big('0')].additionalFields.issueAge, maxAge))) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "name" : "ui.notEligibleSISRiderParagraphAge"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "SIS is not available to Government Employees.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if (pmrl.equal(pmrl.length(parent.insureds[Big('0')].coverages.sis), Big('0')) && pmrl.isDefined(parent.additionalFields.specialRestrictionEmployee) && pmrl.equal(parent.additionalFields.specialRestrictionEmployee, 'GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL')) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "name" : "ui.notEligibleSISRiderParagraphASpecialRestrictions"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "SIS is not available to Benefit Periods of 6 Months and 1 Year.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if (pmrl.equal(pmrl.length(parent.insureds[Big('0')].coverages.sis), Big('0')) && pmrl.isDefined(parent.benefitPeriod) && (pmrl.equal(parent.benefitPeriod, 'BENEFIT_PERIOD_6MO') || pmrl.equal(parent.benefitPeriod, 'BENEFIT_PERIOD_1YR'))) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "name" : "ui.notEligibleSISRiderParagraphBenefitPeriod"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "HEADING",
              "label" : "Producer, please verify the following discounts for quoting purposes:",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.discountsAndProgramHeader"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Association Group",
              "description" : "A 15 percent premium savings is available if the insured or eligible spouse is a member of an approved association. The approved association’s program number must be included on the application.",
              "enabled" : "true",
              "visible" : "true",
              "name" : "discountAssociationGroup"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Association Name",
              "enabled" : "true",
              "maxLength" : "78",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.discountAssociationGroup), 'YES');\n  });\n}",
              "name" : "additionalFields.discountAssociationName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Association Number",
              "enabled" : "true",
              "maxLength" : "12",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.discountAssociationGroup), 'YES');\n  });\n}",
              "name" : "additionalFields.discountAssociationNumber"
            }, {
              "type" : "TEXT",
              "label" : "Date Joined (Mo./Yr.)",
              "enabled" : "true",
              "maxLength" : "37",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.discountAssociationGroup), 'YES');\n  });\n}",
              "name" : "additionalFields.discountAssociationJoinDate"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Common Employer",
              "description" : "A 15 percent premium savings is available to groups of three or more individuals working 30+ hours per week with a common employer but does not require employer sponsorship. Applications can be submitted all at one time or within a 12-month period. The 15 percent premium savings is not applied until the third application has been issued. At, which time, the premium savings is applied to each of the first two policies starting on the next billing anniversary. All future applications received that are associated with the same common employer will have the same premium savings applied if appropriately indicated on the Producer/Agent form.",
              "enabled" : "true",
              "visible" : "true",
              "name" : "discountCommonEmployer"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Group Number",
              "enabled" : "true",
              "maxLength" : "29",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.discountCommonEmployer), 'YES');\n  });\n}",
              "name" : "additionalFields.discountCommonGroupNumber"
            }, {
              "type" : "TEXT",
              "label" : "Employer Name",
              "enabled" : "true",
              "maxLength" : "42",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.discountCommonEmployer), 'YES');\n  });\n}",
              "name" : "additionalFields.discountCommonEmployerName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Employer Address",
              "enabled" : "true",
              "maxLength" : "40",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.discountCommonEmployer), 'YES');\n  });\n}",
              "name" : "additionalFields.discountCommonEmployerAddress"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "List all associated Common Employer Applicants",
              "enabled" : "true",
              "maxLength" : "95",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.discountCommonEmployer), 'YES');\n  });\n}",
              "name" : "additionalFields.discountCommonEmployerApplicantNames"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Self-Employed (submit financials)",
              "description" : "A 15 percent premium saving is available to individuals who meet the following eligibility criteria: Minimum two years in business, Minimum net income of $32,000 (after expenses and before taxes) for each of the past two years, and Minimum 20 percent ownership required. If applicant meets the requirements above, net income may be increased 20 percent for a maximum benefit increase of up to $2,000 monthly. This premium savings can be used in combination with the other savings up to 30 percent.",
              "enabled" : "true",
              "visible" : "true",
              "name" : "discountSelfEmployed"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Multi-Policy",
              "description" : "A 10 percent premium savings is available at issue to clients who apply for an individual Disability Income policy within 90 days of the application date or prior to an eligible Long-Term Care or Life Insurance policy from Mutual/United of Omaha. Qualifying Mutual of Omaha Long-Term Care policies include: MutualCare Secure Solution, MutualCare Custom Solution and MutualCare Worksite. Qualifying United of Omaha Life policies include: Term Life or Universal Life",
              "enabled" : "true",
              "visible" : "true",
              "name" : "discountMultiPolicy"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Life Policy Number",
              "enabled" : "true",
              "maxLength" : "24",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.discountMultiPolicy), 'YES');\n  });\n}",
              "name" : "additionalFields.discountMultiPolicyLifePolicyNumber"
            }, {
              "type" : "TEXT",
              "label" : "LTC Policy Number",
              "enabled" : "true",
              "maxLength" : "21",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.discountMultiPolicy), 'YES');\n  });\n}",
              "name" : "additionalFields.discountMultiPolicyLtcPolicyNumber"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Two Person Household",
              "description" : "A 10 percent premium savings is available to individuals who meet the following eligibility criteria: Available when both DI policies are issued under the same policy form/benefit and Any partner that was previously issued under a different policy form/benefit is not eligible for the Two-Person Household discount. A Two-Person Household is defined as a) your spouse to whom you are legally married; b) your registered domestic partner or civil union partner; or c) an adult person who: 1. share a serious and committed personal relationship with you that is intended to be lifelong, 2. has shared a common permanent residence with you on a continuous basis for the most recent three years, 3. is not married, a domestic partner, a civil union partner, or in a committed personal relationship to anyone else; and 4. is not related to you in any way that would bar marriage in the state where you and he or she reside. This premium savings can be used in combination with the other savings up to 30 percent",
              "enabled" : "true",
              "visible" : "true",
              "name" : "discountHousehold"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Full name of Partner also applying or Partner's existing Disability Policy Number",
              "enabled" : "true",
              "maxLength" : "23",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.discountHousehold), 'YES');\n  });\n}",
              "name" : "additionalFields.discountHouseholdFullName"
            } ]
          } ],
          "title" : "Policy Information"
        }, {
          "rows" : [ {
            "indent" : "0",
            "fields" : [ {
              "type" : "HEADING",
              "label" : "Occupation Information",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.occupationInformationLabel"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "What is your primary occupation?",
              "description" : "List occupation, not title.",
              "enabled" : "true",
              "maxLength" : "52",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.occupationFactors.primaryOccupation"
            }, {
              "type" : "TEXT",
              "label" : "What type of business or industry do you work in?",
              "enabled" : "true",
              "maxLength" : "40",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.occupationFactors.typeOfBusinessOrIndustry"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "How long have you been with your current employer or owned your business?",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.occupationFactors.howLongWithCurrentEmployerOrOwnedBusiness"
            }, {
              "type" : "TEXT",
              "label" : "How many hours per week do you work in your primary occupation?",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.occupationFactors.workHoursPerWeekInPrimaryOcc"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "What are your job duties and percentage of time spent in each?",
              "description" : "Daily duties and percentage of time spent on each",
              "enabled" : "true",
              "maxLength" : "155",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.occupationFactors.jobDutiesAndPercentageOfTimeSpentInEach"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 6 months, have you had any restrictions or limitations where you were unable to work full-time at your primary occupation?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.occupationFactors.beenAbleToWorkFullTimeWithNoRestrictions"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Provide date, reason, diagnosis",
              "enabled" : "true",
              "maxLength" : "155",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.beenAbleToWorkFullTimeWithNoRestrictions), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.occupationFactors.detailOfRestrictions"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Do you work out of your home?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.occupationFactors.workOutOfYourHome"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "How many hours per week?",
              "enabled" : "true",
              "maxLength" : "50",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.workOutOfYourHome), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.occupationFactors.howManyHoursPerWeek"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Employer or business name",
              "enabled" : "true",
              "maxLength" : "57",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.occupationFactors.employerOrBusinessName"
            }, {
              "type" : "TEXT",
              "label" : "Business website",
              "enabled" : "true",
              "maxLength" : "65",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.occupationFactors.businessWebsite"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Employer or business address",
              "enabled" : "true",
              "maxLength" : "55",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.occupationFactors.employerOrBusinessAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Do you have any ownership in the company you work for?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.occupationFactors.ownershipInCompanyWorkFor"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "NUMBER",
              "label" : "Percentage of ownership",
              "enabled" : "true",
              "maxLength" : "6",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.ownershipInCompanyWorkFor), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.occupationFactors.ownershipPercentage"
            }, {
              "type" : "TEXT",
              "label" : "How many people are employed by your business/organization?",
              "enabled" : "true",
              "maxLength" : "19",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.ownershipInCompanyWorkFor), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.occupationFactors.ownershipPeopleEmployed"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Type of business:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.ownershipInCompanyWorkFor), 'YES');\n  });\n}",
              "name" : "ui.ownershipTypeOfBusiness"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Sole Proprietor/1099",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.ownershipInCompanyWorkFor), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.occupationFactors.ownershipTypeOfBusinessSoleProprietor1099"
            }, {
              "type" : "CHECKBOX",
              "label" : "Partnership",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.ownershipInCompanyWorkFor), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.occupationFactors.ownershipTypeOfBusinessPartnership"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "LLC",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.ownershipInCompanyWorkFor), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.occupationFactors.ownershipTypeOfBusinessLlc"
            }, {
              "type" : "CHECKBOX",
              "label" : "S Corporation",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.ownershipInCompanyWorkFor), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.occupationFactors.ownershipTypeOfBusinessSCorporation"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "C Corporation",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.ownershipInCompanyWorkFor), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.occupationFactors.ownershipTypeOfBusinessCCorporation"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Do you have any other full or part-time employment?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.occupationFactors.otherFullOrPartTimeEmployment"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "What is your occupation?",
              "description" : "List occupation, not title.",
              "enabled" : "true",
              "maxLength" : "49",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.otherFullOrPartTimeEmployment), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.occupationFactors.otherOccupation"
            }, {
              "type" : "TEXT",
              "label" : "How many hours per week do you work in this occupation?",
              "enabled" : "true",
              "maxLength" : "23",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.otherFullOrPartTimeEmployment), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.occupationFactors.otherOccWorkHoursPerWeek"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "What are your job duties and percentage of time spent in each?",
              "description" : "Daily duties and percentage of time spent on each",
              "enabled" : "true",
              "maxLength" : "140",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.otherFullOrPartTimeEmployment), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.occupationFactors.otherJobDutiesAndPercentageOfTimeSpentInEach"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Are you an independent contractor/1099 or do you have any ownership in the company you work for?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.otherFullOrPartTimeEmployment), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "NUMBER",
              "label" : "Percentage of ownership",
              "enabled" : "true",
              "maxLength" : "6",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.occupationFactors.otherOwnershipPercentage"
            }, {
              "type" : "TEXT",
              "label" : "How many people are employed by your business/organization?",
              "enabled" : "true",
              "maxLength" : "9",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.occupationFactors.otherOwnershipPeopleEmployed"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Type of business:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.occupationFactors.otherOwnershipTypeOfBusiness"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Sole Proprietor/1099",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.occupationFactors.otherOwnershipTypeOfBusinessSoleProprietor1099"
            }, {
              "type" : "CHECKBOX",
              "label" : "Partnership",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.occupationFactors.otherOwnershipTypeOfBusinessPartnership"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "LLC",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.occupationFactors.otherOwnershipTypeOfBusinessLlc"
            }, {
              "type" : "CHECKBOX",
              "label" : "S Corporation",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.occupationFactors.otherOwnershipTypeOfBusinessSCorporation"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "C Corporation",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.occupationFactors.otherOwnershipTypeOfBusinessCCorporation"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Do you plan on changing employers in the next 90 days?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.occupationFactors.planToChangeEmployers"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Provide details",
              "enabled" : "true",
              "maxLength" : "60",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.planToChangeEmployers), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.occupationFactors.planToChangeEmployersDetails"
            } ]
          } ],
          "title" : "Occupation Info"
        }, {
          "rows" : [ {
            "indent" : "0",
            "fields" : [ {
              "type" : "HEADING",
              "label" : "Financial Information",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.financialAndOtherCoverageLabel"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "Complete Income as shown on your Federal Income Tax Return:",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.infoOnTaxReturnLabel"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Earned Income: Employee (owner or non-owner) salary plus bonus (Form W-2)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.ownershipInCompanyWorkFor), 'NO') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'NO') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.ownershipInCompanyWorkFor), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.ownershipTypeOfBusinessSCorporation), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.ownershipTypeOfBusinessCCorporation), 'YES')) || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.otherOwnershipTypeOfBusinessSCorporation), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.otherOwnershipTypeOfBusinessCCorporation), 'YES'));\n  });\n}",
              "name" : "ui.earnedIncomeLabel"
            }, {
              "type" : "NUMBER",
              "label" : "Current Year/YTD",
              "enabled" : "true",
              "maxLength" : "9",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'NO') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'NO') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessSCorporation), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessCCorporation), 'YES')) || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessSCorporation), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessCCorporation), 'YES'));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.earnedIncomeYtd"
            }, {
              "type" : "NUMBER",
              "label" : "Last Year",
              "enabled" : "true",
              "maxLength" : "9",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'NO') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'NO') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessSCorporation), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessCCorporation), 'YES')) || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessSCorporation), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessCCorporation), 'YES'));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.earnedIncomeLastYr"
            }, {
              "type" : "NUMBER",
              "label" : "2 Years Ago",
              "enabled" : "true",
              "maxLength" : "9",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'NO') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'NO') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessSCorporation), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessCCorporation), 'YES')) || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessSCorporation), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessCCorporation), 'YES'));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.earnedIncome2YrAgo"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Sole Proprietor or 1099 Employee: Net income after expenses (Form 1040, Schedule C)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.ownershipTypeOfBusinessSoleProprietor1099), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.otherOwnershipTypeOfBusinessSoleProprietor1099), 'YES');\n  });\n}",
              "name" : "ui.soleProprietorshipIncomeLabel"
            }, {
              "type" : "NUMBER",
              "label" : "Current Year/YTD",
              "description" : "A sole proprietor or 1099 employee refers to a business owned by one individual. The business is not a separate tax entity, and the sole proprietor has unlimited personal liability. Earned income is the net profit of the business or profession, after expenses, but before taxes. While it is common for a sole proprietor to include some personal expenses with business expenses on the Schedule C, those personal expenses cannot be added back to net income to produce a higher earned income. Depreciation cannot be added back to net income to produce a higher earned income.",
              "enabled" : "true",
              "maxLength" : "9",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessSoleProprietor1099), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessSoleProprietor1099), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.soleProprietorOr1099NetIncomeYtd"
            }, {
              "type" : "NUMBER",
              "label" : "Last Year",
              "description" : "A sole proprietor or 1099 employee refers to a business owned by one individual. The business is not a separate tax entity, and the sole proprietor has unlimited personal liability. Earned income is the net profit of the business or profession, after expenses, but before taxes. While it is common for a sole proprietor to include some personal expenses with business expenses on the Schedule C, those personal expenses cannot be added back to net income to produce a higher earned income. Depreciation cannot be added back to net income to produce a higher earned income.",
              "enabled" : "true",
              "maxLength" : "9",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessSoleProprietor1099), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessSoleProprietor1099), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.soleProprietorOr1099NetIncomeLastYr"
            }, {
              "type" : "NUMBER",
              "label" : "2 Years Ago",
              "description" : "A sole proprietor or 1099 employee refers to a business owned by one individual. The business is not a separate tax entity, and the sole proprietor has unlimited personal liability. Earned income is the net profit of the business or profession, after expenses, but before taxes. While it is common for a sole proprietor to include some personal expenses with business expenses on the Schedule C, those personal expenses cannot be added back to net income to produce a higher earned income. Depreciation cannot be added back to net income to produce a higher earned income.",
              "enabled" : "true",
              "maxLength" : "9",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessSoleProprietor1099), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessSoleProprietor1099), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.soleProprietorOr1099NetIncome2YrAgo"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Partnership or LLC: Net income after expenses (Form 1040, Schedule E or K1)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.ownershipTypeOfBusinessLlc), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.ownershipTypeOfBusinessPartnership), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.otherOwnershipTypeOfBusinessPartnership), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.otherOwnershipTypeOfBusinessLlc), 'YES');\n  });\n}",
              "name" : "ui.partnerOrLlcIncomeLabel"
            }, {
              "type" : "NUMBER",
              "label" : "Current Year/YTD",
              "description" : "A partnership is an association of two or more persons in business for profit as co-owners. The partnership is not a separate tax entity, and each partner has unlimited personal liability. A partner’s proportionate share of the net profit/net loss of the business or profession is considered earned income. The guidelines for personal expenses and depreciation apply to the earned income of a partner the same as a sole proprietor. An LLC is generally not a separate tax entity. However, LLC owners may have limited personal liability. Earned income is the owner’s proportionate share of the net profit/net loss of the business or profession plus any salary, wages, regular overtime, bonus and commissions (less expenses).",
              "enabled" : "true",
              "maxLength" : "9",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessLlc), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessPartnership), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessPartnership), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessLlc), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.partnershipOrLlcYtd"
            }, {
              "type" : "NUMBER",
              "label" : "Last Year",
              "description" : "A partnership is an association of two or more persons in business for profit as co-owners. The partnership is not a separate tax entity, and each partner has unlimited personal liability. A partner’s proportionate share of the net profit/net loss of the business or profession is considered earned income. The guidelines for personal expenses and depreciation apply to the earned income of a partner the same as a sole proprietor. An LLC is generally not a separate tax entity. However, LLC owners may have limited personal liability. Earned income is the owner’s proportionate share of the net profit/net loss of the business or profession plus any salary, wages, regular overtime, bonus and commissions (less expenses).",
              "enabled" : "true",
              "maxLength" : "9",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessLlc), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessPartnership), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessPartnership), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessLlc), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.partnershipOrLlcLastYr"
            }, {
              "type" : "NUMBER",
              "label" : "2 Years Ago",
              "description" : "A partnership is an association of two or more persons in business for profit as co-owners. The partnership is not a separate tax entity, and each partner has unlimited personal liability. A partner’s proportionate share of the net profit/net loss of the business or profession is considered earned income. The guidelines for personal expenses and depreciation apply to the earned income of a partner the same as a sole proprietor. An LLC is generally not a separate tax entity. However, LLC owners may have limited personal liability. Earned income is the owner’s proportionate share of the net profit/net loss of the business or profession plus any salary, wages, regular overtime, bonus and commissions (less expenses).",
              "enabled" : "true",
              "maxLength" : "9",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessLlc), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessPartnership), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessPartnership), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessLlc), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.partnershipOrLlc2YrAgo"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "S Corporation: Net income after expenses (Form 1040, Schedule E or 1120S)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.ownershipTypeOfBusinessSCorporation), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.otherOwnershipTypeOfBusinessSCorporation), 'YES');\n  });\n}",
              "name" : "ui.sCorporationIncomeLabel"
            }, {
              "type" : "NUMBER",
              "label" : "Current Year/YTD",
              "description" : "An S Corporation is a separate and distinct legal entity with perpetual existence. All profits and losses of the business are divided and distributed to the individual shareholders and are reportable on the shareholders’ individual tax returns.",
              "enabled" : "true",
              "maxLength" : "9",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessSCorporation), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessSCorporation), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.sCorporationNetIncomeYtd"
            }, {
              "type" : "NUMBER",
              "label" : "Last Year",
              "description" : "An S Corporation is a separate and distinct legal entity with perpetual existence. All profits and losses of the business are divided and distributed to the individual shareholders and are reportable on the shareholders’ individual tax returns.",
              "enabled" : "true",
              "maxLength" : "9",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessSCorporation), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessSCorporation), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.sCorporationNetIncomeLastYr"
            }, {
              "type" : "NUMBER",
              "label" : "2 Years Ago",
              "description" : "An S Corporation is a separate and distinct legal entity with perpetual existence. All profits and losses of the business are divided and distributed to the individual shareholders and are reportable on the shareholders’ individual tax returns.",
              "enabled" : "true",
              "maxLength" : "9",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessSCorporation), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessSCorporation), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.sCorporationNetIncome2YrAgo"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "C Corporation: Net income after expenses (Form 1040, Schedule E or 1120)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.ownershipTypeOfBusinessCCorporation), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.otherOwnershipTypeOfBusinessCCorporation), 'YES');\n  });\n}",
              "name" : "ui.cCorporationIncomeLabel"
            }, {
              "type" : "NUMBER",
              "label" : "Current Year/YTD",
              "description" : "A C Corporation is a separate and distinct legal entity with perpetual existence. It is a separate entity for legal and tax purposes, and shareholders of a corporation have limited liability.",
              "enabled" : "true",
              "maxLength" : "9",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessCCorporation), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessCCorporation), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.cCorporationNetIncomeYtd"
            }, {
              "type" : "NUMBER",
              "label" : "Last Year",
              "description" : "A C Corporation is a separate and distinct legal entity with perpetual existence. It is a separate entity for legal and tax purposes, and shareholders of a corporation have limited liability.",
              "enabled" : "true",
              "maxLength" : "9",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessCCorporation), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessCCorporation), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.cCorporationNetIncomeLastYr"
            }, {
              "type" : "NUMBER",
              "label" : "2 Years Ago",
              "description" : "A C Corporation is a separate and distinct legal entity with perpetual existence. It is a separate entity for legal and tax purposes, and shareholders of a corporation have limited liability.",
              "enabled" : "true",
              "maxLength" : "9",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipTypeOfBusinessCCorporation), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherOwnershipTypeOfBusinessCCorporation), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.cCorporationNetIncome2YrAgo"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Pension plan or Profit-Sharing: Contributions made on your behalf, by a business you own",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.ownershipInCompanyWorkFor), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES');\n  });\n}",
              "name" : "ui.pensionOrProfitSharingIncomeLabel"
            }, {
              "type" : "NUMBER",
              "label" : "Current Year/YTD",
              "description" : "A Pension Plan is a retirement plan that requires an employer to make contributions into a pool of funds set aside for a worker’s future benefit. Profit Sharing is a plan that gives employees a share in the profits of a company.",
              "enabled" : "true",
              "maxLength" : "9",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.pensionPlanOrProfitShareYtd"
            }, {
              "type" : "NUMBER",
              "label" : "Last Year",
              "description" : "A Pension Plan is a retirement plan that requires an employer to make contributions into a pool of funds set aside for a worker’s future benefit. Profit Sharing is a plan that gives employees a share in the profits of a company.",
              "enabled" : "true",
              "maxLength" : "9",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.pensionPlanOrProfitShareLastYr"
            }, {
              "type" : "NUMBER",
              "label" : "2 Years Ago",
              "description" : "A Pension Plan is a retirement plan that requires an employer to make contributions into a pool of funds set aside for a worker’s future benefit. Profit Sharing is a plan that gives employees a share in the profits of a company.",
              "enabled" : "true",
              "maxLength" : "9",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.ownershipInCompanyWorkFor), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.otherFullOrPartTimeEmployment), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.occupationFactors.independentContractorOrOwnershipOfCompanyYouWorkFor), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.pensionPlanOrProfitShare2YrAgo"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Total Earned Income: Sum of each income source for each year",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.totalEarnedIncomeLabel"
            }, {
              "type" : "NUMBER",
              "label" : "Current Year/YTD",
              "enabled" : "false",
              "maxLength" : "9",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.financialFactors.totalEarnedIncomeYtd"
            }, {
              "type" : "NUMBER",
              "label" : "Last Year",
              "enabled" : "false",
              "maxLength" : "9",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.financialFactors.totalEarnedIncomeLastYr"
            }, {
              "type" : "NUMBER",
              "label" : "2 Years Ago",
              "enabled" : "false",
              "maxLength" : "9",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.financialFactors.totalEarnedIncome2YrAgo"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Do you currently have unearned income which includes capital gains, interest, dividends, net rental income, pensions, annuities, alimony and royalties?",
              "description" : "Unearned (passive) income is defined as income that does not come from employment. Sources of unearned income might include income from rental properties, dividends, interest, royalties, retirement/ pension benefits, and capital gains. Any amount greater than 10% of earned income or $30,000 will be considered as other disability benefits at the time of underwriting.",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.financialFactors.unearnedIncomeCapitalGainsPensionsRoyalties"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Is unearned greater than 10% of earned income, or $30,000?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.unearnedIncomeCapitalGainsPensionsRoyalties), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.unearnedIncomeGreaterThanEarnedIncome"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Provide sources and amounts",
              "enabled" : "true",
              "maxLength" : "46",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.unearnedIncomeCapitalGainsPensionsRoyalties), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.unearnedIncomeGreaterThanEarnedIncome), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.unearnedIncomeGreaterThanEarnedIncomeItemize"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Is net worth, excluding primary residence, greater than $10,000,000?",
              "description" : "Net Worth is defined as the value of a person’s assets, including cash, minus all liabilities. The amount by which the individual’s assets exceed their liabilities is considered the net worth of that person. In order to determine net worth for underwriting purposes, the primary personal residence and personal belongings may be ignored. Benefits may be limited for individuals with net worth in excess of $10 million.",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.financialFactors.netWorthGreaterThan10Mil"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you requested (filed a claim) or received disability benefits (including workers compensation, state disability or any other source)?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.financialFactors.filedClaim"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date, reason, diagnosis",
              "enabled" : "true",
              "maxLength" : "155",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.filedClaim), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.filedClaimDetails"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Have you personally, or any business owned in whole or part by you, filed for bankruptcy?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.financialFactors.bankruptcy"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Provide details including type and discharge date, if applicable",
              "enabled" : "true",
              "maxLength" : "78",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.bankruptcy), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.bankruptcyDetails"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "Other Coverage and Replacement Information",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.otherCoverageLabel"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Do you have any group or individual Disability insurance in force?",
              "description" : "Other Coverage includes disability coverages that pay a benefit upon your inability to work.",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].additionalFields.insuranceInForce"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Do you have any group or individual Disability insurance pending or applied for in the last 12 months?",
              "description" : "Other Coverage includes disability coverages that pay a benefit upon your inability to work.",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].additionalFields.insurancePendingOrAppliedFor"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Will you become eligible for any group or individual Disability insurance in the next 36 months after a qualifying period of employment has been met?",
              "description" : "Other Coverage includes disability coverages that pay a benefit upon your inability to work.",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].additionalFields.eligibleForAnyOtherInsurance"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "List all Disability Income, Overhead Expense, and Buy-Out in force and all coverage(s) applied for in the last 12 months with all companies including disability benefits provided under group, pension, or retirement plans, salary continuation plans, association plans, credit insurance plans, and any other accident, sickness, or health coverage. List the type of coverage in force and indicate if it is individual pay (I) or employer pay (E).",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.isDefined(parent.insureds[Big('0')].additionalFields.insuranceInForce) && pmrl.isDefined(parent.insureds[Big('0')].additionalFields.insurancePendingOrAppliedFor) && pmrl.isDefined(parent.insureds[Big('0')].additionalFields.eligibleForAnyOtherInsurance) && (pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].additionalFields.insuranceInForce), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].additionalFields.insurancePendingOrAppliedFor), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].additionalFields.eligibleForAnyOtherInsurance), 'YES'))) {\n      valid = true;\n    } else {\n      valid = false;\n    }\n    return valid;\n  });\n}",
              "name" : "ui.allOtherCoverageExplanationLabel"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.isDefined(parent.insureds[Big('0')].additionalFields.insuranceInForce) && pmrl.isDefined(parent.insureds[Big('0')].additionalFields.insurancePendingOrAppliedFor) && pmrl.isDefined(parent.insureds[Big('0')].additionalFields.eligibleForAnyOtherInsurance) && (pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].additionalFields.insuranceInForce), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].additionalFields.insurancePendingOrAppliedFor), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].additionalFields.eligibleForAnyOtherInsurance), 'YES'))) {\n      valid = true;\n    } else {\n      valid = false;\n    }\n    return valid;\n  });\n}",
              "name" : "ui.allOtherCoverageTableSpace"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "label" : "Other Coverage Details",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.greaterThan(pmrl.length(parent.otherCoverages), Big('0')) || pmrl.isDefined(parent.additionalFields.insuranceInForce) && pmrl.isDefined(parent.additionalFields.insurancePendingOrAppliedFor) && pmrl.isDefined(parent.additionalFields.eligibleForAnyOtherInsurance) && (pmrl.equal(pmrl.toUpperCase(parent.additionalFields.insuranceInForce), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.additionalFields.insurancePendingOrAppliedFor), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.additionalFields.eligibleForAnyOtherInsurance), 'YES'))) {\n      valid = true;\n    } else {\n      valid = false;\n    }\n    return valid;\n  });\n}",
              "name" : "insureds[0].otherCoverages",
              "group" : {
                "title" : "",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Company",
                    "enabled" : "true",
                    "maxLength" : "22",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.greaterThan(pmrl.length(parent.parent.otherCoverages), Big('0')) || pmrl.isDefined(parent.parent.additionalFields.insuranceInForce) && pmrl.isDefined(parent.parent.additionalFields.insurancePendingOrAppliedFor) && pmrl.isDefined(parent.parent.additionalFields.eligibleForAnyOtherInsurance) && (pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.insuranceInForce), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.insurancePendingOrAppliedFor), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.eligibleForAnyOtherInsurance), 'YES'))) {\n      valid = true;\n    } else {\n      valid = false;\n    }\n    return valid;\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].companyName"
                  }, {
                    "type" : "TEXT",
                    "label" : "Policy No.",
                    "enabled" : "true",
                    "maxLength" : "9",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.greaterThan(pmrl.length(parent.parent.otherCoverages), Big('0')) || pmrl.isDefined(parent.parent.additionalFields.insuranceInForce) && pmrl.isDefined(parent.parent.additionalFields.insurancePendingOrAppliedFor) && pmrl.isDefined(parent.parent.additionalFields.eligibleForAnyOtherInsurance) && (pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.insuranceInForce), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.insurancePendingOrAppliedFor), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.eligibleForAnyOtherInsurance), 'YES'))) {\n      valid = true;\n    } else {\n      valid = false;\n    }\n    return valid;\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].policyNumber"
                  }, {
                    "type" : "SELECT",
                    "label" : "Type Code",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.greaterThan(pmrl.length(parent.parent.otherCoverages), Big('0')) || pmrl.isDefined(parent.parent.additionalFields.insuranceInForce) && pmrl.isDefined(parent.parent.additionalFields.insurancePendingOrAppliedFor) && pmrl.isDefined(parent.parent.additionalFields.eligibleForAnyOtherInsurance) && (pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.insuranceInForce), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.insurancePendingOrAppliedFor), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.eligibleForAnyOtherInsurance), 'YES'))) {\n      valid = true;\n    } else {\n      valid = false;\n    }\n    return valid;\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].coverageType"
                  }, {
                    "type" : "SELECT",
                    "label" : "Status Code",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.greaterThan(pmrl.length(parent.parent.otherCoverages), Big('0')) || pmrl.isDefined(parent.parent.additionalFields.insuranceInForce) && pmrl.isDefined(parent.parent.additionalFields.insurancePendingOrAppliedFor) && pmrl.isDefined(parent.parent.additionalFields.eligibleForAnyOtherInsurance) && (pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.insuranceInForce), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.insurancePendingOrAppliedFor), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.eligibleForAnyOtherInsurance), 'YES'))) {\n      valid = true;\n    } else {\n      valid = false;\n    }\n    return valid;\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].coverageStatus"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Elimination Period",
                    "enabled" : "true",
                    "maxLength" : "6",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) || pmrl.isDefined(parent.parent.parent.additionalFields.insuranceInForce) && pmrl.isDefined(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor) && pmrl.isDefined(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance) && (pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.insuranceInForce), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance), 'YES'))) {\n      valid = true;\n    } else {\n      valid = false;\n    }\n    return valid;\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].additionalFields.eliminationPeriod"
                  }, {
                    "type" : "TEXT",
                    "label" : "Benefit Period",
                    "enabled" : "true",
                    "maxLength" : "7",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) || pmrl.isDefined(parent.parent.parent.additionalFields.insuranceInForce) && pmrl.isDefined(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor) && pmrl.isDefined(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance) && (pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.insuranceInForce), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance), 'YES'))) {\n      valid = true;\n    } else {\n      valid = false;\n    }\n    return valid;\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].additionalFields.benefitPeriod"
                  }, {
                    "type" : "SELECT",
                    "label" : "Payor",
                    "enabled" : "true",
                    "maxLength" : "9",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.greaterThan(pmrl.length(parent.parent.otherCoverages), Big('0')) || pmrl.isDefined(parent.parent.additionalFields.insuranceInForce) && pmrl.isDefined(parent.parent.additionalFields.insurancePendingOrAppliedFor) && pmrl.isDefined(parent.parent.additionalFields.eligibleForAnyOtherInsurance) && (pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.insuranceInForce), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.insurancePendingOrAppliedFor), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.eligibleForAnyOtherInsurance), 'YES'))) {\n      valid = true;\n    } else {\n      valid = false;\n    }\n    return valid;\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].payorType"
                  }, {
                    "type" : "SELECT",
                    "label" : "Replacing or Reducing",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.greaterThan(pmrl.length(parent.parent.otherCoverages), Big('0')) || pmrl.isDefined(parent.parent.additionalFields.insuranceInForce) && pmrl.isDefined(parent.parent.additionalFields.insurancePendingOrAppliedFor) && pmrl.isDefined(parent.parent.additionalFields.eligibleForAnyOtherInsurance) && (pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.insuranceInForce), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.insurancePendingOrAppliedFor), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.eligibleForAnyOtherInsurance), 'YES'))) {\n      valid = true;\n    } else {\n      valid = false;\n    }\n    return valid;\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].coverageReplacing"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Monthly Benefit Type:",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) || pmrl.isDefined(parent.parent.parent.additionalFields.insuranceInForce) && pmrl.isDefined(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor) && pmrl.isDefined(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance) && (pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.insuranceInForce), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance), 'YES'))) {\n      valid = true;\n    } else {\n      valid = false;\n    }\n    return valid;\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].additionalFields.otherCoverageMonthlyBenefitType"
                  }, {
                    "type" : "PARAGRAPH",
                    "label" : "",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].additionalFields.otherCoverageQuestion), 'YES');\n  });\n}",
                    "name" : "ui.monthlyBenefitTypeSpaceHolder"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "NUMBER",
                    "label" : "Specified Amount:",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) && (pmrl.isDefined(parent.parent.parent.additionalFields.insuranceInForce) && pmrl.isDefined(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor) && pmrl.isDefined(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance) && pmrl.equal(parent.otherCoverageMonthlyBenefitType, 'SPECIFIED_AMOUNT')) && (pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.insuranceInForce), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance), 'YES'))) {\n      valid = true;\n    } else {\n      valid = false;\n    }\n    return valid;\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].additionalFields.otherCoverageSpecifiedAmount"
                  }, {
                    "type" : "PARAGRAPH",
                    "label" : "",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].additionalFields.otherCoverageQuestion), 'YES');\n  });\n}",
                    "name" : "ui.specifiedAmountSpaceHolder"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "NUMBER",
                    "label" : "Percent of Income:",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) && (pmrl.isDefined(parent.parent.parent.additionalFields.insuranceInForce) && pmrl.isDefined(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor) && pmrl.isDefined(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance) && pmrl.equal(parent.otherCoverageMonthlyBenefitType, 'PERCENT_OF_INCOME')) && (pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.insuranceInForce), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance), 'YES'))) {\n      valid = true;\n    } else {\n      valid = false;\n    }\n    return valid;\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].additionalFields.otherCoveragePercentOfIncome"
                  }, {
                    "type" : "NUMBER",
                    "label" : "Monthly Cap",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid;\n    if (pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) && (pmrl.isDefined(parent.parent.parent.additionalFields.insuranceInForce) && pmrl.isDefined(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor) && pmrl.isDefined(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance) && pmrl.equal(parent.otherCoverageMonthlyBenefitType, 'PERCENT_OF_INCOME')) && (pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.insuranceInForce), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance), 'YES'))) {\n      valid = true;\n    } else {\n      valid = false;\n    }\n    return valid;\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].additionalFields.otherCoveragePercentMonthlyCap"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Benefits of Our Plan:",
                    "enabled" : "true",
                    "maxLength" : "100",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if ((pmrl.equal(parent.parent.parent.additionalFields.insuranceInForce, \"YES\") || pmrl.equal(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor, \"YES\") || pmrl.equal(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance, \"YES\")) && pmrl.equal(parent.parent.parent.residentialAddress.state, 'SC') && pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) && pmrl.equal(parent.parent.coverageReplacing, 'YES')) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].additionalFields.scReplFormBenefitsOurPlan"
                  }, {
                    "type" : "TEXT",
                    "label" : "Benefits of Existing Plan:",
                    "enabled" : "true",
                    "maxLength" : "100",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if ((pmrl.equal(parent.parent.parent.additionalFields.insuranceInForce, \"YES\") || pmrl.equal(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor, \"YES\") || pmrl.equal(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance, \"YES\")) && pmrl.equal(parent.parent.parent.residentialAddress.state, 'SC') && pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) && pmrl.equal(parent.parent.coverageReplacing, 'YES')) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].additionalFields.scReplFormBenefitsExisitingPlan"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Renewal Provision of Our Plan:",
                    "enabled" : "true",
                    "maxLength" : "65",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if ((pmrl.equal(parent.parent.parent.additionalFields.insuranceInForce, \"YES\") || pmrl.equal(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor, \"YES\") || pmrl.equal(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance, \"YES\")) && pmrl.equal(parent.parent.parent.residentialAddress.state, 'SC') && pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) && pmrl.equal(parent.parent.coverageReplacing, 'YES')) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].additionalFields.scReplFormRenewalOurPlan"
                  }, {
                    "type" : "TEXT",
                    "label" : "Renewal Provision of Existing Plan:",
                    "enabled" : "true",
                    "maxLength" : "65",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if ((pmrl.equal(parent.parent.parent.additionalFields.insuranceInForce, \"YES\") || pmrl.equal(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor, \"YES\") || pmrl.equal(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance, \"YES\")) && pmrl.equal(parent.parent.parent.residentialAddress.state, 'SC') && pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) && pmrl.equal(parent.parent.coverageReplacing, 'YES')) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].additionalFields.scReplFormRenewalExisitingPlan"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Definition of Preexisting Illnesses of Our Plan:",
                    "enabled" : "true",
                    "maxLength" : "65",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if ((pmrl.equal(parent.parent.parent.additionalFields.insuranceInForce, \"YES\") || pmrl.equal(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor, \"YES\") || pmrl.equal(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance, \"YES\")) && pmrl.equal(parent.parent.parent.residentialAddress.state, 'SC') && pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) && pmrl.equal(parent.parent.coverageReplacing, 'YES')) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].additionalFields.scReplFormDefinitionOurPlan"
                  }, {
                    "type" : "TEXT",
                    "label" : "Definition of Preexisting Illnesses of Existing Plan:",
                    "enabled" : "true",
                    "maxLength" : "65",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if ((pmrl.equal(parent.parent.parent.additionalFields.insuranceInForce, \"YES\") || pmrl.equal(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor, \"YES\") || pmrl.equal(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance, \"YES\")) && pmrl.equal(parent.parent.parent.residentialAddress.state, 'SC') && pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) && pmrl.equal(parent.parent.coverageReplacing, 'YES')) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].additionalFields.scReplFormDefinitionExisitingPlan"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "The above comparison has been explained to me by the producer completing this application and information provided regarding my existing plan was based upon:",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if ((pmrl.equal(parent.parent.parent.additionalFields.insuranceInForce, \"YES\") || pmrl.equal(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor, \"YES\") || pmrl.equal(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance, \"YES\")) && pmrl.equal(parent.parent.parent.residentialAddress.state, 'SC') && pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) && pmrl.equal(parent.parent.coverageReplacing, 'YES')) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].additionalFields.scReplFormComparisonExplained"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Statement to applicant by issuer or producer:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if ((pmrl.equal(parent.insureds[Big('0')].additionalFields.insuranceInForce, \"YES\") || pmrl.equal(parent.insureds[Big('0')].additionalFields.insurancePendingOrAppliedFor, \"YES\") || pmrl.equal(parent.insureds[Big('0')].additionalFields.eligibleForAnyOtherInsurance, \"YES\")) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'CO') && pmrl.greaterThan(pmrl.length(parent.insureds[Big('0')].otherCoverages), Big('0'))) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.insureds[Big('0')].otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.insureds[Big('0')].otherCoverages[i].coverageReplacing, 'YES')) {\n          valid = true;\n        }\n      }\n    }\n    return valid;\n  });\n}",
              "name" : "ui.coReplHeader"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "I have reviewed your current accident and sickness insurance coverage. To the best of my knowledge, this accident and sickness policy will not duplicate your existing coverage because you intend to terminate your existing coverage. The replacement policy is being purchased for the following reason(s)(check one):",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if ((pmrl.equal(parent.parent.parent.additionalFields.insuranceInForce, \"YES\") || pmrl.equal(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor, \"YES\") || pmrl.equal(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance, \"YES\")) && pmrl.equal(parent.parent.parent.residentialAddress.state, 'CO') && pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0'))) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.parent.parent.otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.parent.parent.otherCoverages[i].coverageReplacing, 'YES')) {\n          valid = true;\n        }\n      }\n    }\n    return valid;\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.coReplFormReasonForReplacing"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Please specify:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if ((pmrl.equal(parent.parent.parent.additionalFields.insuranceInForce, \"YES\") || pmrl.equal(parent.parent.parent.additionalFields.insurancePendingOrAppliedFor, \"YES\") || pmrl.equal(parent.parent.parent.additionalFields.eligibleForAnyOtherInsurance, \"YES\")) && pmrl.equal(parent.parent.parent.residentialAddress.state, 'CO') && pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0'))) {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.parent.parent.otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(parent.parent.parent.otherCoverages[i].coverageReplacing, 'YES') && pmrl.equal(parent.coReplFormReasonForReplacing, 'OTHER')) {\n          valid = true;\n        }\n      }\n    }\n    return valid;\n  });\n}",
              "name" : "insureds[0].underwritingFactors.financialFactors.coReplFormReasonForReplacingOther"
            } ]
          } ],
          "title" : "Financial & Other Coverage"
        }, {
          "rows" : [ {
            "indent" : "0",
            "fields" : [ {
              "type" : "HEADING",
              "label" : "Activity and Health Habit Information",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.activitiesHeader"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you participated in underwater diving, rock, ice or mountain climbing, aerial sports, martial arts or sports racing (motor or cycle) or do you intend to in the next 12 months?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityQuestion"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Type of Activity:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.activityFactors.activityQuestion), 'YES');\n  });\n}",
              "name" : "ui.activitiesTypeLabel"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Underwater Diving",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityUnderwaterDiving"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Scuba Diving",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityScubaDiving"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Dives in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityScubaDiving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityScubaDivingNumOfDives"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Dive",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityScubaDiving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityScubaDivingDateLastDive"
            }, {
              "type" : "TEXT",
              "label" : "Number of Dives Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityScubaDiving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityScubaDivingNumOfDivesFuture"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Skin Diving",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activitySkinDiving"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Dives in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySkinDiving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activitySkinDivingNumOfDives"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Dive",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySkinDiving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activitySkinDivingDateLastDive"
            }, {
              "type" : "TEXT",
              "label" : "Number of Dives Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySkinDiving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activitySkinDivingNumOfDivesFuture"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Cave Diving",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityCaveDiving"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Dives in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityCaveDiving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityCaveDivingNumOfDives"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Dive",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityCaveDiving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityCaveDivingDateLastDive"
            }, {
              "type" : "TEXT",
              "label" : "Number of Dives Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityCaveDiving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityCaveDivingNumOfDivesFuture"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Other",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherDiving"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Specify:",
              "enabled" : "true",
              "maxLength" : "16",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherDiving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherDivingDescription"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Dives in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherDiving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherDivingNumOfDives"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Dive",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherDiving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherDivingDateLastDive"
            }, {
              "type" : "TEXT",
              "label" : "Number of Dives Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherDiving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherDivingNumOfDivesFuture"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Do you participate in search or rescue, salvage or any other type of specialty diving?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activitySpecialtyDiving"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Provide details, including type and frequency:",
              "enabled" : "true",
              "maxLength" : "50",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityUnderwaterDiving), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySpecialtyDiving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activitySpecialtyDivingDetails"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Climbing",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityClimbing"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Rock Climbing",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityRockClimbing"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Climbs in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRockClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityRockClimbingNumOfClimbs"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Climb",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRockClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityRockClimbingDateLastClimb"
            }, {
              "type" : "TEXT",
              "label" : "Number of Climbs Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRockClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityRockClimbingNumOfClimbsFuture"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Type of Climbing Equipment Used:",
              "enabled" : "true",
              "maxLength" : "25",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRockClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityRockClimbEquipment"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Ice Climbing",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityIceClimbing"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Climbs in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityIceClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityIceClimbingNumOfClimbs"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Climb",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityIceClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityIceClimbingDateLastClimb"
            }, {
              "type" : "TEXT",
              "label" : "Number of Climbs Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityIceClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityIceClimbingNumOfClimbsFuture"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Type of Climbing Equipment Used:",
              "enabled" : "true",
              "maxLength" : "25",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityIceClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityIceClimbEquipment"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Trail Climbing",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityTrailClimbing"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Climbs in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityTrailClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityTrailClimbingNumOfClimbs"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Climb",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityTrailClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityTrailClimbingDateLastClimb"
            }, {
              "type" : "TEXT",
              "label" : "Number of Climbs Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityTrailClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityTrailClimbingNumOfClimbsFuture"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Type of Climbing Equipment Used:",
              "enabled" : "true",
              "maxLength" : "25",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityTrailClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityTrailClimbingEquipment"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Snow Climbing",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activitySnowClimbing"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Climbs in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySnowClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activitySnowClimbingNumOfClimbs"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Climb",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySnowClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activitySnowClimbingDateLastClimb"
            }, {
              "type" : "TEXT",
              "label" : "Number of Climbs Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySnowClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activitySnowClimbingNumOfClimbsFuture"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Type of Climbing Equipment Used:",
              "enabled" : "true",
              "maxLength" : "25",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySnowClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activitySnowClimbingEquipment"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Indoor Climbing",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityIndoorClimbing"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Climbs in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityIndoorClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityIndoorClimbingNumOfClimbs"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Climb",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityIndoorClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityIndoorClimbingDateLastClimb"
            }, {
              "type" : "TEXT",
              "label" : "Number of Climbs Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityIndoorClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityIndoorClimbingNumOfClimbsFuture"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Type of Climbing Equipment Used:",
              "enabled" : "true",
              "maxLength" : "25",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityIndoorClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityIndoorClimbEquipment"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Other",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherClimbing"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Specify:",
              "enabled" : "true",
              "maxLength" : "16",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherClimbingDescription"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Climbs in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherClimbingNumOfClimbs"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Climb",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherClimbingDateLastClimb"
            }, {
              "type" : "TEXT",
              "label" : "Number of Climbs Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherClimbingNumOfClimbsFuture"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Type of Climbing Equipment Used:",
              "enabled" : "true",
              "maxLength" : "25",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityClimbing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherClimbing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherClimbEquipment"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Racing",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityRacing"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Car Racing",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityCarRacing"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Races in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityCarRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityCarRacingNumOfRaces"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Race",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityCarRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityCarRacingDateLastRace"
            }, {
              "type" : "TEXT",
              "label" : "Number of Races Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityCarRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityCarRacingNumOfRacesFuture"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Race Sanctioned by:",
              "enabled" : "true",
              "maxLength" : "25",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityCarRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityCarRaceSanctionedBy"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Motorcycle Racing",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityMotorcycleRacing"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Races in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityMotorcycleRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityMotorcycleRacingNumOfRaces"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Race",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityMotorcycleRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityMotorcycleRacingDateLastRace"
            }, {
              "type" : "TEXT",
              "label" : "Number of Races Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityMotorcycleRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityMotorcycleRacingNumOfRacesFuture"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Race Sanctioned by:",
              "enabled" : "true",
              "maxLength" : "25",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityMotorcycleRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityMotorcycleRaceSanctionedBy"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Watercraft Racing",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityWatercraftRacing"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Races in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityWatercraftRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityWatercraftRacingNumOfRaces"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Race",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityWatercraftRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityWatercraftRacingDateLastRace"
            }, {
              "type" : "TEXT",
              "label" : "Number of Races Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityWatercraftRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityWatercraftRacingNumOfRacesFuture"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Race Sanctioned by:",
              "enabled" : "true",
              "maxLength" : "25",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityWatercraftRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityWatercraftRaceSanctionedBy"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Bicycle Racing",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityBicycleRacing"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Races in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityBicycleRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityBicycleRacingNumOfRaces"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Race",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityBicycleRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityBicycleRacingDateLastRace"
            }, {
              "type" : "TEXT",
              "label" : "Number of Races Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityBicycleRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityBicycleRacingNumOfRacesFuture"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Race Sanctioned by:",
              "enabled" : "true",
              "maxLength" : "25",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityBicycleRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityBicycleRaceSanctionedBy"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Ski Racing",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activitySkiRacing"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Races in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySkiRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activitySkiRacingNumOfRaces"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Race",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySkiRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activitySkiRacingDateLastRace"
            }, {
              "type" : "TEXT",
              "label" : "Number of Races Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySkiRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activitySkiRacingNumOfRacesFuture"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Race Sanctioned by:",
              "enabled" : "true",
              "maxLength" : "25",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activitySkiRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activitySkiRaceSanctionedBy"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Other",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherRacing"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Specify:",
              "enabled" : "true",
              "maxLength" : "16",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherRacingDescription"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Races in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherRacingNumOfRaces"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Race",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherRacingDateLastRace"
            }, {
              "type" : "TEXT",
              "label" : "Number of Races Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherRacingNumOfRacesFuture"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Race Sanctioned by:",
              "enabled" : "true",
              "maxLength" : "25",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityRacing), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherRacing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherRaceSanctionedBy"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Aerial",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAerial"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Sky Diving",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAerialSkyDiving"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Aerials in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialSkyDiving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAerialSkyDivingNumOfActivity"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Activity",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialSkyDiving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAerialSkyDivingDateLastActivity"
            }, {
              "type" : "TEXT",
              "label" : "Number of Aerials Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialSkyDiving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAerialSkyDivingNumOfFutureActivity"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Hang Gliding",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAerialHangGliding"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Aerials in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialHangGliding), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAerialHangGlidingNumOfActivity"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Activity",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialHangGliding), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAerialHangGlidingDateLastActivity"
            }, {
              "type" : "TEXT",
              "label" : "Number of Aerials Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialHangGliding), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAerialHangGlidingNumOfFutureActivity"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Base Jumping",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAerialBaseJumping"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Aerials in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialBaseJumping), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAerialBaseJumpingNumOfActivity"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Activity",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialBaseJumping), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAerialBaseJumpingDateLastActivity"
            }, {
              "type" : "TEXT",
              "label" : "Number of Aerials Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialBaseJumping), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAerialBaseJumpingNumOfFutureActivity"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Bungee Jumping",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAerialBungeeJumping"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Aerials in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialBungeeJumping), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAerialBungeeJumpingNumOfActivity"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Activity",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialBungeeJumping), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAerialBungeeJumpingDateLastActivity"
            }, {
              "type" : "TEXT",
              "label" : "Number of Aerials Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialBungeeJumping), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAerialBungeeJumpingNumOfFutureActivity"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Other",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAerialOther"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Specify:",
              "enabled" : "true",
              "maxLength" : "16",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialOther), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAerialOtherDescription"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Aerials in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialOther), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAerialOtherNumOfActivity"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Activity",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialOther), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAerialOtherDateLastActivity"
            }, {
              "type" : "TEXT",
              "label" : "Number of Aerials Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerial), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityAerialOther), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAerialOtherNumOfFutureActivity"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Other Activities",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherActivities"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Boxing",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherBoxing"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Activities in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherBoxing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherBoxingNumOfActivity"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Activity",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherBoxing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherBoxingDateLastActivity"
            }, {
              "type" : "TEXT",
              "label" : "Number of Activities Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherBoxing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherBoxingNumOfFutureActivity"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Fighting",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherFighting"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Activities in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherFighting), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherFightingNumOfActivity"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Activity",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherFighting), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherFightingDateLastActivity"
            }, {
              "type" : "TEXT",
              "label" : "Number of Activities Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherFighting), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherFightingNumOfFutureActivity"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Rodeoing",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherRodeoing"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Number of Activities in Last 12 Months",
              "enabled" : "true",
              "maxLength" : "11",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherRodeoing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherRodeoingNumOfActivity"
            }, {
              "type" : "TEXT",
              "label" : "Date of Last Activity",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherRodeoing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherRodeoingDateLastActivity"
            }, {
              "type" : "TEXT",
              "label" : "Number of Activities Expected in Next 12 Months",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherActivities), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.activityOtherRodeoing), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityOtherRodeoingNumOfFutureActivity"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Additional Information/Comments",
              "enabled" : "true",
              "maxLength" : "180",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.activityQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.activityAdditionalInfoComments"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Do you plan to travel outside the United States or its territories in the next 12 months?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.activityFactors.foreignTravel"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "label" : "",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.foreignTravel), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.foreignTravelPlanToTravelOutsideUSAGroup",
              "group" : {
                "title" : "Planned Travel Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Country",
                    "enabled" : "true",
                    "maxLength" : "30",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.foreignTravel), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.activityFactors.foreignTravelPlanToTravelOutsideUSAGroup[$].foreignTravelPlanToTravelCountry"
                  }, {
                    "type" : "TEXT",
                    "label" : "Purpose/Reason",
                    "enabled" : "true",
                    "maxLength" : "28",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.foreignTravel), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.activityFactors.foreignTravelPlanToTravelOutsideUSAGroup[$].foreignTravelPlanToTravelPurpose"
                  }, {
                    "type" : "TEXT",
                    "label" : "Length of Stay",
                    "enabled" : "true",
                    "maxLength" : "31",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.foreignTravel), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.activityFactors.foreignTravelPlanToTravelOutsideUSAGroup[$].foreignTravelPlanToTravelLength"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Additional Information/Comments:",
              "enabled" : "true",
              "maxLength" : "810",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.foreignTravel), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.foreignTravelAdditionalInfoComments"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 2 years, have you used marijuana, tetrahydrocannabinol (THC), cocaine, amphetamines, narcotics or other controlled substances?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseDrugUsage"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Type of Drug in the last 5 years:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.activityFactors.substanceAbuseDrugUsage), 'YES');\n  });\n}",
              "name" : "ui.drugUseTypeOfDrugLabel"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Marijuana: Tetrahydrocannabinol (THC), Hashish, Cannabis",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseDrugTypeMarijuana"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date First Used",
              "enabled" : "true",
              "maxLength" : "22",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeMarijuana), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMarijuanaDateFirstUsed"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Used",
              "enabled" : "true",
              "maxLength" : "22",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeMarijuana), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMarijuanaDateLastUsed"
            }, {
              "type" : "TEXT",
              "label" : "Frequency of Use",
              "enabled" : "true",
              "maxLength" : "24",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeMarijuana), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMarijuanaFrequencyOfUse"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Prescribed by a Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeMarijuana), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMarijuanaPrescribed"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Cocaine, Crack",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseDrugTypeCocaine"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date First Used",
              "enabled" : "true",
              "maxLength" : "22",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeCocaine), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseCocaineDateFirstUsed"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Used",
              "enabled" : "true",
              "maxLength" : "22",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeCocaine), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseCocaineDateLastUsed"
            }, {
              "type" : "TEXT",
              "label" : "Frequency of Use",
              "enabled" : "true",
              "maxLength" : "24",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeCocaine), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseCocaineFrequencyOfUse"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Prescribed by a Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeCocaine), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseCocainePrescribed"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Opium Derivatives: Heroin, Morphine, Demerol, Codeine, Percodan, Dilaudid",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseDrugTypeOpium"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date First Used",
              "enabled" : "true",
              "maxLength" : "22",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeOpium), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseOpiumDateFirstUsed"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Used",
              "enabled" : "true",
              "maxLength" : "22",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeOpium), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseOpiumDateLastUsed"
            }, {
              "type" : "TEXT",
              "label" : "Frequency of Use",
              "enabled" : "true",
              "maxLength" : "24",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeOpium), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseOpiumFrequencyOfUse"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Prescribed by a Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeOpium), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseOpiumPrescribed"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Hallucinogens: LSD, Mescaline, Peyote, Psilocybin, PCP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseDrugTypeHallucinogens"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date First Used",
              "enabled" : "true",
              "maxLength" : "22",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeHallucinogens), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseHallucinogensDateFirstUsed"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Used",
              "enabled" : "true",
              "maxLength" : "22",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeHallucinogens), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseHallucinogensDateLastUsed"
            }, {
              "type" : "TEXT",
              "label" : "Frequency of Use",
              "enabled" : "true",
              "maxLength" : "24",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeHallucinogens), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseHallucinogensFrequencyOfUse"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Prescribed by a Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeHallucinogens), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseHallucinogensPrescribed"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Amphetamines: Methamphetamine (Meth), Benzedrine, Dexedrine, Adderall, Ritalin",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseDrugTypeAmphetamines"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date First Used",
              "enabled" : "true",
              "maxLength" : "22",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeAmphetamines), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseAmphetaminesDateFirstUsed"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Used",
              "enabled" : "true",
              "maxLength" : "22",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeAmphetamines), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseAmphetaminesDateLastUsed"
            }, {
              "type" : "TEXT",
              "label" : "Frequency of Use",
              "enabled" : "true",
              "maxLength" : "24",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeAmphetamines), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseAmphetaminesFrequencyOfUse"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Prescribed by a Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeAmphetamines), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseAmphetaminesPrescribed"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Sedatives and Tranquilizers: Xanax, Librium, Valium, Quaalude, Dalmane, Placidyl",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseDrugTypeSedatives"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date First Used",
              "enabled" : "true",
              "maxLength" : "22",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeSedatives), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseSedativesDateFirstUsed"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Used",
              "enabled" : "true",
              "maxLength" : "22",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeSedatives), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseSedativesDateLastUsed"
            }, {
              "type" : "TEXT",
              "label" : "Frequency of Use",
              "enabled" : "true",
              "maxLength" : "24",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeSedatives), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseSedativesFrequencyOfUse"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Prescribed by a Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeSedatives), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseSedativesPrescribed"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Barbiturates: Amytal, Phenobarbital, Seconal, Nembutal, Pentobarbital",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseDrugTypeBarbiturates"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date First Used",
              "enabled" : "true",
              "maxLength" : "22",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeBarbiturates), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseBarbituratesDateFirstUsed"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Used",
              "enabled" : "true",
              "maxLength" : "22",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeBarbiturates), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseBarbituratesDateLastUsed"
            }, {
              "type" : "TEXT",
              "label" : "Frequency of Use",
              "enabled" : "true",
              "maxLength" : "24",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeBarbiturates), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseBarbituratesFrequencyOfUse"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Prescribed by a Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeBarbiturates), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseBarbituratesPrescribed"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Other",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseDrugTypeOther"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Specify",
              "enabled" : "true",
              "maxLength" : "50",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeOther), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseDrugTypeOtherDetails"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date First Used",
              "enabled" : "true",
              "maxLength" : "22",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeOther), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseOtherDateFirstUsed"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Used",
              "enabled" : "true",
              "maxLength" : "22",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeOther), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseOtherDateLastUsed"
            }, {
              "type" : "TEXT",
              "label" : "Frequency of Use",
              "enabled" : "true",
              "maxLength" : "24",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeOther), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseOtherFrequencyOfUse"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Prescribed by a Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugTypeOther), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseOtherPrescribed"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Do you or in the last 5 years have you taken medication to control your use of drugs (prescribed or non-prescribed)?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMedicationToControlDrugs"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "label" : "",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseMedicationToControlDrugs), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMedicationToControlGroup2",
              "group" : {
                "title" : "Medication Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Name of Medication",
                    "enabled" : "true",
                    "maxLength" : "40",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseMedicationToControlDrugs), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMedicationToControlGroup2[$].substanceAbuseMedicationToControlMedName2"
                  }, {
                    "type" : "TEXT",
                    "label" : "Dosage/Frequency",
                    "enabled" : "true",
                    "maxLength" : "19",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseMedicationToControlDrugs), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMedicationToControlGroup2[$].substanceAbuseMedicationToControlDosage2"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date First Taken",
                    "enabled" : "true",
                    "maxLength" : "15",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseMedicationToControlDrugs), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMedicationToControlGroup2[$].substanceAbuseMedicationToControlDateFirstTaken2"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Last Taken",
                    "enabled" : "true",
                    "maxLength" : "14",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseMedicationToControlDrugs), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMedicationToControlGroup2[$].substanceAbuseMedicationToControlDateLastTaken2"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you been advised by a medical professional to, or have you, been hospitalized, received medical treatment, counseling or support because of drugs (prescribed or non-prescribed)?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMedicalTreatmentForDrugs"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Details",
              "enabled" : "true",
              "maxLength" : "60",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseMedicalTreatmentForDrugs), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMedicalTreatmentDetails2"
            }, {
              "type" : "TEXT",
              "label" : "Date(s) of Treatment",
              "enabled" : "true",
              "maxLength" : "32",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseMedicalTreatmentForDrugs), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMedicalTreatmentDateOfTreatment2"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Physician/Facility Name and Address",
              "enabled" : "true",
              "maxLength" : "86",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseMedicalTreatmentForDrugs), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMedicalTreatmentDoctorFacilityName2"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you been advised by a medical professional to discontinue or limit use of drugs (prescribed or non-prescribed)?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseAdvisedToDiscontinueDrugs"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Details",
              "enabled" : "true",
              "maxLength" : "60",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAdvisedToDiscontinueDrugs), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseAdvisedDiscontinueDetails2"
            }, {
              "type" : "TEXT",
              "label" : "Date(s) of Treatment",
              "enabled" : "true",
              "maxLength" : "32",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAdvisedToDiscontinueDrugs), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseAdvisedDiscontinueDate2"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Physician/Facility Name and Address",
              "enabled" : "true",
              "maxLength" : "86",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAdvisedToDiscontinueDrugs), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseAdvisedDiscontinueDoctorFacilityName2"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you joined or attended a support group (such as AA or NA) because of drugs (prescribed or non-prescribed)?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseSupportGroupForDrugs"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Provide details:",
              "enabled" : "true",
              "maxLength" : "90",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseSupportGroupForDrugs), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseSupportGroupDetails2"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Additional Information/Comments:",
              "enabled" : "true",
              "maxLength" : "360",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseDrugUsage), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseDrugAdditionalInfoComments"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Do you consume 4 or more alcoholic beverages per day, 3 or more days per week?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseAlcoholUsage"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Type of Alcoholic Beverage in the last 5 years:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.activityFactors.substanceAbuseAlcoholUsage), 'YES');\n  });\n}",
              "name" : "ui.typeOfAlcoholLabel"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Beer",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseAlcoholTypeBeer"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date Last Used",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholTypeBeer), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseBeerDateLastUsed"
            }, {
              "type" : "TEXT",
              "label" : "Frequency of Use",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholTypeBeer), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseBeerFrequencyOfUse"
            }, {
              "type" : "TEXT",
              "label" : "Amount Used",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholTypeBeer), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseBeerAmountUsed"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Wine",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseAlcoholTypeWine"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date Last Used",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholTypeWine), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseWineDateLastUsed"
            }, {
              "type" : "TEXT",
              "label" : "Frequency of Use",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholTypeWine), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseWineFrequencyOfUse"
            }, {
              "type" : "TEXT",
              "label" : "Amount Used",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholTypeWine), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseWineAmountUsed"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Liquor",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseAlcoholTypeLiquor"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date Last Used",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholTypeLiquor), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseLiquorDateLastUsed"
            }, {
              "type" : "TEXT",
              "label" : "Frequency of Use",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholTypeLiquor), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseLiquorFrequencyOfUse"
            }, {
              "type" : "TEXT",
              "label" : "Amount Used",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholTypeLiquor), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseLiquorAmountUsed"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Do you or in the last 5 years have you taken medication to control your use of alcohol?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMedicationToControlAlcohol"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "label" : "",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseMedicationToControlAlcohol), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMedicationToControlGroup1",
              "group" : {
                "title" : "Medication Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Name of Medication",
                    "enabled" : "true",
                    "maxLength" : "40",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseMedicationToControlAlcohol), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMedicationToControlGroup1[$].substanceAbuseMedicationToControlMedName1"
                  }, {
                    "type" : "TEXT",
                    "label" : "Dosage/Frequency",
                    "enabled" : "true",
                    "maxLength" : "19",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseMedicationToControlAlcohol), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMedicationToControlGroup1[$].substanceAbuseMedicationToControlDosage1"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date First Taken",
                    "enabled" : "true",
                    "maxLength" : "15",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseMedicationToControlAlcohol), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMedicationToControlGroup1[$].substanceAbuseMedicationToControlDateFirstTaken1"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Last Taken",
                    "enabled" : "true",
                    "maxLength" : "14",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.substanceAbuseMedicationToControlAlcohol), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMedicationToControlGroup1[$].substanceAbuseMedicationToControlDateLastTaken1"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you been advised by a medical professional to, or have you, been hospitalized, received medical treatment, counseling or support because of alcohol?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMedicalTreatmentForAlcohol"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Details",
              "enabled" : "true",
              "maxLength" : "60",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseMedicalTreatmentForAlcohol), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMedicalTreatmentDetails1"
            }, {
              "type" : "TEXT",
              "label" : "Date(s) of Treatment",
              "enabled" : "true",
              "maxLength" : "32",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseMedicalTreatmentForAlcohol), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMedicalTreatmentDateOfTreatment1"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Physician/Facility Name and Address",
              "enabled" : "true",
              "maxLength" : "86",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseMedicalTreatmentForAlcohol), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseMedicalTreatmentDoctorFacilityName1"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you been advised by a medical professional to discontinue or limit use of alcohol?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseAdvisedToDiscontinueAlcohol"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Details",
              "enabled" : "true",
              "maxLength" : "60",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAdvisedToDiscontinueAlcohol), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseAdvisedDiscontinueDetails1"
            }, {
              "type" : "TEXT",
              "label" : "Date(s) of Treatment",
              "enabled" : "true",
              "maxLength" : "32",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAdvisedToDiscontinueAlcohol), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseAdvisedDiscontinueDate1"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Physician/Facility Name and Address",
              "enabled" : "true",
              "maxLength" : "86",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAdvisedToDiscontinueAlcohol), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseAdvisedDiscontinueDoctorFacilityName1"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you joined or attended a support group (such as AA or NA) because of alcohol?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseSupportGroupForAlcohol"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Provide details:",
              "enabled" : "true",
              "maxLength" : "90",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseSupportGroupForAlcohol), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseSupportGroupDetails1"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Additional Information/Comments:",
              "enabled" : "true",
              "maxLength" : "360",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.substanceAbuseAlcoholUsage), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.substanceAbuseAlcoholAdditionalInfoComments"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you been convicted of driving under the influence of alcohol or drugs, reckless driving, three or more moving violations or had your license suspended or revoked?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.activityFactors.recklessDriving"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date(s):",
              "enabled" : "true",
              "maxLength" : "71",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.recklessDriving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.recklessDrivingDate"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Offense(s):",
              "enabled" : "true",
              "maxLength" : "70",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.recklessDriving), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.recklessDrivingOffense"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you been convicted of or plead guilty or no contest to a felony or misdemeanor?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.activityFactors.felonyMisdemeanorOffense"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date(s):",
              "enabled" : "true",
              "maxLength" : "71",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.felonyMisdemeanorOffense), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.felonyMisdemeanorOffenseDate"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Offense(s):",
              "enabled" : "true",
              "maxLength" : "70",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.felonyMisdemeanorOffense), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.felonyMisdemeanorOffenseType"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you been a member of the military, military reserves or national guard, whether active or inactive or have you entered into a written agreement to become a member at a future date?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.activityFactors.militaryQuestion"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Provide details:",
              "enabled" : "true",
              "maxLength" : "60",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.militaryQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.activityFactors.militaryQuestionDetails"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 12 months, have you used any form of tobacco or any form of nicotine replacement/cessation product (such as nicotine gum, patch, spray, ecigarette, vapor, etc.)?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.activityFactors.tobaccoQuestion"
            } ]
          } ],
          "title" : "Activities & Health"
        }, {
          "rows" : [ {
            "indent" : "0",
            "fields" : [ {
              "type" : "HEADING",
              "label" : "Medical History",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.medicalHistoryLabel"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "Primary Care Physician Information",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.primaryPhysicianLabel"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Physician Name consulted in the last 10 years",
              "enabled" : "true",
              "maxLength" : "43",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.healthFactors.primaryPhysicianName"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "maxLength" : "58",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.healthFactors.primaryPhysicianAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Phone Number",
              "enabled" : "true",
              "maxLength" : "27",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.healthFactors.primaryPhysicianPhoneNumber"
            }, {
              "type" : "TEXT",
              "label" : "Date last seen",
              "enabled" : "true",
              "maxLength" : "36",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.healthFactors.primaryPhysicianDateLastSeen"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Reason seen",
              "enabled" : "true",
              "maxLength" : "80",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.healthFactors.primaryPhysicianReasonSeen"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Results/Treatment",
              "enabled" : "true",
              "maxLength" : "75",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.healthFactors.primaryPhysicianResultTreatment"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name(s) used for medical records (if different than application)",
              "enabled" : "true",
              "maxLength" : "90",
              "visible" : "true",
              "name" : "insureds[0].additionalFields.otherNamesUsed"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SELECT",
              "label" : "Height (Ft)",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.healthFactors.heightInFeet"
            }, {
              "type" : "SELECT",
              "label" : "Height (In)",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.healthFactors.heightInInches"
            }, {
              "type" : "NUMBER",
              "label" : "Weight (Lbs)",
              "enabled" : "true",
              "maxLength" : "3",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.healthFactors.weight"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "HIV Consent",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.insureds[Big('0')].additionalFields.issueAge) && pmrl.isDefined(parent.insureds[Big('0')].coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.insureds[Big('0')].residentialAddress.state) && (pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'AR') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'GA') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'ME') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'WI') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'ND') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'IL') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MD') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MN') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'AK') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'AL') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'ID') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'LA') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MS') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'NV') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'OK') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'SC') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'TN') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'VI') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'WY') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'DE')) && (pmrl.greaterThanEqual(parent.insureds[Big('0')].coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.insureds[Big('0')].additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "ui.hivHeader"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "The information requested below is asked on your state's HIV Consent form. Please complete accordingly.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.insureds[Big('0')].additionalFields.issueAge) && pmrl.isDefined(parent.insureds[Big('0')].coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.insureds[Big('0')].residentialAddress.state) && (pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'AR') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'GA') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'ME') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'WI') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'ND') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'IL') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MD') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MN') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'AK') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'AL') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'ID') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'LA') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'MS') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'NV') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'OK') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'SC') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'TN') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'VI') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'WY') && pmrl.notEqual(parent.insureds[Big('0')].residentialAddress.state, 'DE')) && (pmrl.greaterThanEqual(parent.insureds[Big('0')].coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.insureds[Big('0')].additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "ui.hivDisclosure"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "I hereby authorize the release of my HIV test results to:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'AZ') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivAZAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'AZ') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivAZAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'AZ') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivAZAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "If your test results are negative, no routine notification will be sent to you. If your test results are other than negative, you are entitled to that information. Because a trained person should deliver that information so that you can understand clearly what the test result means, Please write in the physician and/or health facility name who will receive the HIV test results so that the Insurer can have him or her tell you the test result and explain its meaning.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'CO') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivCOAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'CO') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivCOAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'CO') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivCOAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "I authorize the disclosure of any HIV test results which are other than normal to the following physician or health care provider.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'CT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivCTAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician or Health Care Provider",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'CT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivCTAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'CT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivCTAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the event the test result is positive, the Department of Health recommends that you or your child are immediately put in contact with an HIV (infectious disease) provider. This may be a primary care physician, a healthcare provider, or both. Would you like to disclose your result information to:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'DC') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivDCAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'DC') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivDCAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'DC') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivDCAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Additionally, would you like to disclose your result information to:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'DC') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivDCAdditionalFields.releaseResultsToHealthcareProvider"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Health Care Provider",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'DC') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToHealthcareProvider, 'HEALTHCARE_PROVIDER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivDCAdditionalFields.healthcareProviderName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'DC') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToHealthcareProvider, 'HEALTHCARE_PROVIDER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivDCAdditionalFields.healthcareProviderAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "A positive test result will be disclosed to a physician you designate. If you do not designate a physician, a positive test result will be disclosed to the Florida Department of Health and Rehabilitation. Because a trained person should deliver that information so that you can understand clearly what the test result means, please list your private physician so that the insurer can have him or her tell you the test result and explain its meaning.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'FL') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivFLAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'FL') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivFLAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'FL') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivFLAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "If your test results are negative, no routine notification will be sent to you. If your test results are other than negative, you are entitled to that information. Because a trained person should deliver that information so that you can understand clearly what the test result means, Please write in the physician and/or health facility name who will receive the HIV test results so that the Insurer can have him or her tell you the test result and explain its meaning.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'HI') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivHIAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'HI') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivHIAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'HI') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivHIAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Positive HIV Antibody Screen results are to be reported to :",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'IA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivIAAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'IA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivIAAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'IA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivIAAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "If your test results are negative, no routine notification will be sent to you. If your test results are other than negative, you are entitled to that information. Because a trained person should deliver that information so that you can understand clearly what the test result means, Please write in the physician and/or health facility name who will receive the HIV test results so that the Insurer can have him or her tell you the test result and explain its meaning.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'IN') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivINAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'IN') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivINAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'IN') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivINAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "If your test results are negative, no routine notification will be sent to you. If your test results are other than negative, you are entitled to that information. Because a trained person should deliver that information so that you can understand clearly what the test result means, Please write in the physician and/or health facility name who will receive the HIV test results so that the Insurer can have him or her tell you the test result and explain its meaning.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'KS') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivKSAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'KS') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivKSAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'KS') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivKSAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "If your test results are negative, no routine notification will be sent to you. If your test results are other than negative, you are entitled to that information. Because a trained person should deliver that information so that you can understand clearly what the test result means, you are asked to list your private physician so that the Insurer can have him or her tell you the test result and explain its meaning.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'KY') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivKYAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'KY') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivKYAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'KY') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivKYAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the event of a positive test result:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivMAAdditionalFields.releaseResultsToMyself"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Additionally, you may elect to send the positive test result to:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivMAAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivMAAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivMAAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "If your test results are negative, no routine notification will be sent to you. If your test results are other than negative, you are entitled to that information. Because a trained person should deliver that information so that you can understand clearly what the test result means, Please write in the physician and/or health facility name who will receive the HIV test results so that the Insurer can have him or her tell you the test result and explain its meaning.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MI') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivMIAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Based on the selected benefits, a blood profile is required.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.insureds[Big('0')].additionalFields.issueAge) && pmrl.isDefined(parent.insureds[Big('0')].coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.insureds[Big('0')].residentialAddress.state) && pmrl.equal(parent.insureds[Big('0')].residentialAddress.state, 'MI') && (pmrl.greaterThanEqual(parent.insureds[Big('0')].coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.insureds[Big('0')].additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.insureds[Big('0')].underwritingFactors.healthFactors.hivMIAdditionalFields.releaseResultsToPhysician, 'NO_CONSENT');\n  });\n}",
              "name" : "ui.hivMINoConsentWarning"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MI') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivMIAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MI') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivMIAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "If your HIV test results are normal, no routine notification will be sent to you. If the HIV test results are other than normal, the Insurer will contact you. The Insurer may also contact you if there are other abnormal test results which, in the Insurer’s opinion, are significant. The Insurer may ask you for the name of a physician to whom you authorize disclosure and with whom you may wish to discuss the results. If you are a resident of Missouri and your HIV test(s) indicates confirmed infection with HIV, and you have not provided the Insurer with the name of a physician to whom you authorize disclosure of test results, the Insurer will disclose test results to the Missouri Department of Health as required by law.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MO') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivMOAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MO') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivMOAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MO') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivMOAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "If your test results are negative, no routine notification will be sent to you. If your test results are other than negative, you are entitled to that information. Because a trained person should deliver that information so that you can understand clearly what the test result means, Please write in the physician and/or health facility name who will receive the HIV test results so that the Insurer can have him or her tell you the test result and explain its meaning.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivMTAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivMTAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'MT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivMTAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "If your test results are negative, no routine notification will be sent to you. If your test results are other than negative, you are entitled to that information. Because a trained person should deliver that information so that you can understand clearly what the test result means, Please write in the physician and/or health facility name who will receive the HIV test results so that the Insurer can have him or her tell you the test result and explain its meaning.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NC') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivNCAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NC') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivNCAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NC') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivNCAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "If your test results are negative, no routine notification will be sent to you. If your test results are other than negative, you are entitled to that information. Because a trained person should deliver that information so that you can understand clearly what the test result means, you are asked to list your private physician so that the Insurer can have him or her tell you the test result and explain its meaning.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NE') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivNEAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NE') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivNEAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NE') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivNEAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Additionally, you may choose to receive the test results directly or to designate below another person to whom the results should be sent:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NE') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivNEAdditionalFields.releaseResultsToIndividual"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of designated person",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NE') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToIndividual, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivNEAdditionalFields.individualOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NE') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToIndividual, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivNEAdditionalFields.individualOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the event of a positive or indeterminate test result, I authorize disclosure to:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NH') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivNHAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NH') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivNHAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NH') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivNHAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "If your test results are negative, no routine notification will be sent to you. If your test results are other than negative, you are entitled to that information. Because a trained person should deliver that information so that you can understand clearly what the test result means, Please write in the physician and/or health facility name who will receive the HIV test results so that the Insurer can have him or her tell you the test result and explain its meaning.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NJ') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivNJAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NJ') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivNJAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NJ') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivNJAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "If your test results are negative, no routine notification will be sent to you. If your test results are other than negative, you are entitled to that information. Because a trained person should deliver that information so that you can understand clearly what the test result means, you are asked to list your private physician so that the Insurer can have him or her tell you the test result and explain its meaning.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NM') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivNMAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NM') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivNMAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'NM') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivNMAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the event of a positive test result:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OH') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivOHAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OH') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivOHAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OH') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivOHAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "You may also elect to send any positive test results to another person",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OH') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivOHAdditionalFields.releaseResultsToIndividual"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OH') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToIndividual, 'OTHER_INDIVIDUAL');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivOHAdditionalFields.individualOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OH') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToIndividual, 'OTHER_INDIVIDUAL');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivOHAdditionalFields.individualOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Additionally you may elect to have the any positive results sent to yourself",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OH') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivOHAdditionalFields.releaseResultsToMyself"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "I request that a final positive HIV result be reported to:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OR') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivORAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OR') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivORAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OR') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivORAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "You may also elect to send any positive test result to a county health department",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OR') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivORAdditionalFields.releaseResultsToDepartment"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Additionally you may elect to have the any positive results sent to yourself",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'OR') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivORAdditionalFields.releaseResultsToMyself"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "If your test results are negative, no routine notification will be sent to you. If your test results are positive, you are entitled to that information. However, because a trained person should deliver that information so that you can understand clearly what the test results mean, you are required to list a physician, a local health department or a local community-based organization so that they may tell you the result, explain its meaning and provide post-test counseling.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'PA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivPAAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician or Health Care Agency",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'PA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivPAAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'PA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivPAAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "You may also elect to send any positive test result to the Pennsylvania Department of Health",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'PA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivPAAdditionalFields.releaseResultsToPADepartmentOfHealth"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SELECT",
              "label" : "Additionally you may elect to have your result information sent to a local health department. Indicate your choice below",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'PA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivPAAdditionalFields.releaseResultsToLocalDepartment"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "If your test results are negative, no routine notification will be sent to you. If your test results are other than negative, you are entitled to that information. Because a trained person should deliver that information so that you can understand clearly what the test result means, you are asked to list your private physician so that the Insurer can have him or her tell you the test result and explain its meaning.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'PR') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivPRAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'PR') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivPRAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'PR') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivPRAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "If your test results are negative, a letter from Medical Underwriting will be sent to you. If your test results are other than negative, you are entitled to that information. Because a trained person should deliver that information so that you can understand clearly what the test result means, you are asked to list your private physician so that the Insurer can have him or her tell you the test result and explain its meaning.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'RI') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivRIAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'RI') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivRIAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'RI') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivRIAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "If your test results are negative, no routine notification will be sent to you. If your test results are reported by the laboratory to the Insurer as being positive, you will receive written notification of such results from a physician you have designated or, in the absence of such designation, from the Texas Department of Health. Because a trained person should deliver that information so that you can understand clearly what the test result means, please list your private physician so that the Insurer can have him or her tell you the test result and explain its meaning.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'TX') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivTXAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'TX') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivTXAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'TX') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivTXAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the case of positive test results",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'UT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivUTAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'UT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivUTAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'UT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivUTAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "A positive test result will be disclosed to a physician you designate. Because a trained person should deliver that information so that you can understand clearly what the test result means, please list your private physician so that the Insurer can have him or her tell you the test result and explain its meaning. If you do not designate a physician, personal face-to-face counseling is available through the Virginia Department of Health at 1-800-533-4148.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'VA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivVAAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'VA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivVAAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'VA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivVAAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "If your HIV test results are normal, no routine notification will be sent to you, unless you check the option below",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'VA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivVAAdditionalFields.releaseResultsToMyself"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "You may choose to receive the test results directly or to designate below another person to whom the results should be sent:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'VT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivVTAdditionalFields.releaseResults"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'VT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResults, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivVTAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'VT') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResults, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivVTAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "If your test results are negative, no routine notification will be sent to you. If your test results are positive or indeterminate, you are entitled to that information. However, because a trained person should deliver that information so that you can understand clearly what the test results mean, you are asked to list a health care provider or health care agency so that they may tell you the result, explain its meaning and provide post-test counseling.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'WA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivWAAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician or Health Care Agency",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'WA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivWAAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'WA') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivWAAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "I wish my test results to be released to:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'WV') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivWVAdditionalFields.releaseResults"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Designate a physician, health care provider, or other person to receive test results:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'WV') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && (pmrl.equal(parent.releaseResults, 'OTHER') || pmrl.equal(parent.releaseResults, 'BOTH'));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivWVAdditionalFields.verifyPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'WV') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.verifyPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivWVAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'WV') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.verifyPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivWVAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "If your test results are negative, no routine notification will be sent to you. If your test results are other than negative, you are entitled to that information. Because a trained person should deliver that information so that you can understand clearly what the test result means, Please write in the physician and/or health facility name who will receive the HIV test results so that the Insurer can have him or her tell you the test result and explain its meaning.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'SD') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46')));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivSDAdditionalFields.releaseResultsToPhysician"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Physician",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'SD') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivSDAdditionalFields.physicianOtherName"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Address (Number, Street, City, State, Zip)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount) && pmrl.isDefined(parent.parent.parent.parent.residentialAddress.state) && pmrl.equal(parent.parent.parent.parent.residentialAddress.state, 'SD') && (pmrl.greaterThanEqual(parent.parent.parent.parent.coverages.base[Big('0')].benefitAmount, Big('6100')) || pmrl.greaterThanEqual(parent.parent.parent.parent.additionalFields.issueAge, Big('46'))) && pmrl.equal(parent.releaseResultsToPhysician, 'OTHER');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.hivSDAdditionalFields.physicianOtherAddress"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "Health History",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.healthHistoryLabel"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 10 years, have you been diagnosed or treated by a medical professional as having Acquired Immune Deficiency Syndrome (AIDS) or Human Immunodeficiency Virus (HIV) infection?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.notEqual(parent.parent.parent.residentialAddress.state, 'FL');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.aidsHivQuestion"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Have you ever tested positive for exposure to the HIV infection, or been diagnosed as having Acquired Immune Deficiency Syndrome (AIDS) caused by the HIV infection or other sickness or condition derived from such infection?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.parent.parent.residentialAddress.state, 'FL');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.aidsHivQuestion"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "In the last 10 years, have you been diagnosed with, treated, tested positive, given advice or consulted with a medical professional regarding any of the following disease or disorder:",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.conditionQuestionsHeader"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "High blood pressure, high cholesterol, heart attack, coronary artery disease, chest pain, irregular heart rhythm, heart murmur, valvular heart disease, stroke, transient ischemic attack, aneurysm or any other disease or disorder of the heart, arteries or veins",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.healthFactors.heartDiseaseQuestion"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Please indicate Diagnosis in the last 3 years for your condition(s).",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.heartDiseaseQuestion), 'YES');\n  });\n}",
              "name" : "ui.cardiacDiagnosisForCondition"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Hypertension (High Blood Pressure)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHypertensionDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Reading at Diagnosis",
              "enabled" : "true",
              "maxLength" : "12",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHypertensionDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHypertensionReadingAtDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Most Current Reading",
              "enabled" : "true",
              "maxLength" : "12",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHypertensionDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHypertensionMostCurrentReading"
            }, {
              "type" : "TEXT",
              "label" : "Date of current reading",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHypertensionDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHypertensionDateOfCurrentReading"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "36",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHypertensionDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHypertensionDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "48",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHypertensionDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHypertensionDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHypertensionDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHypertensionDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "110",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHypertensionDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHypertensionDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHypertensionPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "High Cholesterol",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHighCholesterolDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Reading at Diagnosis",
              "enabled" : "true",
              "maxLength" : "12",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHighCholesterolDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHighCholesterolReadingAtDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Most Current Reading",
              "enabled" : "true",
              "maxLength" : "12",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHighCholesterolDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHighCholesterolMostCurrentReading"
            }, {
              "type" : "TEXT",
              "label" : "Date of current reading",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHighCholesterolDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHighCholesterolDateOfCurrentReading"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "36",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHighCholesterolDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHighCholesterolDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "48",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHighCholesterolDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHighCholesterolDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHighCholesterolDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHighCholesterolDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "110",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHighCholesterolDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHighCholesterolDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHighCholesterolPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Heart Attack",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHeartAttackDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "36",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartAttackDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHeartAttackDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "48",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartAttackDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHeartAttackDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartAttackDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHeartAttackDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "110",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartAttackDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartAttackDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHeartAttackPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Coronary Artery Disease",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacCoronaryArteryDiseaseDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "36",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacCoronaryArteryDiseaseDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacCoronaryArteryDiseaseDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "48",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacCoronaryArteryDiseaseDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacCoronaryArteryDiseaseDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacCoronaryArteryDiseaseDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacCoronaryArteryDiseaseDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "110",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacCoronaryArteryDiseaseDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacCoronaryArteryDiseaseDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacCoronaryArteryDiseasePhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Chest Pain",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacChestPainDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "36",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacChestPainDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacChestPainDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "48",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacChestPainDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacChestPainDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacChestPainDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacChestPainDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "110",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacChestPainDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacChestPainDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacChestPainPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Irregular Heart Rhythm",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacIrregularHeartRhythmDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "36",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacIrregularHeartRhythmDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "48",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacIrregularHeartRhythmDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacIrregularHeartRhythmDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "110",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacIrregularHeartRhythmPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Heart Murmur",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHeartMurmurDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "36",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHeartMurmurDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "48",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHeartMurmurDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHeartMurmurDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "110",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacHeartMurmurPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Valvular Heart Disease",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacValvularHeartDiseaseDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "36",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacValvularHeartDiseaseDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "48",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacValvularHeartDiseaseDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacValvularHeartDiseaseDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "110",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacValvularHeartDiseasePhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Stroke",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacStrokeDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "36",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacStrokeDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacStrokeDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "48",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacStrokeDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacStrokeDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacStrokeDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacStrokeDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "110",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacStrokeDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacStrokeDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacStrokePhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Transient Ischemic Attack (TIA)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTransientIschemicAttackDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "36",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTransientIschemicAttackDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTransientIschemicAttackDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "48",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTransientIschemicAttackDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTransientIschemicAttackDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTransientIschemicAttackDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTransientIschemicAttackDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "110",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTransientIschemicAttackDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTransientIschemicAttackDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTransientIschemicAttackPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Aneurysm",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacAneurysmDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "36",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacAneurysmDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacAneurysmDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "48",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacAneurysmDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacAneurysmDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacAneurysmDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacAneurysmDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "110",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacAneurysmDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacAneurysmDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacAneurysmPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Other",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacOtherDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacOtherDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacDiagnosisOtherGroup",
              "group" : {
                "title" : "Other Diagnosis Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Specify",
                    "enabled" : "true",
                    "maxLength" : "55",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacDiagnosisOtherGroup[$].cardiacOtherDiagnosisDetails"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date of Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "36",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacDiagnosisOtherGroup[$].cardiacOtherDateOfDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Last Seen by Physician",
                    "enabled" : "true",
                    "maxLength" : "48",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacDiagnosisOtherGroup[$].cardiacOtherDateLastSeenByPhysician"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacDiagnosisOtherGroup[$].cardiacOtherDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosing Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "110",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacOtherDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacOtherDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacDiagnosisOtherGroup[$].cardiacOtherPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Indicate what type, if Irregular Heart Rhythm, Heart Murmur or Valvular Heart Disease was selected",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.heartDiseaseQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.cardiacIrregularHeartRhythmDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.cardiacHeartMurmurDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.cardiacValvularHeartDiseaseDiagnosis), 'YES'));\n  });\n}",
              "name" : "ui.cardiacIndicateWhatType"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Atrial Fibrillation",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosis), 'YES'));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTypeOfIrregularRhythmMurmurHeartAtrialFibrillation"
            }, {
              "type" : "CHECKBOX",
              "label" : "Supraventricular Tachycardia",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosis), 'YES'));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTypeOfIrregularRhythmMurmurHeartSupraventricularTachycardia"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Premature Ventricular Contractions",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosis), 'YES'));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTypeOfIrregularRhythmMurmurHeartPrematureVentricularContractions"
            }, {
              "type" : "CHECKBOX",
              "label" : "Aortic Stenosis",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosis), 'YES'));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTypeOfIrregularRhythmMurmurHeartAorticStenosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Mitral Stenosis",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosis), 'YES'));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTypeOfIrregularRhythmMurmurHeartMitralStenosis"
            }, {
              "type" : "CHECKBOX",
              "label" : "Aortic regurgitation/insufficiency",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosis), 'YES'));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTypeOfIrregularRhythmMurmurHeartAorticRegurgitationInsufficiency"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Mitral regurgitation/insufficiency",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosis), 'YES'));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTypeOfIrregularRhythmMurmurHeartMitralRegurgitationInsufficiency"
            }, {
              "type" : "CHECKBOX",
              "label" : "Mitral Valve Prolapse",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosis), 'YES'));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTypeOfIrregularRhythmMurmurHeartMitralValveProlapse"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Other",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosis), 'YES'));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTypeOfIrregularRhythmMurmurHeartOther"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Provide details:",
              "enabled" : "true",
              "maxLength" : "84",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.cardiacIrregularHeartRhythmDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacHeartMurmurDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacValvularHeartDiseaseDiagnosis), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.cardiacTypeOfIrregularRhythmMurmurHeartOther), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTypeOfIrregularRhythmMurmurHeartOtherProvideDetails"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 10 years, have you been diagnosed by a medical professional as having more than one Stroke or Transient Ischemic Attack (TIA)?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.cardiacStrokeDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacTransientIschemicAttackDiagnosis), 'YES'));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacMoreThanOneStrokeOrTIA"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.cardiacStrokeDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.cardiacTransientIschemicAttackDiagnosis), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.cardiacMoreThanOneStrokeOrTIA), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacMoreThanOneStrokeOrTIAGroup",
              "group" : {
                "title" : "Details of Stroke or TIA",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "87",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacStrokeDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTransientIschemicAttackDiagnosis), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacMoreThanOneStrokeOrTIA), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacMoreThanOneStrokeOrTIAGroup[$].cardiacMoreThanOneStrokeOrTIADiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date",
                    "enabled" : "true",
                    "maxLength" : "43",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacStrokeDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTransientIschemicAttackDiagnosis), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacMoreThanOneStrokeOrTIA), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacMoreThanOneStrokeOrTIAGroup[$].cardiacMoreThanOneStrokeOrTIADate"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacStrokeDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTransientIschemicAttackDiagnosis), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacMoreThanOneStrokeOrTIA), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacMoreThanOneStrokeOrTIAGroup[$].cardiacMoreThanOneStrokeOrTIADiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "110",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacStrokeDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTransientIschemicAttackDiagnosis), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacMoreThanOneStrokeOrTIA), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacMoreThanOneStrokeOrTIADiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacMoreThanOneStrokeOrTIAGroup[$].cardiacMoreThanOneStrokeOrTIAPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Indicate treatment type(s):",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.heartDiseaseQuestion), 'YES');\n  });\n}",
              "name" : "ui.cardiacTreatmentTypes"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Medication",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeMedication"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTreatmentTypeMedication), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeMedicationGroup",
              "group" : {
                "title" : "Medication Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "48",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeMedicationGroup[$].cardiacTreatmentTypeMedicationDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Name of Medication",
                    "enabled" : "true",
                    "maxLength" : "72",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeMedicationGroup[$].cardiacTreatmentTypeMedicationNameOfMedication"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Dosage/Frequency",
                    "enabled" : "true",
                    "maxLength" : "54",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeMedicationGroup[$].cardiacTreatmentTypeMedicationDosageFrequency"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date First Taken",
                    "enabled" : "true",
                    "maxLength" : "36",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeMedicationGroup[$].cardiacTreatmentTypeMedicationDateFirstTaken"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Last Taken",
                    "enabled" : "true",
                    "maxLength" : "36",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeMedicationGroup[$].cardiacTreatmentTypeMedicationDateLastTaken"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Surgery",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeSurgery"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTreatmentTypeSurgery), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeSurgeryGroup",
              "group" : {
                "title" : "Surgery Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "64",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeSurgeryGroup[$].cardiacTreatmentTypeSurgeryDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Surgery",
                    "enabled" : "true",
                    "maxLength" : "60",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeSurgeryGroup[$].cardiacTreatmentTypeSurgeryTypeOfSurgery"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date of Surgery",
                    "enabled" : "true",
                    "maxLength" : "60",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeSurgeryGroup[$].cardiacTreatmentTypeSurgeryDateOfSurgery"
                  }, {
                    "type" : "TEXT",
                    "label" : "Results",
                    "enabled" : "true",
                    "maxLength" : "80",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeSurgeryGroup[$].cardiacTreatmentTypeSurgeryResults"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeSurgeryGroup[$].cardiacTreatmentTypeSurgeryDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "112",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeSurgery), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTreatmentTypeSurgeryDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeSurgeryGroup[$].cardiacTreatmentTypeSurgeryPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Other",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeOther"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTreatmentTypeOther), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeOtherGroup",
              "group" : {
                "title" : "Other Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "32",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeOtherGroup[$].cardiacTreatmentTypeOtherDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Treatment",
                    "enabled" : "true",
                    "maxLength" : "28",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeOtherGroup[$].cardiacTreatmentTypeOtherTypeOfTreatment"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date Started",
                    "enabled" : "true",
                    "maxLength" : "20",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeOtherGroup[$].cardiacTreatmentTypeOtherDateStarted"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Ended",
                    "enabled" : "true",
                    "maxLength" : "18",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeOtherGroup[$].cardiacTreatmentTypeOtherDateEnded"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeOtherGroup[$].cardiacTreatmentTypeOtherDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "68",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeOther), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTreatmentTypeOtherDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeOtherGroup[$].cardiacTreatmentTypeOtherPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Other than stated in previous answers, in the last 5 years, have you had or been recommended to have any tests or surgery related to this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacRecommendedTestOrSurgery"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacRecommendedTestOrSurgery), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacRecommendedTestOrSurgeryGroup",
              "group" : {
                "title" : "Recommended Test or Surgery Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "42",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacRecommendedTestOrSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacRecommendedTestOrSurgeryGroup[$].cardiacRecommendedTestOrSurgeryDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Test/Surgery",
                    "enabled" : "true",
                    "maxLength" : "48",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacRecommendedTestOrSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacRecommendedTestOrSurgeryGroup[$].cardiacRecommendedTestOrSurgeryTypeOfTestSurgery"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date",
                    "enabled" : "true",
                    "maxLength" : "33",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacRecommendedTestOrSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacRecommendedTestOrSurgeryGroup[$].cardiacRecommendedTestOrSurgeryDate"
                  }, {
                    "type" : "TEXT",
                    "label" : "Results",
                    "enabled" : "true",
                    "maxLength" : "51",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacRecommendedTestOrSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacRecommendedTestOrSurgeryGroup[$].cardiacRecommendedTestOrSurgeryResults"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacRecommendedTestOrSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacRecommendedTestOrSurgeryGroup[$].cardiacRecommendedTestOrSurgeryDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician or Provider Name/Address",
                    "enabled" : "true",
                    "maxLength" : "84",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacRecommendedTestOrSurgery), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacRecommendedTestOrSurgeryDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacRecommendedTestOrSurgeryGroup[$].cardiacRecommendedTestOrSurgeryPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you been hospitalized or treated as an out-patient for this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeHospitalizationOrOutPatient"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeHospitalizationOrOutPatientGroup",
              "group" : {
                "title" : "Hospitalization or Out-Patient Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "42",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeHospitalizationOrOutPatientGroup[$].cardiacTreatmentTypeHospitalizationOrOutPatientDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date of Treatment",
                    "enabled" : "true",
                    "maxLength" : "42",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeHospitalizationOrOutPatientGroup[$].cardiacTreatmentTypeHospitalizationOrOutPatientDateOfTreatment"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Duration of Treatment",
                    "enabled" : "true",
                    "maxLength" : "51",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeHospitalizationOrOutPatientGroup[$].cardiacTreatmentTypeHospitalizationOrOutPatientDurationOfTreatment"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Treatment",
                    "enabled" : "true",
                    "maxLength" : "42",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeHospitalizationOrOutPatientGroup[$].cardiacTreatmentTypeHospitalizationOrOutPatientTypeOfTreatment"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeHospitalizationOrOutPatientGroup[$].cardiacTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician or Provider Name/Address",
                    "enabled" : "true",
                    "maxLength" : "84",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cardiacTreatmentTypeHospitalizationOrOutPatient), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cardiacTreatmentTypeHospitalizationOrOutPatientGroup[$].cardiacTreatmentTypeHospitalizationOrOutPatientPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 6 months, have you missed work for this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacMissedWorkForCondition"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Provide dates and details:",
              "enabled" : "true",
              "maxLength" : "180",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cardiacMissedWorkForCondition), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacMissedWorkForConditionDetails"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Additional Information/Comments:",
              "enabled" : "true",
              "maxLength" : "2150",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.heartDiseaseQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cardiacAdditionalInformationOrComments"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.cardiacAdditionalInformationOrCommentsBlankLine"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Diabetes, abnormal glucose reading, sugar in the urine or any other disease or disorder of the endocrine system",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesQuestion"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Please indicate Diagnosis in the last 10 years for your condition(s):",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "ui.diabetesDiagnosisLabel"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Diabetes",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "39",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesDiagnosisDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "63",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesDiagnosisDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesDiagnosisDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "96",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesDiagnosisDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesDiagnosisPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Gestational Diabetes",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.parent.gender), 'FEMALE');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesGestationalDiabetesDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "39",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.parent.gender), 'FEMALE') && pmrl.equal(pmrl.toUpperCase(parent.diabetesGestationalDiabetesDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesGestationalDiabetesDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "63",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.parent.gender), 'FEMALE') && pmrl.equal(pmrl.toUpperCase(parent.diabetesGestationalDiabetesDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesGestationalDiabetesDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.parent.gender), 'FEMALE') && pmrl.equal(pmrl.toUpperCase(parent.diabetesGestationalDiabetesDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesGestationalDiabetesDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "96",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.parent.gender), 'FEMALE') && pmrl.equal(pmrl.toUpperCase(parent.diabetesGestationalDiabetesDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesGestationalDiabetesDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesGestationalDiabetesPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Elevated Glucose Reading",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesElevatedGlucoseDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "39",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesElevatedGlucoseDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesElevatedGlucoseDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "63",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesElevatedGlucoseDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesElevatedGlucoseDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesElevatedGlucoseDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesElevatedGlucoseDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "96",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesElevatedGlucoseDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesElevatedGlucoseDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesElevatedGlucosePhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Sugar in Urine",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesSugarInUrineDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "39",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesSugarInUrineDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesSugarInUrineDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "63",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesSugarInUrineDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesSugarInUrineDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesSugarInUrineDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesSugarInUrineDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "96",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesSugarInUrineDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesSugarInUrineDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesSugarInUrinePhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Other",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesOtherDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesOtherDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesOtherGroup",
              "group" : {
                "title" : "Other Diagnosis Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Specify",
                    "enabled" : "true",
                    "maxLength" : "42",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesOtherGroup[$].diabetesOtherDiagnosisDetails"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date of Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "39",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesOtherGroup[$].diabetesOtherDiagnosisDateOfDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Last Seen by Physician",
                    "enabled" : "true",
                    "maxLength" : "63",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesOtherGroup[$].diabetesOtherDiagnosisDateLastSeenByPhysician"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesOtherGroup[$].diabetesOtherDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosing Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "96",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesOtherDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesOtherDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesOtherGroup[$].diabetesOtherPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Indicate treatment type(s):",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "ui.diabetesTreatmentTypesLabel"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Diet",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesTreatmentTypeDiet"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Provide details:",
              "enabled" : "true",
              "maxLength" : "175",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesTreatmentTypeDiet), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesTreatmentTypeDietDetails"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Oral Medication",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesTreatmentTypeOralMedication"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesTreatmentTypeOralMedication), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesOralMedicationTreatmentGroup",
              "group" : {
                "title" : "Oral Medication Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "21",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeOralMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesOralMedicationTreatmentGroup[$].diabetesOralMedicationDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Name of Medication",
                    "enabled" : "true",
                    "maxLength" : "21",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeOralMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesOralMedicationTreatmentGroup[$].diabetesOralMedicationName"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Dosage/Frequency",
                    "enabled" : "true",
                    "maxLength" : "18",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeOralMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesOralMedicationTreatmentGroup[$].diabetesOralMedicationDosage"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date First Taken",
                    "enabled" : "true",
                    "maxLength" : "12",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeOralMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesOralMedicationTreatmentGroup[$].diabetesOralMedicationDateFirstTaken"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Last Taken",
                    "enabled" : "true",
                    "maxLength" : "12",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeOralMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesOralMedicationTreatmentGroup[$].diabetesOralMedicationDateLastTaken"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Insulin",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesTreatmentTypeInsulin"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesTreatmentTypeInsulin), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesInsulinTreatmentGroup",
              "group" : {
                "title" : "Insulin Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "21",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeInsulin), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesInsulinTreatmentGroup[$].diabetesInsulinDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Name of Medication",
                    "enabled" : "true",
                    "maxLength" : "21",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeInsulin), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesInsulinTreatmentGroup[$].diabetesInsulinName"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Dosage/Frequency",
                    "enabled" : "true",
                    "maxLength" : "18",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeInsulin), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesInsulinTreatmentGroup[$].diabetesInsulinDosage"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date First Taken",
                    "enabled" : "true",
                    "maxLength" : "12",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeInsulin), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesInsulinTreatmentGroup[$].diabetesInsulinDateFirstTaken"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Last Taken",
                    "enabled" : "true",
                    "maxLength" : "12",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeInsulin), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesInsulinTreatmentGroup[$].diabetesInsulinDateLastTaken"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Other",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesTreatmentTypeOther"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesTreatmentTypeOther), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesOtherTreatmentGroup",
              "group" : {
                "title" : "Other Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "32",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesOtherTreatmentGroup[$].diabetesOtherTreatmentDiagnosis"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Type of Treatment",
                    "enabled" : "true",
                    "maxLength" : "39",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesOtherTreatmentGroup[$].diabetesOtherTreatmentTypeOfTreatment"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Started",
                    "enabled" : "true",
                    "maxLength" : "15",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesOtherTreatmentGroup[$].diabetesOtherTreatmentDateStarted"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "In the last 10 years, have you been diagnosed by a medical professional as having any of the following:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "ui.diabetesComplicationsDiagnosisLabel"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Changes in vision or retinopathy",
              "enabled" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesNoneOfTheAboveDiagnosis), 'NO');\n  });\n}",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesRetinopathyDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "14",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesRetinopathyDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesRetinopathyDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Details of Treatment",
              "enabled" : "true",
              "maxLength" : "49",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesRetinopathyDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesRetinopathyDetailsOfTreatment"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Albumin or protein in the urine",
              "enabled" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesNoneOfTheAboveDiagnosis), 'NO');\n  });\n}",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesProteinInTheUrineDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "14",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesProteinInTheUrineDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesProteinInTheUrineDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Details of Treatment",
              "enabled" : "true",
              "maxLength" : "49",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesProteinInTheUrineDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesProteinInTheUrineDetailsOfTreatment"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Skin Ulcers",
              "enabled" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesNoneOfTheAboveDiagnosis), 'NO');\n  });\n}",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesSkinUlcersDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "14",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesSkinUlcersDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesSkinUlcersDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Details of Treatment",
              "enabled" : "true",
              "maxLength" : "49",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesSkinUlcersDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesSkinUlcersDetailsOfTreatment"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Eye Laser therapy",
              "enabled" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesNoneOfTheAboveDiagnosis), 'NO');\n  });\n}",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesEyeLaserTherapyDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "14",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesEyeLaserTherapyDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesEyeLaserTherapyDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Details of Treatment",
              "enabled" : "true",
              "maxLength" : "49",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesEyeLaserTherapyDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesEyeLaserTherapyDetailsOfTreatment"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Numbness or Neuropathy",
              "enabled" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesNoneOfTheAboveDiagnosis), 'NO');\n  });\n}",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesNeuropathyDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "14",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesNeuropathyDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesNeuropathyDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Details of Treatment",
              "enabled" : "true",
              "maxLength" : "49",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesNeuropathyDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesNeuropathyDetailsOfTreatment"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "None of the above",
              "enabled" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.diabetesRetinopathyDiagnosis), 'NO') && pmrl.equal(pmrl.toUpperCase(parent.diabetesProteinInTheUrineDiagnosis), 'NO') && pmrl.equal(pmrl.toUpperCase(parent.diabetesSkinUlcersDiagnosis), 'NO') && pmrl.equal(pmrl.toUpperCase(parent.diabetesEyeLaserTherapyDiagnosis), 'NO') && pmrl.equal(pmrl.toUpperCase(parent.diabetesNeuropathyDiagnosis), 'NO'));\n  });\n}",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesNoneOfTheAboveDiagnosis"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 6 months, has your treatment changed?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesTreatmentChangedInTheLast6Months"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Provide details:",
              "enabled" : "true",
              "maxLength" : "180",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesTreatmentChangedInTheLast6Months), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesTreatmentChangedDetails"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 12 months, have you had your Glycated Hemoglobin (Hemoglobin A1C) tested?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesGlycatedHemoglobin"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Provide date of last test and results:",
              "enabled" : "true",
              "maxLength" : "180",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesGlycatedHemoglobin), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesGlycatedHemoglobinDetails"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you had or been recommended to have any tests or surgery related to this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesTestOrSurgeryRelatedToCondition"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesTestOrSurgeryRelatedToCondition), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesTestOrSurgeryGroup",
              "group" : {
                "title" : "Recommended Test or Surgery Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "42",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTestOrSurgeryRelatedToCondition), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesTestOrSurgeryGroup[$].diabetesTestOrSurgeryDiagnoses"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Test/Surgery",
                    "enabled" : "true",
                    "maxLength" : "60",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTestOrSurgeryRelatedToCondition), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesTestOrSurgeryGroup[$].diabetesTestOrSurgeryType"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date",
                    "enabled" : "true",
                    "maxLength" : "33",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTestOrSurgeryRelatedToCondition), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesTestOrSurgeryGroup[$].diabetesTestOrSurgeryDate"
                  }, {
                    "type" : "TEXT",
                    "label" : "Results",
                    "enabled" : "true",
                    "maxLength" : "36",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTestOrSurgeryRelatedToCondition), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesTestOrSurgeryGroup[$].diabetesTestOrSurgeryResults"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTestOrSurgeryRelatedToCondition), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesTestOrSurgeryGroup[$].diabetesTestOrSurgeryDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician or Provider Name/Address",
                    "enabled" : "true",
                    "maxLength" : "84",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesTestOrSurgeryRelatedToCondition), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesTestOrSurgeryDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesTestOrSurgeryGroup[$].diabetesTestOrSurgeryPhysicianName"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you been hospitalized or treated as an out-patient for this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesHospitalizedForCondition"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesHospitalizedForCondition), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesHospitalizedForConditionGroup",
              "group" : {
                "title" : "Hospitalization or Out-Patient Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "42",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesHospitalizedForCondition), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesHospitalizedForConditionGroup[$].diabetesHospitalizedDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date of Treatment",
                    "enabled" : "true",
                    "maxLength" : "39",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesHospitalizedForCondition), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesHospitalizedForConditionGroup[$].diabetesHospitalizedDateOfTreatment"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Duration of Treatment",
                    "enabled" : "true",
                    "maxLength" : "48",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesHospitalizedForCondition), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesHospitalizedForConditionGroup[$].diabetesHospitalizedDurationOfTreatment"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Treatment",
                    "enabled" : "true",
                    "maxLength" : "45",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesHospitalizedForCondition), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesHospitalizedForConditionGroup[$].diabetesHospitalizedTypeOfTreatment"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesHospitalizedForCondition), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesHospitalizedForConditionGroup[$].diabetesHospitalizedDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician or Provider Name/Address",
                    "enabled" : "true",
                    "maxLength" : "84",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.diabetesHospitalizedForCondition), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesHospitalizedDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.diabetesHospitalizedForConditionGroup[$].diabetesHospitalizedPhysicianName"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 6 months, have you missed work for this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesMissedWorkForThisCondition"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Provide dates and details:",
              "enabled" : "true",
              "maxLength" : "180",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.diabetesMissedWorkForThisCondition), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesMissedWorkForThisConditionDetails"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Additional Information/Comments:",
              "enabled" : "true",
              "maxLength" : "2970",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.diabetesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diabetesAdditionalInformationOrComments"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.diabetesAdditionalInformationOrCommentsBlankLine"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Cancer, tumor, cysts or growths",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerQuestion"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Please indicate Diagnosis in the last 3 years for your condition(s):",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.cancerQuestion), 'YES');\n  });\n}",
              "name" : "ui.cancerTumorCyst.diagnosisLabel"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Cancer",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Type/Location",
              "enabled" : "true",
              "maxLength" : "27",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerDiagnosisTypeLocation"
            }, {
              "type" : "TEXT",
              "label" : "Pathology (Benign, Malignant, other)",
              "enabled" : "true",
              "maxLength" : "51",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerDiagnosisPathology"
            }, {
              "type" : "TEXT",
              "label" : "Stage/Grade",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerDiagnosisStageGrade"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "21",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerDiagnosisDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "21",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerDiagnosisDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerDiagnosisDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "78",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerDiagnosisDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerDiagnosisPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Tumor",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerTumorDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Type/Location",
              "enabled" : "true",
              "maxLength" : "27",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerTumorDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerTumorTypeLocation"
            }, {
              "type" : "TEXT",
              "label" : "Pathology (Benign, Malignant, other)",
              "enabled" : "true",
              "maxLength" : "51",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerTumorDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerTumorPathology"
            }, {
              "type" : "TEXT",
              "label" : "Stage/Grade",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerTumorDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerTumorStageGrade"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "21",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerTumorDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerTumorDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "21",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerTumorDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerTumorDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerTumorDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerTumorDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "78",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerTumorDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerTumorDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerTumorPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Cyst",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerCystDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Type/Location",
              "enabled" : "true",
              "maxLength" : "27",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerCystDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerCystTypeLocation"
            }, {
              "type" : "TEXT",
              "label" : "Pathology (Benign, Malignant, other)",
              "enabled" : "true",
              "maxLength" : "51",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerCystDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerCystPathology"
            }, {
              "type" : "TEXT",
              "label" : "Stage/Grade",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerCystDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerCystStageGrade"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "21",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerCystDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerCystDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "21",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerCystDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerCystDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerCystDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerCystDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "78",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerCystDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerCystDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerCystPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Growth",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerGrowthDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Type/Location",
              "enabled" : "true",
              "maxLength" : "27",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerGrowthDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerGrowthTypeLocation"
            }, {
              "type" : "TEXT",
              "label" : "Pathology (Benign, Malignant, other)",
              "enabled" : "true",
              "maxLength" : "51",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerGrowthDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerGrowthPathology"
            }, {
              "type" : "TEXT",
              "label" : "Stage/Grade",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerGrowthDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerGrowthStageGrade"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "21",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerGrowthDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerGrowthDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "21",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerGrowthDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerGrowthDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerGrowthDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerGrowthDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "78",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerGrowthDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerGrowthDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerGrowthPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Other",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerOtherDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerOtherDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerDiagnosisOtherGroup",
              "group" : {
                "title" : "Other Diagnosis Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Specify",
                    "enabled" : "true",
                    "maxLength" : "18",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerDiagnosisOtherGroup[$].cancerOtherDiagnosisDetails"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type/Location",
                    "enabled" : "true",
                    "maxLength" : "27",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerDiagnosisOtherGroup[$].cancerOtherTypeLocation"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Pathology (Benign, Malignant, other)",
                    "enabled" : "true",
                    "maxLength" : "51",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerDiagnosisOtherGroup[$].cancerOtherPathology"
                  }, {
                    "type" : "TEXT",
                    "label" : "Stage/Grade",
                    "enabled" : "true",
                    "maxLength" : "15",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerDiagnosisOtherGroup[$].cancerOtherStageGrade"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date of Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "21",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerDiagnosisOtherGroup[$].cancerOtherDateOfDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Last Seen by Physician",
                    "enabled" : "true",
                    "maxLength" : "21",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerDiagnosisOtherGroup[$].cancerOtherDateLastSeenByPhysician"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerDiagnosisOtherGroup[$].cancerOtherDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosing Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "78",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerOtherDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerOtherDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerDiagnosisOtherGroup[$].cancerOtherPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was there metastasis or spread to other tissue/organs?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerMetastasisOrSpread"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Provide other location(s):",
              "enabled" : "true",
              "maxLength" : "66",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerMetastasisOrSpread), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerMetastasisOrSpreadDetails"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Indicate treatment type(s):",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.cancerQuestion), 'YES');\n  });\n}",
              "name" : "ui.cancerTreatmentTypesLabel"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Medication",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerTreatmentTypeMedication"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerTreatmentTypeMedication), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerMedicationGroup",
              "group" : {
                "title" : "Medication Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "36",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerMedicationGroup[$].cancerMedicationDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Name of Medication",
                    "enabled" : "true",
                    "maxLength" : "52",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerMedicationGroup[$].cancerMedicationNameOfMedication"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Dosage/Frequency",
                    "enabled" : "true",
                    "maxLength" : "32",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerMedicationGroup[$].cancerMedicationDosageFrequency"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date First Taken",
                    "enabled" : "true",
                    "maxLength" : "22",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerMedicationGroup[$].cancerMedicationDateFirstTaken"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Last Taken",
                    "enabled" : "true",
                    "maxLength" : "22",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerMedicationGroup[$].cancerMedicationDateLastTaken"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Chemotherapy",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerTreatmentTypeChemotherapy"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerTreatmentTypeChemotherapy), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerChemotherapyGroup",
              "group" : {
                "title" : "Chemotherapy Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "36",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeChemotherapy), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerChemotherapyGroup[$].cancerChemotherapyDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Name of Medication",
                    "enabled" : "true",
                    "maxLength" : "52",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeChemotherapy), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerChemotherapyGroup[$].cancerChemotherapyNameOfMedication"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Dosage/Frequency",
                    "enabled" : "true",
                    "maxLength" : "32",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeChemotherapy), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerChemotherapyGroup[$].cancerChemotherapyDosageFrequency"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date First Taken",
                    "enabled" : "true",
                    "maxLength" : "22",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeChemotherapy), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerChemotherapyGroup[$].cancerChemotherapyDateFirstTaken"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Last Taken",
                    "enabled" : "true",
                    "maxLength" : "22",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeChemotherapy), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerChemotherapyGroup[$].cancerChemotherapyDateLastTaken"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Radiation",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerTreatmentTypeRadiation"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerTreatmentTypeRadiation), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerRadiationGroup",
              "group" : {
                "title" : "Radiation Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "36",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeRadiation), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerRadiationGroup[$].cancerRadiationDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Started",
                    "enabled" : "true",
                    "maxLength" : "34",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeRadiation), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerRadiationGroup[$].cancerRadiationDateStarted"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date Ended",
                    "enabled" : "true",
                    "maxLength" : "30",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeRadiation), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerRadiationGroup[$].cancerRadiationDateEnded"
                  }, {
                    "type" : "TEXT",
                    "label" : "Frequency",
                    "enabled" : "true",
                    "maxLength" : "70",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeRadiation), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerRadiationGroup[$].cancerRadiationFrequency"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Surgery",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerTreatmentTypeSurgery"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerTreatmentTypeSurgery), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerSurgeryGroup",
              "group" : {
                "title" : "Surgery Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "56",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerSurgeryGroup[$].cancerSurgeryDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Surgery",
                    "enabled" : "true",
                    "maxLength" : "52",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerSurgeryGroup[$].cancerSurgeryType"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date of Surgery",
                    "enabled" : "true",
                    "maxLength" : "40",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerSurgeryGroup[$].cancerSurgeryDate"
                  }, {
                    "type" : "TEXT",
                    "label" : "Results",
                    "enabled" : "true",
                    "maxLength" : "80",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerSurgeryGroup[$].cancerSurgeryResults"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerSurgeryGroup[$].cancerSurgeryDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "96",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeSurgery), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerSurgeryDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerSurgeryGroup[$].cancerSurgeryPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Other Treatment",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerTreatmentTypeOther"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerTreatmentTypeOther), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerOtherTreatmentTypeGroup",
              "group" : {
                "title" : "Other Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "68",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerOtherTreatmentTypeGroup[$].cancerOtherDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Treatment",
                    "enabled" : "true",
                    "maxLength" : "100",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerOtherTreatmentTypeGroup[$].cancerOtherTypeOfTreatment"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date Started",
                    "enabled" : "true",
                    "maxLength" : "40",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerOtherTreatmentTypeGroup[$].cancerOtherDateStarted"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Ended",
                    "enabled" : "true",
                    "maxLength" : "40",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerOtherTreatmentTypeGroup[$].cancerOtherDateEnded"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerOtherTreatmentTypeGroup[$].cancerOtherDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "76",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerTreatmentTypeOther), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerOtherDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerOtherTreatmentTypeGroup[$].cancerOtherPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, were follow up exams or tests completed following treatment or surgery?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerAfterTreatmentOrSurgeryEnded"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerAfterTreatmentOrSurgeryEnded), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerAfterTreatmentGroup",
              "group" : {
                "title" : "Follow Up Exam or Test Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "56",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerAfterTreatmentOrSurgeryEnded), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerAfterTreatmentGroup[$].cancerAfterEndedDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Follow Up/Test",
                    "enabled" : "true",
                    "maxLength" : "80",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerAfterTreatmentOrSurgeryEnded), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerAfterTreatmentGroup[$].cancerAfterEndedTypeOfFollowUp"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date",
                    "enabled" : "true",
                    "maxLength" : "48",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerAfterTreatmentOrSurgeryEnded), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerAfterTreatmentGroup[$].cancerAfterEndedDate"
                  }, {
                    "type" : "TEXT",
                    "label" : "Results",
                    "enabled" : "true",
                    "maxLength" : "68",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerAfterTreatmentOrSurgeryEnded), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerAfterTreatmentGroup[$].cancerAfterEndedResults"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerAfterTreatmentOrSurgeryEnded), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerAfterTreatmentGroup[$].cancerAfterEndedDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "92",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerAfterTreatmentOrSurgeryEnded), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerAfterEndedDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerAfterTreatmentGroup[$].cancerAfterEndedPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 10 years, has a medical professional diagnosed you with a recurrence of a cancer, cyst, tumor or growth?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerRecurrenceOfCancerOrTumor"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerRecurrenceOfCancerOrTumor), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerRecurrenceGroup",
              "group" : {
                "title" : "Recurrence Diagnosis Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "56",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerRecurrenceOfCancerOrTumor), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerRecurrenceGroup[$].cancerRecurrenceOfCancerDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Follow Up/Test",
                    "enabled" : "true",
                    "maxLength" : "80",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerRecurrenceOfCancerOrTumor), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerRecurrenceGroup[$].cancerRecurrenceOfCancerTypeOfFollowUp"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date",
                    "enabled" : "true",
                    "maxLength" : "48",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerRecurrenceOfCancerOrTumor), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerRecurrenceGroup[$].cancerRecurrenceOfCancerDate"
                  }, {
                    "type" : "TEXT",
                    "label" : "Treatments",
                    "enabled" : "true",
                    "maxLength" : "68",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerRecurrenceOfCancerOrTumor), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerRecurrenceGroup[$].cancerRecurrenceOfCancerTreatments"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerRecurrenceOfCancerOrTumor), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerRecurrenceGroup[$].cancerRecurrenceOfCancerDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "92",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerRecurrenceOfCancerOrTumor), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerRecurrenceOfCancerDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerRecurrenceGroup[$].cancerRecurrenceOfCancerPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you been hospitalized or treated as an out-patient for this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerHospitalizedForCondition"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerHospitalizedForCondition), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerHospitalizedForConditionGroup",
              "group" : {
                "title" : "Hospitalization or Out-Patient Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "56",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerHospitalizedForCondition), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerHospitalizedForConditionGroup[$].cancerHospitalizedForConditionDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date of Treatment",
                    "enabled" : "true",
                    "maxLength" : "48",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerHospitalizedForCondition), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerHospitalizedForConditionGroup[$].cancerHospitalizedForConditionDateOfTreatment"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Duration of Treatment",
                    "enabled" : "true",
                    "maxLength" : "64",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerHospitalizedForCondition), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerHospitalizedForConditionGroup[$].cancerHospitalizedForConditionDurationOfTreatment"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Treatment",
                    "enabled" : "true",
                    "maxLength" : "72",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerHospitalizedForCondition), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerHospitalizedForConditionGroup[$].cancerHospitalizedForConditionTypeOfTreatment"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerHospitalizedForCondition), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerHospitalizedForConditionGroup[$].cancerHospitalizedForConditionDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician or Provider Name/Address",
                    "enabled" : "true",
                    "maxLength" : "104",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.cancerHospitalizedForCondition), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerHospitalizedForConditionDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.cancerHospitalizedForConditionGroup[$].cancerHospitalizedForConditionPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 6 months, have you missed work for this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerMissedWorkForThisCondition"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Provide dates and details:",
              "enabled" : "true",
              "maxLength" : "540",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.cancerMissedWorkForThisCondition), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerMissedWorkForThisConditionDetails"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Additional Information/Comments:",
              "enabled" : "true",
              "maxLength" : "1900",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.cancerQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.cancerAdditionalInformation"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.cancerFormAdditionalInformationBlankLine"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Anxiety, depression, nervousness, stress, bipolar, schizophrenia, post-traumatic stress or any other personality, emotional or psychological disease or disorder",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.healthFactors.emotionalPsychologicalQuestion"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Please indicate Diagnosis in the last 10 years for your condition(s):",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
              "name" : "ui.mentalDiagnosisHeader"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Depression or Depressive Disorders",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalDepressionOrDepressiveDisordersDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalDepressionOrDepressiveDisordersDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalDepressionOrDepressiveDisordersDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalDepressionOrDepressiveDisordersDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalDepressionOrDepressiveDisordersDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalDepressionOrDepressiveDisordersDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalDepressionOrDepressiveDisordersDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "82",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalDepressionOrDepressiveDisordersDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalDepressionOrDepressiveDisordersDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalDepressionOrDepressiveDisordersPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Anxiety or Anxiety Disorders",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalAnxietyOrAnxietyDisordersDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAnxietyOrAnxietyDisordersDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalAnxietyOrAnxietyDisordersDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAnxietyOrAnxietyDisordersDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalAnxietyOrAnxietyDisordersDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAnxietyOrAnxietyDisordersDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalAnxietyOrAnxietyDisordersDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "82",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAnxietyOrAnxietyDisordersDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAnxietyOrAnxietyDisordersDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalAnxietyOrAnxietyDisordersPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Adjustment Disorder",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalAdjustmentDisorderDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAdjustmentDisorderDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalAdjustmentDisorderDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAdjustmentDisorderDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalAdjustmentDisorderDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAdjustmentDisorderDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalAdjustmentDisorderDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "82",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAdjustmentDisorderDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAdjustmentDisorderDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalAdjustmentDisorderPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Nervousness or Stress",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalNervousnessOrStressDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalNervousnessOrStressDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalNervousnessOrStressDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalNervousnessOrStressDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalNervousnessOrStressDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalNervousnessOrStressDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalNervousnessOrStressDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "82",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalNervousnessOrStressDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalNervousnessOrStressDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalNervousnessOrStressPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Obsessive Compulsive Disorder",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalObsessiveCompulsiveDisorderDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalObsessiveCompulsiveDisorderDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalObsessiveCompulsiveDisorderDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalObsessiveCompulsiveDisorderDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalObsessiveCompulsiveDisorderDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalObsessiveCompulsiveDisorderDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalObsessiveCompulsiveDisorderDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "82",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalObsessiveCompulsiveDisorderDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalObsessiveCompulsiveDisorderDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalObsessiveCompulsiveDisorderPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Attention Deficit Disorder (ADD)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalAttentionDeficitDisorderADDDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAttentionDeficitDisorderADDDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalAttentionDeficitDisorderADDDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAttentionDeficitDisorderADDDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalAttentionDeficitDisorderADDDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAttentionDeficitDisorderADDDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalAttentionDeficitDisorderADDDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "82",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAttentionDeficitDisorderADDDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalAttentionDeficitDisorderADDDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalAttentionDeficitDisorderADDPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Post-traumatic Stress Disorder (PTSD)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalPostTraumaticStressDisorderPTSDDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalPostTraumaticStressDisorderPTSDDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalPostTraumaticStressDisorderPTSDDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalPostTraumaticStressDisorderPTSDDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalPostTraumaticStressDisorderPTSDDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalPostTraumaticStressDisorderPTSDDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalPostTraumaticStressDisorderPTSDDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "82",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalPostTraumaticStressDisorderPTSDDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalPostTraumaticStressDisorderPTSDDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalPostTraumaticStressDisorderPTSDPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Personality Disorder",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalPersonalityDisorderDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalPersonalityDisorderDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalPersonalityDisorderDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalPersonalityDisorderDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalPersonalityDisorderDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalPersonalityDisorderDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalPersonalityDisorderDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "82",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalPersonalityDisorderDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalPersonalityDisorderDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalPersonalityDisorderPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Manic Depressive or Bipolar",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalManicDepressiveOrBipolarDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalManicDepressiveOrBipolarDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalManicDepressiveOrBipolarDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalManicDepressiveOrBipolarDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalManicDepressiveOrBipolarDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalManicDepressiveOrBipolarDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalManicDepressiveOrBipolarDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "82",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalManicDepressiveOrBipolarDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalManicDepressiveOrBipolarDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalManicDepressiveOrBipolarPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Schizophrenia",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalSchizophreniaDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalSchizophreniaDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalSchizophreniaDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalSchizophreniaDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalSchizophreniaDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalSchizophreniaDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalSchizophreniaDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "82",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalSchizophreniaDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalSchizophreniaDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalSchizophreniaPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Other",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalOtherDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalOtherDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalDiagnosisOtherGroup",
              "group" : {
                "title" : "Other Diagnosis Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Specify",
                    "enabled" : "true",
                    "maxLength" : "32",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalDiagnosisOtherGroup[$].mentalOtherDiagnosisDetails"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date of Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "18",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalDiagnosisOtherGroup[$].mentalOtherDateOfDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Last Seen by Physician",
                    "enabled" : "true",
                    "maxLength" : "26",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalDiagnosisOtherGroup[$].mentalOtherDateLastSeenByPhysician"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalDiagnosisOtherGroup[$].mentalOtherDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosing Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "82",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalOtherDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalOtherDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalDiagnosisOtherGroup[$].mentalOtherPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Do you or in the last 5 years have you taken medication to treat this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeMedication"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalTreatmentTypeMedication), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeMedicationGroup",
              "group" : {
                "title" : "Medication Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "36",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeMedicationGroup[$].mentalTreatmentTypeMedicationDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Name of Medication",
                    "enabled" : "true",
                    "maxLength" : "50",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeMedicationGroup[$].mentalTreatmentTypeMedicationNameOfMedication"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Dosage/Frequency",
                    "enabled" : "true",
                    "maxLength" : "36",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeMedicationGroup[$].mentalTreatmentTypeMedicationDosageFrequency"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date First Taken",
                    "enabled" : "true",
                    "maxLength" : "24",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeMedicationGroup[$].mentalTreatmentTypeMedicationDateFirstTaken"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Last Taken",
                    "enabled" : "true",
                    "maxLength" : "24",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeMedicationGroup[$].mentalTreatmentTypeMedicationDateLastTaken"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you received counseling or therapy to treat this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeCounselingOrTherapy"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalTreatmentTypeCounselingOrTherapy), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeCounselingOrTherapyGroup",
              "group" : {
                "title" : "Counseling or Therapy Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "54",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeCounselingOrTherapy), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeCounselingOrTherapyGroup[$].mentalTreatmentTypeCounselingOrTherapyDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Treatment",
                    "enabled" : "true",
                    "maxLength" : "48",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeCounselingOrTherapy), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeCounselingOrTherapyGroup[$].mentalTreatmentTypeCounselingOrTherapyTypeOfTreatment"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date Started",
                    "enabled" : "true",
                    "maxLength" : "27",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeCounselingOrTherapy), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeCounselingOrTherapyGroup[$].mentalTreatmentTypeCounselingOrTherapyDateStarted"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Last Seen",
                    "enabled" : "true",
                    "maxLength" : "42",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeCounselingOrTherapy), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeCounselingOrTherapyGroup[$].mentalTreatmentTypeCounselingOrTherapyDateLastSeen"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeCounselingOrTherapy), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeCounselingOrTherapyGroup[$].mentalTreatmentTypeCounselingOrTherapyDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician or Provider Name/Address",
                    "enabled" : "true",
                    "maxLength" : "84",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeCounselingOrTherapy), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalTreatmentTypeCounselingOrTherapyDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeCounselingOrTherapyGroup[$].mentalTreatmentTypeCounselingOrTherapyPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you been hospitalized or treated as an out-patient for this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeHospitalizationOrOutPatient"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeHospitalizationOrOutPatientGroup",
              "group" : {
                "title" : "Hospitalization or Out-Patient Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "54",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeHospitalizationOrOutPatientGroup[$].mentalTreatmentTypeHospitalizationOrOutPatientDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Treatment",
                    "enabled" : "true",
                    "maxLength" : "48",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeHospitalizationOrOutPatientGroup[$].mentalTreatmentTypeHospitalizationOrOutPatientTypeOfTreatment"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date",
                    "enabled" : "true",
                    "maxLength" : "24",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeHospitalizationOrOutPatientGroup[$].mentalTreatmentTypeHospitalizationOrOutPatientDate"
                  }, {
                    "type" : "TEXT",
                    "label" : "Duration of Treatment",
                    "enabled" : "true",
                    "maxLength" : "48",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeHospitalizationOrOutPatientGroup[$].mentalTreatmentTypeHospitalizationOrOutPatientDurationOfTreatment"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "maxLength" : "81",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeHospitalizationOrOutPatientGroup[$].mentalTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "80",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalTreatmentTypeHospitalizationOrOutPatient), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalTreatmentTypeHospitalizationOrOutPatientGroup[$].mentalTreatmentTypeHospitalizationOrOutPatientPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you been treated by a member of the medical profession for suicidal thoughts or attempted suicide?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalSuicidalThoughtsOrAttempts"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalSuicidalThoughtsOrAttempts), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalSuicidalThoughtsOrAttemptsGroup",
              "group" : {
                "title" : "Details of Suicidal Thoughts or Attempts",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Type of Treatment",
                    "enabled" : "true",
                    "maxLength" : "52",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalSuicidalThoughtsOrAttempts), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalSuicidalThoughtsOrAttemptsGroup[$].mentalSuicidalThoughtsOrAttemptsTypeOfTreatment"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date",
                    "enabled" : "true",
                    "maxLength" : "24",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalSuicidalThoughtsOrAttempts), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalSuicidalThoughtsOrAttemptsGroup[$].mentalSuicidalThoughtsOrAttemptsDate"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "maxLength" : "100",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalSuicidalThoughtsOrAttempts), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalSuicidalThoughtsOrAttemptsGroup[$].mentalSuicidalThoughtsOrAttemptsDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician or Provider Name/Address",
                    "enabled" : "true",
                    "maxLength" : "100",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.mentalSuicidalThoughtsOrAttempts), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalSuicidalThoughtsOrAttemptsDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.mentalSuicidalThoughtsOrAttemptsGroup[$].mentalSuicidalThoughtsOrAttemptsPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 6 months, have you missed work for this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalMissedWorkForCondition"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Provide dates and details:",
              "enabled" : "true",
              "maxLength" : "180",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.mentalMissedWorkForCondition), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalMissedWorkForConditionDetails"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Additional Information/Comments:",
              "enabled" : "true",
              "maxLength" : "184",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.emotionalPsychologicalQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.mentalAdditionalInformationOrComments"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.mentalAdditionalInformationOrCommentsBlankLine"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Migraines, headaches, concussion, memory loss, dizziness, fainting, epilepsy, seizures, multiple sclerosis, carpal tunnel, neuropathy or any other disease or disorder of the brain or nerves",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainNervesQuestion"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Please indicate Diagnosis in the last 10 years for your condition(s).:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.brainNervesQuestion), 'YES');\n  });\n}",
              "name" : "ui.brainDiagnosisHeader"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Migraines",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainMigrainesDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMigrainesDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainMigrainesDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMigrainesDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainMigrainesDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMigrainesDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainMigrainesDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "64",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMigrainesDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMigrainesDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainMigrainesPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Headaches",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainHeadachesDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainHeadachesDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainHeadachesDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainHeadachesDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainHeadachesDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainHeadachesDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainHeadachesDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "64",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainHeadachesDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainHeadachesDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainHeadachesPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Concussion",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainConcussionDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainConcussionDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainConcussionDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainConcussionDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainConcussionDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainConcussionDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainConcussionDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "64",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainConcussionDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainConcussionDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainConcussionPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Memory Loss",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainMemoryLossDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMemoryLossDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainMemoryLossDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMemoryLossDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainMemoryLossDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMemoryLossDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainMemoryLossDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "64",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMemoryLossDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMemoryLossDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainMemoryLossPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Dizziness",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainDizzinessDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainDizzinessDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainDizzinessDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainDizzinessDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainDizzinessDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainDizzinessDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainDizzinessDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "64",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainDizzinessDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainDizzinessDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainDizzinessPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Fainting",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainFaintingDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainFaintingDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainFaintingDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainFaintingDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainFaintingDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainFaintingDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainFaintingDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "64",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainFaintingDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainFaintingDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainFaintingPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Seizures",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainSeizuresDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainSeizuresDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainSeizuresDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainSeizuresDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainSeizuresDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainSeizuresDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainSeizuresDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "64",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainSeizuresDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainSeizuresDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainSeizuresPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Epilepsy",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainEpilepsyDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainEpilepsyDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainEpilepsyDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainEpilepsyDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainEpilepsyDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainEpilepsyDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainEpilepsyDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "64",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainEpilepsyDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainEpilepsyDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainEpilepsyPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Multiple Sclerosis",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainMultipleSclerosisDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMultipleSclerosisDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainMultipleSclerosisDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMultipleSclerosisDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainMultipleSclerosisDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMultipleSclerosisDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainMultipleSclerosisDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "64",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMultipleSclerosisDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMultipleSclerosisDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainMultipleSclerosisPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Carpal Tunnel",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainCarpalTunnelDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Location(s):",
              "enabled" : "true",
              "maxLength" : "40",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainCarpalTunnelDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainCarpalTunnelLocations"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainCarpalTunnelDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainCarpalTunnelDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainCarpalTunnelDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainCarpalTunnelDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainCarpalTunnelDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainCarpalTunnelDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "64",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainCarpalTunnelDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainCarpalTunnelDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainCarpalTunnelPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Neuropathy",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainNeuropathyDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Location(s):",
              "enabled" : "true",
              "maxLength" : "40",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainNeuropathyDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainNeuropathyLocations"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainNeuropathyDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainNeuropathyDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainNeuropathyDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainNeuropathyDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainNeuropathyDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainNeuropathyDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "64",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainNeuropathyDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainNeuropathyDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainNeuropathyPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Other",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainOtherDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainOtherDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainOtherDiagnosisGroup",
              "group" : {
                "title" : "Other Diagnosis Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Specify",
                    "enabled" : "true",
                    "maxLength" : "50",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainOtherDiagnosisGroup[$].brainOtherDiagnosisDetails"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date of Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "18",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainOtherDiagnosisGroup[$].brainOtherDateOfDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Last Seen by Physician",
                    "enabled" : "true",
                    "maxLength" : "26",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainOtherDiagnosisGroup[$].brainOtherDateLastSeenByPhysician"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainOtherDiagnosisGroup[$].brainOtherDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosing Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "64",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainOtherDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainOtherDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainOtherDiagnosisGroup[$].brainOtherPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.brainSeizuresDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.brainEpilepsyDiagnosis), 'YES'));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainSeizureOrEpilepsyResponseGroup",
              "group" : {
                "title" : "Seizure or Epilepsy Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Type",
                    "enabled" : "true",
                    "maxLength" : "33",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.parent.brainSeizuresDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.brainEpilepsyDiagnosis), 'YES'));\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainSeizureOrEpilepsyResponseGroup[$].brainSeizureOrEpilepsyType"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date of Last Attack",
                    "enabled" : "true",
                    "maxLength" : "16",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.parent.brainSeizuresDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.brainEpilepsyDiagnosis), 'YES'));\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainSeizureOrEpilepsyResponseGroup[$].brainSeizureOrEpilepsyDateOfLastAttack"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Frequency of Attacks",
                    "enabled" : "true",
                    "maxLength" : "40",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && (pmrl.equal(pmrl.toUpperCase(parent.parent.brainSeizuresDiagnosis), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.brainEpilepsyDiagnosis), 'YES'));\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainSeizureOrEpilepsyResponseGroup[$].brainSeizureOrEpilepsyFrequencyOfAttacks"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Do you or in the last 5 years have you taken medication to treat this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainTreatmentTypeMedication"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainTreatmentTypeMedication), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainTreatmentTypeMedicationGroup",
              "group" : {
                "title" : "Medication Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "30",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainTreatmentTypeMedicationGroup[$].brainTreatmentTypeMedicationDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Name of Medication",
                    "enabled" : "true",
                    "maxLength" : "54",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainTreatmentTypeMedicationGroup[$].brainTreatmentTypeMedicationNameOfMedication"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Dosage/Frequency",
                    "enabled" : "true",
                    "maxLength" : "40",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainTreatmentTypeMedicationGroup[$].brainTreatmentTypeMedicationDosageFrequency"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date First Taken",
                    "enabled" : "true",
                    "maxLength" : "24",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainTreatmentTypeMedicationGroup[$].brainTreatmentTypeMedicationDateFirstTaken"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Last Taken",
                    "enabled" : "true",
                    "maxLength" : "24",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainTreatmentTypeMedicationGroup[$].brainTreatmentTypeMedicationDateLastTaken"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you had or been recommended to have any tests or surgery related to this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainRecommendedTestOrSurgery"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainRecommendedTestOrSurgery), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainRecommendedTestOrSurgeryGroup",
              "group" : {
                "title" : "Recommended Test or Surgery Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "42",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainRecommendedTestOrSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainRecommendedTestOrSurgeryGroup[$].brainRecommendedTestOrSurgeryDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Test/Surgery",
                    "enabled" : "true",
                    "maxLength" : "60",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainRecommendedTestOrSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainRecommendedTestOrSurgeryGroup[$].brainRecommendedTestOrSurgeryTypeOfTestSurgery"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date",
                    "enabled" : "true",
                    "maxLength" : "33",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainRecommendedTestOrSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainRecommendedTestOrSurgeryGroup[$].brainRecommendedTestOrSurgeryDate"
                  }, {
                    "type" : "TEXT",
                    "label" : "Results",
                    "enabled" : "true",
                    "maxLength" : "39",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainRecommendedTestOrSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainRecommendedTestOrSurgeryGroup[$].brainRecommendedTestOrSurgeryResults"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "maxLength" : "81",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainRecommendedTestOrSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainRecommendedTestOrSurgeryGroup[$].brainRecommendedTestOrSurgeryDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician or Provider Name/Address",
                    "enabled" : "true",
                    "maxLength" : "80",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainRecommendedTestOrSurgery), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainRecommendedTestOrSurgeryDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainRecommendedTestOrSurgeryGroup[$].brainRecommendedTestOrSurgeryPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you been hospitalized or treated as an out-patient for this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainTreatmentTypeHospitalizationOrOutPatient"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainTreatmentTypeHospitalizationOrOutPatientGroup",
              "group" : {
                "title" : "Hospitalization or Out-Patient Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "28",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainTreatmentTypeHospitalizationOrOutPatientGroup[$].brainTreatmentTypeHospitalizationOrOutPatientDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date of Treatment",
                    "enabled" : "true",
                    "maxLength" : "28",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainTreatmentTypeHospitalizationOrOutPatientGroup[$].brainTreatmentTypeHospitalizationOrOutPatientDateOfTreatment"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Duration of Treatment",
                    "enabled" : "true",
                    "maxLength" : "32",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainTreatmentTypeHospitalizationOrOutPatientGroup[$].brainTreatmentTypeHospitalizationOrOutPatientDurationOfTreatment"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Treatment",
                    "enabled" : "true",
                    "maxLength" : "30",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainTreatmentTypeHospitalizationOrOutPatientGroup[$].brainTreatmentTypeHospitalizationOrOutPatientTypeOfTreatment"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "maxLength" : "56",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainTreatmentTypeHospitalizationOrOutPatientGroup[$].brainTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician or Provider Name/Address",
                    "enabled" : "true",
                    "maxLength" : "56",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.brainTreatmentTypeHospitalizationOrOutPatient), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.brainTreatmentTypeHospitalizationOrOutPatientGroup[$].brainTreatmentTypeHospitalizationOrOutPatientPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 6 months, have you missed work for this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainMissedWorkForCondition"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Provide dates and details:",
              "enabled" : "true",
              "maxLength" : "180",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.brainMissedWorkForCondition), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainMissedWorkForConditionDetails"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Additional Information/Comments:",
              "enabled" : "true",
              "maxLength" : "3240",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.brainNervesQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.brainAdditionalInformationOrComments"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.brainAdditionalInformationOrCommentsBlankLine"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Back or neck pain, bones, joints, ligaments, muscle, spinal stenosis, herniated or degenerative disc, arthritis, fibromyalgia, lupus, chronic pain or any other injury, disease or disorder of the musculoskeletal system",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalChronicPainQuestion"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Please indicate Diagnosis in the last 10 years for your condition(s):",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
              "name" : "ui.musculoskeletalDiagnosisHeader"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Back Pain",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalBackPainDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalBackPainDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalBackPainDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "30",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalBackPainDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalBackPainDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalBackPainDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalBackPainDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "125",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalBackPainDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalBackPainDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalBackPainPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Neck Pain",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalNeckPainDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalNeckPainDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalNeckPainDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "30",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalNeckPainDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalNeckPainDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalNeckPainDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalNeckPainDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "125",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalNeckPainDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalNeckPainDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalNeckPainPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Spinal Stenosis",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalSpinalStenosisDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalSpinalStenosisDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalSpinalStenosisDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "30",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalSpinalStenosisDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalSpinalStenosisDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalSpinalStenosisDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalSpinalStenosisDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "125",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalSpinalStenosisDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalSpinalStenosisDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalSpinalStenosisPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Herniated Disc",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalHerniatedDiscDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Location",
              "enabled" : "true",
              "maxLength" : "42",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalHerniatedDiscDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalHerniatedDiscLocation"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalHerniatedDiscDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalHerniatedDiscDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "30",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalHerniatedDiscDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalHerniatedDiscDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalHerniatedDiscDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalHerniatedDiscDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "125",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalHerniatedDiscDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalHerniatedDiscDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalHerniatedDiscPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Degenerative Disc",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalDegenerativeDiscDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Location",
              "enabled" : "true",
              "maxLength" : "36",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalDegenerativeDiscDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalDegenerativeDiscLocation"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalDegenerativeDiscDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalDegenerativeDiscDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "30",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalDegenerativeDiscDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalDegenerativeDiscDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalDegenerativeDiscDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalDegenerativeDiscDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "125",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalDegenerativeDiscDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalDegenerativeDiscDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalDegenerativeDiscPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Arthritis",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalArthritisDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Type",
              "enabled" : "true",
              "maxLength" : "19",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalArthritisDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalArthritisType"
            }, {
              "type" : "TEXT",
              "label" : "Location",
              "enabled" : "true",
              "maxLength" : "17",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalArthritisDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalArthritisLocation"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalArthritisDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalArthritisDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "30",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalArthritisDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalArthritisDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalArthritisDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalArthritisDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "125",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalArthritisDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalArthritisDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalArthritisPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Fibromyalgia",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalFibromyalgiaDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalFibromyalgiaDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalFibromyalgiaDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "30",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalFibromyalgiaDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalFibromyalgiaDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalFibromyalgiaDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalFibromyalgiaDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "125",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalFibromyalgiaDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalFibromyalgiaDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalFibromyalgiaPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Lupus",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalLupusDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Type",
              "enabled" : "true",
              "maxLength" : "42",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalLupusDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalLupusType"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalLupusDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalLupusDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "30",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalLupusDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalLupusDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalLupusDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalLupusDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "125",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalLupusDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalLupusDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalLupusPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Chronic Pain",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalChronicPainDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Type",
              "enabled" : "true",
              "maxLength" : "20",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalChronicPainType"
            }, {
              "type" : "TEXT",
              "label" : "Location",
              "enabled" : "true",
              "maxLength" : "17",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalChronicPainLocation"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalChronicPainDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "30",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalChronicPainDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalChronicPainDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "125",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalChronicPainPhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Chiropractic Care",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalChiropracticCareDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Location",
              "enabled" : "true",
              "maxLength" : "36",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChiropracticCareDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalChiropracticCareLocation"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Date of Diagnosis",
              "enabled" : "true",
              "maxLength" : "18",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChiropracticCareDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalChiropracticCareDateOfDiagnosis"
            }, {
              "type" : "TEXT",
              "label" : "Date Last Seen by Physician",
              "enabled" : "true",
              "maxLength" : "30",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChiropracticCareDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalChiropracticCareDateLastSeenByPhysician"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Was this condition diagnosed by your Primary Care Physician?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChiropracticCareDiagnosis), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalChiropracticCareDiagnosedByPCP"
            } ]
          }, {
            "indent" : "4",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Diagnosing Physician Name/Address",
              "enabled" : "true",
              "maxLength" : "125",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChiropracticCareDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChiropracticCareDiagnosedByPCP), 'NO');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalChiropracticCarePhysicianNameAddress"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Other",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalOtherDiagnosis"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "FIELD_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.musculoskeletalOtherDiagnosis), 'YES');\n  });\n}",
              "name" : "ui.insureds[0].underwritingFactors.healthFactors.musculoskeletalOtherDiagnosisGroup",
              "group" : {
                "title" : "Other Diagnosis Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Specify",
                    "enabled" : "true",
                    "maxLength" : "60",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalOtherDiagnosisGroup.musculoskeletalOtherDetails"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date of Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "18",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalOtherDiagnosisGroup.musculoskeletalOtherDateOfDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Last Seen by Physician",
                    "enabled" : "true",
                    "maxLength" : "30",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalOtherDiagnosisGroup.musculoskeletalOtherDateLastSeenByPhysician"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalOtherDiagnosis), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalOtherDiagnosisGroup.musculoskeletalOtherDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosing Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "125",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalOtherDiagnosis), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalOtherDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalOtherDiagnosisGroup.musculoskeletalOtherPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Indicate treatment type(s):",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
              "name" : "ui.musculoskeletalTreatmentTypes"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Medication or Injections",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeMedicationInjections"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalTreatmentTypeMedicationInjections), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeMedicationInjectionsGroup",
              "group" : {
                "title" : "Medication or Injection Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "18",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeMedicationInjections), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeMedicationInjectionsGroup[$].musculoskeletalTreatmentTypeMedicationInjectionsDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Name of Medication/Injections",
                    "enabled" : "true",
                    "maxLength" : "27",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeMedicationInjections), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeMedicationInjectionsGroup[$].musculoskeletalTreatmentTypeMedicationInjectionsNameOfMedication"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Dosage/Frequency",
                    "enabled" : "true",
                    "maxLength" : "15",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeMedicationInjections), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeMedicationInjectionsGroup[$].musculoskeletalTreatmentTypeMedicationInjectionsDosageFrequency"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date First Taken",
                    "enabled" : "true",
                    "maxLength" : "12",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeMedicationInjections), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeMedicationInjectionsGroup[$].musculoskeletalTreatmentTypeMedicationInjectionsDateFirstTaken"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Last Taken",
                    "enabled" : "true",
                    "maxLength" : "11",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeMedicationInjections), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeMedicationInjectionsGroup[$].musculoskeletalTreatmentTypeMedicationInjectionsDateLastTaken"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Physical Therapy",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypePhysicalTherapy"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalTreatmentTypePhysicalTherapy), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypePhysicalTherapyGroup",
              "group" : {
                "title" : "Physical Therapy Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "36",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypePhysicalTherapy), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypePhysicalTherapyGroup[$].musculoskeletalTreatmentTypePhysicalTherapyDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Started",
                    "enabled" : "true",
                    "maxLength" : "36",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypePhysicalTherapy), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypePhysicalTherapyGroup[$].musculoskeletalTreatmentTypePhysicalTherapyDateStarted"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date Ended",
                    "enabled" : "true",
                    "maxLength" : "28",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypePhysicalTherapy), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypePhysicalTherapyGroup[$].musculoskeletalTreatmentTypePhysicalTherapyDateEnded"
                  }, {
                    "type" : "TEXT",
                    "label" : "Frequency",
                    "enabled" : "true",
                    "maxLength" : "70",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypePhysicalTherapy), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypePhysicalTherapyGroup[$].musculoskeletalTreatmentTypePhysicalTherapyFrequency"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Surgery",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeSurgery"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalTreatmentTypeSurgery), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeSurgeryGroup",
              "group" : {
                "title" : "Surgery Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "52",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeSurgeryGroup[$].musculoskeletalTreatmentTypeSurgeryDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Surgery",
                    "enabled" : "true",
                    "maxLength" : "56",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeSurgeryGroup[$].musculoskeletalTreatmentTypeSurgeryType"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date of Surgery",
                    "enabled" : "true",
                    "maxLength" : "44",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeSurgeryGroup[$].musculoskeletalTreatmentTypeSurgeryDate"
                  }, {
                    "type" : "TEXT",
                    "label" : "Results",
                    "enabled" : "true",
                    "maxLength" : "64",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeSurgeryGroup[$].musculoskeletalTreatmentTypeSurgeryResults"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeSurgeryGroup[$].musculoskeletalTreatmentTypeSurgeryDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "112",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeSurgery), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalTreatmentTypeSurgeryDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeSurgeryGroup[$].musculoskeletalTreatmentTypeSurgeryPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Other",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeOther"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalTreatmentTypeOther), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeOtherGroup",
              "group" : {
                "title" : "Other Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "54",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeOtherGroup[$].musculoskeletalTreatmentTypeOtherDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Treatment",
                    "enabled" : "true",
                    "maxLength" : "78",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeOtherGroup[$].musculoskeletalTreatmentTypeOtherTypeOfTreatment"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date Started",
                    "enabled" : "true",
                    "maxLength" : "27",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeOtherGroup[$].musculoskeletalTreatmentTypeOtherDateStarted"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Ended",
                    "enabled" : "true",
                    "maxLength" : "30",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeOtherGroup[$].musculoskeletalTreatmentTypeOtherDateEnded"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeOtherGroup[$].musculoskeletalTreatmentTypeOtherDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "57",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeOther), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalTreatmentTypeOtherDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeOtherGroup[$].musculoskeletalTreatmentTypeOtherPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Other than stated in previous answers, in the last 5 years, have you had or been recommended to have any tests or surgery related to this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalRecommendedTestOrSurgery"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalRecommendedTestOrSurgery), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalRecommendedTestOrSurgeryGroup",
              "group" : {
                "title" : "Recommended Test or Surgery Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "39",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalRecommendedTestOrSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalRecommendedTestOrSurgeryGroup[$].musculoskeletalRecommendedTestOrSurgeryDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Test/Surgery",
                    "enabled" : "true",
                    "maxLength" : "60",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalRecommendedTestOrSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalRecommendedTestOrSurgeryGroup[$].musculoskeletalRecommendedTestOrSurgeryTypeOfTestSurgery"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date of Surgery",
                    "enabled" : "true",
                    "maxLength" : "27",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalRecommendedTestOrSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalRecommendedTestOrSurgeryGroup[$].musculoskeletalRecommendedTestOrSurgeryDate"
                  }, {
                    "type" : "TEXT",
                    "label" : "Results",
                    "enabled" : "true",
                    "maxLength" : "51",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalRecommendedTestOrSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalRecommendedTestOrSurgeryGroup[$].musculoskeletalRecommendedTestOrSurgeryResults"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalRecommendedTestOrSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalRecommendedTestOrSurgeryGroup[$].musculoskeletalRecommendedTestOrSurgeryDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician or Provider Name/Address",
                    "enabled" : "true",
                    "maxLength" : "78",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalRecommendedTestOrSurgery), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalRecommendedTestOrSurgeryDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalRecommendedTestOrSurgeryGroup[$].musculoskeletalRecommendedTestOrSurgeryPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you been hospitalized or treated as an out-patient for this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeHospitalizationOrOutPatient"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeHospitalizationOrOutPatientGroup",
              "group" : {
                "title" : "Hospitalization or Out-Patient Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "42",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeHospitalizationOrOutPatientGroup[$].musculoskeletalTreatmentTypeHospitalizationOrOutPatientDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date of Treatment",
                    "enabled" : "true",
                    "maxLength" : "42",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeHospitalizationOrOutPatientGroup[$].musculoskeletalTreatmentTypeHospitalizationOrOutPatientDateOfTreatment"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Duration of Treatment",
                    "enabled" : "true",
                    "maxLength" : "51",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeHospitalizationOrOutPatientGroup[$].musculoskeletalTreatmentTypeHospitalizationOrOutPatientDurationOfTreatment"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Treatment",
                    "enabled" : "true",
                    "maxLength" : "45",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeHospitalizationOrOutPatientGroup[$].musculoskeletalTreatmentTypeHospitalizationOrOutPatientTypeOfTreatment"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeHospitalizationOrOutPatient), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeHospitalizationOrOutPatientGroup[$].musculoskeletalTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician or Provider Name/Address",
                    "enabled" : "true",
                    "maxLength" : "78",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.musculoskeletalTreatmentTypeHospitalizationOrOutPatient), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalTreatmentTypeHospitalizationOrOutPatientDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalTreatmentTypeHospitalizationOrOutPatientGroup[$].musculoskeletalTreatmentTypeHospitalizationOrOutPatientPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 6 months, have you missed work for this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalMissedWorkForCondition"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Provide dates and details:",
              "enabled" : "true",
              "maxLength" : "180",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalMissedWorkForCondition), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalMissedWorkForConditionDetails"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Additional Information/Comments:",
              "enabled" : "true",
              "maxLength" : "270",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.musculoskeletalChronicPainQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.musculoskeletalAdditionalInformationOrComments"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.musculoskeletalAdditionalInformationOrCommentsBlankLine"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Eye, ear, nose, throat, skin or blood disease or disorder",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.healthFactors.eyeEarNoseBloodQuestion"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Please indicate Diagnosis in the last 10 years for your condition(s):",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.eyeEarNoseBloodQuestion), 'YES');\n  });\n}",
              "name" : "ui.generalDiagnosisLabel"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.eyeEarNoseBloodQuestion), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalDiagnosisGroup",
              "group" : {
                "title" : "Other Diagnosis Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "63",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalDiagnosisGroup[$].generalIndicateDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date of Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "21",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalDiagnosisGroup[$].generalDateOfDiagnosis"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date Last Seen by Physician",
                    "enabled" : "true",
                    "maxLength" : "21",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalDiagnosisGroup[$].generalDateLastSeen"
                  }, {
                    "type" : "TEXT",
                    "label" : "Results of Last Visit",
                    "enabled" : "true",
                    "maxLength" : "45",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalDiagnosisGroup[$].generalResultsOfLastVisit"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalDiagnosisGroup[$].generalDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosing Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "108",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalDiagnosisGroup[$].generalPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Indicate treatment type(s):",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.eyeEarNoseBloodQuestion), 'YES');\n  });\n}",
              "name" : "ui.general.treatmentTypeLabel"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Medication",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.eyeEarNoseBloodQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalTreatmentTypeMedication"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeMedication), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalMedicationTreatmentGroup",
              "group" : {
                "title" : "Medication Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "32",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalMedicationTreatmentGroup[$].generalMedicationDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Name of Medication",
                    "enabled" : "true",
                    "maxLength" : "54",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalMedicationTreatmentGroup[$].generalMedicationName"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Dosage/Frequency",
                    "enabled" : "true",
                    "maxLength" : "34",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalMedicationTreatmentGroup[$].generalMedicationDosage"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date First Taken",
                    "enabled" : "true",
                    "maxLength" : "22",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalMedicationTreatmentGroup[$].generalMedicationFirstTaken"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Last Taken",
                    "enabled" : "true",
                    "maxLength" : "22",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeMedication), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalMedicationTreatmentGroup[$].generalMedicationLastTaken"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Surgery",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.eyeEarNoseBloodQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalTreatmentTypeSurgery"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeSurgery), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalSurgeryTreatmentGroup",
              "group" : {
                "title" : "Surgery Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "63",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalSurgeryTreatmentGroup[$].generalSurgeryDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Surgery",
                    "enabled" : "true",
                    "maxLength" : "60",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalSurgeryTreatmentGroup[$].generalSurgeryType"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date of Surgery",
                    "enabled" : "true",
                    "maxLength" : "44",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalSurgeryTreatmentGroup[$].generalSurgeryDate"
                  }, {
                    "type" : "TEXT",
                    "label" : "Results",
                    "enabled" : "true",
                    "maxLength" : "64",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalSurgeryTreatmentGroup[$].generalSurgeryResults"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalSurgeryTreatmentGroup[$].generalSurgeryDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "96",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalSurgeryDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalSurgeryTreatmentGroup[$].generalSurgeryPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Other",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.eyeEarNoseBloodQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalTreatmentTypeOther"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeOther), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalOtherTreatmentGroup",
              "group" : {
                "title" : "Other Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "64",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalOtherTreatmentGroup[$].generalOtherDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Treatment",
                    "enabled" : "true",
                    "maxLength" : "72",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalOtherTreatmentGroup[$].generalOtherTypeOfTreatment"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date Started",
                    "enabled" : "true",
                    "maxLength" : "48",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalOtherTreatmentGroup[$].generalOtherDateStarted"
                  }, {
                    "type" : "TEXT",
                    "label" : "Last Treatment",
                    "enabled" : "true",
                    "maxLength" : "68",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalOtherTreatmentGroup[$].generalOtherLastTreatment"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalOtherTreatmentGroup[$].generalOtherDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "80",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalOtherDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalOtherTreatmentGroup[$].generalOtherPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Other than stated in previous answers, in the last 5 years, have you had or been recommended to have any tests or surgery related to this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.eyeEarNoseBloodQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgery"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalRecommendedToHaveTestOrSurgery), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup",
              "group" : {
                "title" : "Recommended Test or Surgery Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "54",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup[$].generalRecommendedDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Test/Surgery",
                    "enabled" : "true",
                    "maxLength" : "51",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup[$].generalRecommendedTypeOfTest"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date",
                    "enabled" : "true",
                    "maxLength" : "33",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup[$].generalRecommendedDate"
                  }, {
                    "type" : "TEXT",
                    "label" : "Results",
                    "enabled" : "true",
                    "maxLength" : "33",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup[$].generalRecommendedResults"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup[$].generalRecommendedDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "84",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalRecommendedDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup[$].generalRecommendedPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you been hospitalized or treated as an out-patient for this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.eyeEarNoseBloodQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalHospitalizedForCondition"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalHospitalizedForCondition), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalHospitalizedGroup",
              "group" : {
                "title" : "Hospitalization or Out-Patient Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "42",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalHospitalizedGroup[$].generalHospitalizedForConditionDiagnosis"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date of Treatment",
                    "enabled" : "true",
                    "maxLength" : "42",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalHospitalizedGroup[$].generalHospitalizedForConditionDateOfTreatment"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Duration of Treatment",
                    "enabled" : "true",
                    "maxLength" : "51",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalHospitalizedGroup[$].generalHospitalizedForConditionDurationOfTreatment"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Treatment",
                    "enabled" : "true",
                    "maxLength" : "42",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalHospitalizedGroup[$].generalHospitalizedForConditionTypeOfTreatment"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalHospitalizedGroup[$].generalHospitalizedForConditionDiagnosedByPCP"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician or Provider Name/Address",
                    "enabled" : "true",
                    "maxLength" : "84",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalHospitalizedForConditionDiagnosedByPCP), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalHospitalizedGroup[$].generalHospitalizedForConditionPhysicianNameAddress"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 6 months, have you missed work for this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.eyeEarNoseBloodQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalMissedWorkForThisCondition"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Provide dates and details:",
              "enabled" : "true",
              "maxLength" : "405",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.eyeEarNoseBloodQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalMissedWorkForThisCondition), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalMissedWorkForThisConditionDetails"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Additional Information/Comments:",
              "enabled" : "true",
              "maxLength" : "810",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.eyeEarNoseBloodQuestion), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalFormAdditionalInformation1"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you been advised by a medical professional to undergo treatment, surgery, therapy, diagnostic evaluation or testing that has not yet been completed or diagnostic tests performed where the results are still pending or were inconclusive?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.notEqual(parent.parent.parent.residentialAddress.state, 'FL');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diagnosticEvaluationQuestion"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you been advised to undergo treatment, surgery, therapy, diagnostic evaluation or testing that has not yet been completed or diagnostic tests performed where the results are still pending or were inconclusive as determined by a medical professional?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.parent.parent.residentialAddress.state, 'FL');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.diagnosticEvaluationQuestion"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.diagnosticEvaluationQuestionBlankLine"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Other than stated in previous answers, in the last 5 years, have you been diagnosed with, treated, hospitalized, consulted with or been advised by a medical professional to consult with a physician, chiropractor, psychiatrist, counselor, therapist or other medical professional, for a condition?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.healthFactors.otherDiagnosesTreatmentQuestion"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.otherDiagnosesTreatmentQuestionBlankLine"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Other than stated in previous answers, in the last 5 years, have you taken any prescribed or non-prescribed medication or supplement?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].underwritingFactors.healthFactors.otherMedicationQuestion"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "If any of the above three questions are answered yes, please provide information for all conditions pertaining to those questions",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.insureds[Big('0')].underwritingFactors.healthFactors.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.insureds[Big('0')].underwritingFactors.healthFactors.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.insureds[Big('0')].underwritingFactors.healthFactors.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.otherMedicationQuestion), 'YES'));\n  });\n}",
              "name" : "ui.generalAnsweredQuestionsLabel2"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Please indicate Diagnosis in the last 10 years for your condition(s):",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.insureds[Big('0')].underwritingFactors.healthFactors.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.insureds[Big('0')].underwritingFactors.healthFactors.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.insureds[Big('0')].underwritingFactors.healthFactors.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.otherMedicationQuestion), 'YES'));\n  });\n}",
              "name" : "ui.generalDiagnosisLabel2"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherMedicationQuestion), 'YES'));\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalDiagnosisGroup2",
              "group" : {
                "title" : "Other Diagnosis Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "63",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES'));\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalDiagnosisGroup2[$].generalIndicateDiagnosis2"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date of Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "21",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES'));\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalDiagnosisGroup2[$].generalDateOfDiagnosis2"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date Last Seen by Physician",
                    "enabled" : "true",
                    "maxLength" : "21",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES'));\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalDiagnosisGroup2[$].generalDateLastSeen2"
                  }, {
                    "type" : "TEXT",
                    "label" : "Results of Last Visit",
                    "enabled" : "true",
                    "maxLength" : "45",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES'));\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalDiagnosisGroup2[$].generalResultsOfLastVisit2"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES'));\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalDiagnosisGroup2[$].generalDiagnosedByPCP2"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosing Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "108",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.generalDiagnosedByPCP2), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalDiagnosisGroup2[$].generalPhysicianNameAddress2"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Indicate treatment type(s):",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.insureds[Big('0')].underwritingFactors.healthFactors.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.insureds[Big('0')].underwritingFactors.healthFactors.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.insureds[Big('0')].underwritingFactors.healthFactors.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].underwritingFactors.healthFactors.otherMedicationQuestion), 'YES'));\n  });\n}",
              "name" : "ui.generalTreatmentTypeLabel2"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Medication",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherMedicationQuestion), 'YES'));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalTreatmentTypeMedication2"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeMedication2), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalMedicationTreatmentGroup2",
              "group" : {
                "title" : "Medication Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "32",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeMedication2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalMedicationTreatmentGroup2[$].generalMedicationDiagnosis2"
                  }, {
                    "type" : "TEXT",
                    "label" : "Name of Medication",
                    "enabled" : "true",
                    "maxLength" : "54",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeMedication2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalMedicationTreatmentGroup2[$].generalMedicationName2"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Dosage/Frequency",
                    "enabled" : "true",
                    "maxLength" : "34",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeMedication2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalMedicationTreatmentGroup2[$].generalMedicationDosage2"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date First Taken",
                    "enabled" : "true",
                    "maxLength" : "22",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeMedication2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalMedicationTreatmentGroup2[$].generalMedicationFirstTaken2"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date Last Taken",
                    "enabled" : "true",
                    "maxLength" : "22",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeMedication2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalMedicationTreatmentGroup2[$].generalMedicationLastTaken2"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Surgery",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherMedicationQuestion), 'YES'));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalTreatmentTypeSurgery2"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeSurgery2), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalSurgeryTreatmentGroup2",
              "group" : {
                "title" : "Surgery Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "63",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalSurgeryTreatmentGroup2[$].generalSurgeryDiagnosis2"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Surgery",
                    "enabled" : "true",
                    "maxLength" : "60",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalSurgeryTreatmentGroup2[$].generalSurgeryType2"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date of Surgery",
                    "enabled" : "true",
                    "maxLength" : "44",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalSurgeryTreatmentGroup2[$].generalSurgeryDate2"
                  }, {
                    "type" : "TEXT",
                    "label" : "Results",
                    "enabled" : "true",
                    "maxLength" : "64",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalSurgeryTreatmentGroup2[$].generalSurgeryResults2"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalSurgeryTreatmentGroup2[$].generalSurgeryDiagnosedByPCP2"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "96",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeSurgery2), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalSurgeryDiagnosedByPCP2), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalSurgeryTreatmentGroup2[$].generalSurgeryPhysicianNameAddress2"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Other",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherMedicationQuestion), 'YES'));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalTreatmentTypeOther2"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.generalTreatmentTypeOther2), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalOtherTreatmentGroup2",
              "group" : {
                "title" : "Other Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "64",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalOtherTreatmentGroup2[$].generalOtherDiagnosis2"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Treatment",
                    "enabled" : "true",
                    "maxLength" : "72",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalOtherTreatmentGroup2[$].generalOtherTypeOfTreatment2"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date Started",
                    "enabled" : "true",
                    "maxLength" : "48",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalOtherTreatmentGroup2[$].generalOtherDateStarted2"
                  }, {
                    "type" : "TEXT",
                    "label" : "Last Treatment",
                    "enabled" : "true",
                    "maxLength" : "68",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalOtherTreatmentGroup2[$].generalOtherLastTreatment2"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalOtherTreatmentGroup2[$].generalOtherDiagnosedByPCP2"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "80",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalTreatmentTypeOther2), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalOtherDiagnosedByPCP2), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalOtherTreatmentGroup2[$].generalOtherPhysicianNameAddress2"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Other than stated in previous answers, in the last 5 years, have you had or been recommended to have any tests or surgery related to this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherMedicationQuestion), 'YES'));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgery2"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.generalRecommendedToHaveTestOrSurgery2), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup2",
              "group" : {
                "title" : "Recommended Test or Surgery Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "54",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup2[$].generalRecommendedDiagnosis2"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Test/Surgery",
                    "enabled" : "true",
                    "maxLength" : "51",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup2[$].generalRecommendedTypeOfTest2"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Date",
                    "enabled" : "true",
                    "maxLength" : "33",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup2[$].generalRecommendedDate2"
                  }, {
                    "type" : "TEXT",
                    "label" : "Results",
                    "enabled" : "true",
                    "maxLength" : "33",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup2[$].generalRecommendedResults2"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup2[$].generalRecommendedDiagnosedByPCP2"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician Name/Address",
                    "enabled" : "true",
                    "maxLength" : "84",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalRecommendedToHaveTestOrSurgery2), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalRecommendedDiagnosedByPCP2), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup2[$].generalRecommendedPhysicianNameAddress2"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 5 years, have you been hospitalized or treated as an out-patient for this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherMedicationQuestion), 'YES'));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalHospitalizedForCondition2"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.generalHospitalizedForCondition2), 'YES');\n  });\n}",
              "value" : "1",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalHospitalizedGroup2",
              "group" : {
                "title" : "Hospitalization or Out-Patient Treatment Details",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Diagnosis",
                    "enabled" : "true",
                    "maxLength" : "42",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalHospitalizedGroup2[$].generalHospitalizedForConditionDiagnosis2"
                  }, {
                    "type" : "TEXT",
                    "label" : "Date of Treatment",
                    "enabled" : "true",
                    "maxLength" : "42",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalHospitalizedGroup2[$].generalHospitalizedForConditionDateOfTreatment2"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Duration of Treatment",
                    "enabled" : "true",
                    "maxLength" : "51",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalHospitalizedGroup2[$].generalHospitalizedForConditionDurationOfTreatment2"
                  }, {
                    "type" : "TEXT",
                    "label" : "Type of Treatment",
                    "enabled" : "true",
                    "maxLength" : "42",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalHospitalizedGroup2[$].generalHospitalizedForConditionTypeOfTreatment2"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Was this condition diagnosed by your Primary Care Physician?",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition2), 'YES');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalHospitalizedGroup2[$].generalHospitalizedForConditionDiagnosedByPCP2"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Physician or Provider Name/Address",
                    "enabled" : "true",
                    "maxLength" : "84",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.parent.generalHospitalizedForCondition2), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.generalHospitalizedForConditionDiagnosedByPCP2), 'NO');\n  });\n}",
                    "name" : "insureds[0].underwritingFactors.healthFactors.generalHospitalizedGroup2[$].generalHospitalizedForConditionPhysicianNameAddress2"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "In the last 6 months, have you missed work for this condition?",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherMedicationQuestion), 'YES'));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalMissedWorkForThisCondition2"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Provide dates and details:",
              "enabled" : "true",
              "maxLength" : "405",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherMedicationQuestion), 'YES')) && pmrl.equal(pmrl.toUpperCase(parent.generalMissedWorkForThisCondition2), 'YES');\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalMissedWorkForThisConditionDetails2"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Additional Information/Comments:",
              "enabled" : "true",
              "maxLength" : "810",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.isDefined(parent.diagnosticEvaluationQuestion) && pmrl.isDefined(parent.otherDiagnosesTreatmentQuestion) && pmrl.isDefined(parent.otherMedicationQuestion) && (pmrl.equal(pmrl.toUpperCase(parent.diagnosticEvaluationQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherDiagnosesTreatmentQuestion), 'YES') || pmrl.equal(pmrl.toUpperCase(parent.otherMedicationQuestion), 'YES'));\n  });\n}",
              "name" : "insureds[0].underwritingFactors.healthFactors.generalFormAdditionalInformation2"
            } ]
          } ],
          "title" : "Medical History AO"
        }, {
          "rows" : [ {
            "indent" : "0",
            "fields" : [ {
              "type" : "HEADING",
              "label" : "Payment Information",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.paymentInformationHeading"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Will the insured be the payor?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "payors[0].additionalFields.proposedInsuredInsuredThePayor"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "If the insured is not the payor, the BSP will have to be completed on paper and submitted to the underwriter directly.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.payors[Big('0')].additionalFields.proposedInsuredInsuredThePayor), 'NO');\n  });\n}",
              "name" : "ui.insuredNotPayor"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "MONEY WILL BE WITHDRAWN FROM YOUR ACCOUNT AT POLICY ACCEPTANCE. The first withdrawal date or charge date may be different from the monthly date selected below for RECURRING premiums. Depending on the amount of time elapsed between the policy date and the date the policy is accepted, the amount of the withdrawal or charge may exceed one modal premium and may occur on a date other than the policy date. The Proposed Insured/Insured will NOT receive premium billing notices for this premium payment. We CANNOT establish electronic payments from foreign banks.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.payors[Big('0')].additionalFields.proposedInsuredInsuredThePayor), 'YES');\n  });\n}",
              "name" : "ui.paymentNoteParagraph"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Verify Payment Method",
              "enabled" : "false",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.payors[Big('0')].additionalFields.proposedInsuredInsuredThePayor), 'YES');\n  });\n}",
              "value" : "ACH",
              "name" : "paymentMethod"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Verify Recurring Payment Mode",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.payors[Big('0')].additionalFields.proposedInsuredInsuredThePayor), 'YES');\n  });\n}",
              "name" : "paymentSchedule"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Specify the date Recurring Premiums will be withdrawn (1st through the 28th of the month)",
              "enabled" : "true",
              "maxLength" : "2",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.payors[Big('0')].additionalFields.proposedInsuredInsuredThePayor), 'YES');\n  });\n}",
              "name" : "paymentWithdrawalDay"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "Provide Account Information",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.payors[Big('0')].additionalFields.proposedInsuredInsuredThePayor), 'YES');\n  });\n}",
              "name" : "ui.provideAccountInformation"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "CLEAR_BUTTON",
              "label" : "UPDATE ACCT INFO",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.payors[Big('0')].additionalFields.proposedInsuredInsuredThePayor), 'YES') && pmrl.isDefined(parent.paymentToken);\n  });\n}",
              "name" : "ui.clearButton",
              "targets" : [ "paymentToken", "payors[0].additionalFields.achAccountNumberConfirm", "payors[0].achAccountNumber" ]
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Account Type (select one)",
              "enabled" : "{\n  (function (parent, context, tables, rates) {\n    return !pmrl.isDefined(parent.parent.paymentToken);\n  });\n}",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.additionalFields.proposedInsuredInsuredThePayor), 'YES');\n  });\n}",
              "name" : "payors[0].achAccountType"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of payor as shown on bank account",
              "enabled" : "{\n  (function (parent, context, tables, rates) {\n    return !pmrl.isDefined(parent.parent.parent.paymentToken);\n  });\n}",
              "maxLength" : "60",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.proposedInsuredInsuredThePayor), 'YES');\n  });\n}",
              "name" : "payors[0].additionalFields.nameOnBankAccount"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Select if Billing Address is different than Residence Address",
              "enabled" : "false",
              "visible" : "false",
              "value" : "YES",
              "name" : "payors[0].additionalFields.billingAddressIndicator"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "FIELD_GROUP",
              "label" : "",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.payors[Big('0')].additionalFields.proposedInsuredInsuredThePayor), 'YES') && pmrl.isDefined(parent.payors[Big('0')].additionalFields.billingAddressIndicator) && pmrl.equal(parent.payors[Big('0')].additionalFields.billingAddressIndicator, 'YES');\n  });\n}",
              "name" : "ui.parent.payors[0].billingAddress",
              "group" : {
                "title" : "",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "Billing Address",
                    "enabled" : "{\n  (function (parent, context, tables, rates) {\n    return !pmrl.isDefined(parent.parent.parent.paymentToken);\n  });\n}",
                    "maxLength" : "40",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.proposedInsuredInsuredThePayor), 'YES') && pmrl.isDefined(parent.parent.additionalFields.billingAddressIndicator) && pmrl.equal(parent.parent.additionalFields.billingAddressIndicator, 'YES');\n  });\n}",
                    "name" : "payors[0].billingAddress.addressLine1"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "enabled" : "{\n  (function (parent, context, tables, rates) {\n    return !pmrl.isDefined(parent.parent.parent.paymentToken);\n  });\n}",
                    "maxLength" : "40",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.proposedInsuredInsuredThePayor), 'YES') && pmrl.isDefined(parent.parent.additionalFields.billingAddressIndicator) && pmrl.equal(parent.parent.additionalFields.billingAddressIndicator, 'YES');\n  });\n}",
                    "name" : "payors[0].billingAddress.addressLine2"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "City",
                    "enabled" : "{\n  (function (parent, context, tables, rates) {\n    return !pmrl.isDefined(parent.parent.parent.paymentToken);\n  });\n}",
                    "maxLength" : "20",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.proposedInsuredInsuredThePayor), 'YES') && pmrl.isDefined(parent.parent.additionalFields.billingAddressIndicator) && pmrl.equal(parent.parent.additionalFields.billingAddressIndicator, 'YES');\n  });\n}",
                    "name" : "payors[0].billingAddress.city"
                  }, {
                    "type" : "SELECT",
                    "label" : "State",
                    "enabled" : "{\n  (function (parent, context, tables, rates) {\n    return !pmrl.isDefined(parent.parent.parent.paymentToken);\n  });\n}",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.proposedInsuredInsuredThePayor), 'YES') && pmrl.isDefined(parent.parent.additionalFields.billingAddressIndicator) && pmrl.equal(parent.parent.additionalFields.billingAddressIndicator, 'YES');\n  });\n}",
                    "name" : "payors[0].billingAddress.state"
                  }, {
                    "type" : "TEXT",
                    "label" : "Zip Code",
                    "enabled" : "{\n  (function (parent, context, tables, rates) {\n    return !pmrl.isDefined(parent.parent.parent.paymentToken);\n  });\n}",
                    "maxLength" : "10",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.additionalFields.proposedInsuredInsuredThePayor), 'YES') && pmrl.isDefined(parent.parent.additionalFields.billingAddressIndicator) && pmrl.equal(parent.parent.additionalFields.billingAddressIndicator, 'YES');\n  });\n}",
                    "name" : "payors[0].billingAddress.zipCode"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name of Financial Institution",
              "enabled" : "{\n  (function (parent, context, tables, rates) {\n    return !pmrl.isDefined(parent.parent.paymentToken);\n  });\n}",
              "maxLength" : "60",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.additionalFields.proposedInsuredInsuredThePayor), 'YES');\n  });\n}",
              "name" : "payors[0].achInstitutionName"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "NUMBER",
              "label" : "Bank Routing Number",
              "enabled" : "{\n  (function (parent, context, tables, rates) {\n    return !pmrl.isDefined(parent.parent.paymentToken);\n  });\n}",
              "maxLength" : "9",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.additionalFields.proposedInsuredInsuredThePayor), 'YES');\n  });\n}",
              "name" : "payors[0].achRoutingNumber"
            }, {
              "type" : "NUMBER",
              "label" : "Confirm Bank Routing Number",
              "enabled" : "{\n  (function (parent, context, tables, rates) {\n    return !pmrl.isDefined(parent.parent.parent.paymentToken);\n  });\n}",
              "maxLength" : "9",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.proposedInsuredInsuredThePayor), 'YES');\n  });\n}",
              "name" : "payors[0].additionalFields.achRoutingNumberConfirm"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Bank Account Number",
              "subLabel" : "Do NOT use debit/credit card numbers",
              "enabled" : "{\n  (function (parent, context, tables, rates) {\n    return !pmrl.isDefined(parent.parent.paymentToken);\n  });\n}",
              "maxLength" : "20",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.additionalFields.proposedInsuredInsuredThePayor), 'YES');\n  });\n}",
              "name" : "payors[0].achAccountNumber"
            }, {
              "type" : "TEXT",
              "label" : "Confirm Bank Account Number",
              "enabled" : "{\n  (function (parent, context, tables, rates) {\n    return !pmrl.isDefined(parent.parent.parent.paymentToken);\n  });\n}",
              "maxLength" : "20",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.proposedInsuredInsuredThePayor), 'YES');\n  });\n}",
              "name" : "payors[0].additionalFields.achAccountNumberConfirm"
            } ]
          } ],
          "title" : "Payment"
        }, {
          "rows" : [ {
            "indent" : "0",
            "fields" : [ {
              "type" : "HEADING",
              "label" : "Producer Statement",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.personal_information_label"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "Contact Information",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.producerContactInfoSubheader"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Division Office/BGA/Marketer",
              "enabled" : "true",
              "maxLength" : "37",
              "visible" : "true",
              "name" : "additionalFields.policyHierarchyName"
            }, {
              "type" : "TEXT",
              "label" : "Office Phone Number:",
              "enabled" : "true",
              "maxLength" : "29",
              "visible" : "true",
              "name" : "sellingProducers[0].additionalFields.officePhoneNumber"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Contact (if different than above, who should we contact on this case)",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.differentProducerContact"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Name:",
              "enabled" : "true",
              "maxLength" : "26",
              "visible" : "true",
              "name" : "sellingProducers[0].additionalFields.contactName"
            }, {
              "type" : "TEXT",
              "label" : "Phone:",
              "enabled" : "true",
              "maxLength" : "14",
              "visible" : "true",
              "name" : "sellingProducers[0].additionalFields.contactPhone"
            }, {
              "type" : "TEXT",
              "label" : "Email:",
              "enabled" : "true",
              "maxLength" : "30",
              "visible" : "true",
              "name" : "sellingProducers[0].additionalFields.contactEmail"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "Commission Information",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.commissionInformation"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "label" : "",
              "enabled" : "true",
              "visible" : "true",
              "name" : "sellingProducers",
              "group" : {
                "title" : "Selling Producer(s)",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "TEXT",
                    "label" : "First Name",
                    "enabled" : "true",
                    "maxLength" : "40",
                    "visible" : "true",
                    "name" : "sellingProducers[$].firstName"
                  }, {
                    "type" : "TEXT",
                    "label" : "Middle Initial",
                    "enabled" : "true",
                    "maxLength" : "1",
                    "visible" : "true",
                    "name" : "sellingProducers[$].middleName"
                  }, {
                    "type" : "TEXT",
                    "label" : "Last Name",
                    "enabled" : "true",
                    "maxLength" : "40",
                    "visible" : "true",
                    "name" : "sellingProducers[$].lastName"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "NUMBER",
                    "label" : "Production Number",
                    "enabled" : "true",
                    "maxLength" : "19",
                    "visible" : "true",
                    "name" : "sellingProducers[$].producerNumber"
                  }, {
                    "type" : "NUMBER",
                    "label" : "Commission % Share",
                    "enabled" : "true",
                    "maxLength" : "3",
                    "visible" : "true",
                    "name" : "sellingProducers[$].commissionPercentShare"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "Additional Information",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.producerAdditionalInformation"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Do you have any reason to believe the policy applied for has replaced or will replace any existing disability insurance coverage?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "additionalFields.reasonToBelieveReplacing"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "If applying with business partner, enter name:",
              "enabled" : "true",
              "maxLength" : "65",
              "visible" : "true",
              "name" : "additionalFields.applyingWithPartnerFullName"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Comments or Special Instructions:",
              "enabled" : "true",
              "maxLength" : "90",
              "visible" : "true",
              "name" : "sellingProducers[0].additionalFields.commentsInstructions"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "I/We certify that during an interview with the Proposed Insured(s), I/we asked each question exactly as written and recorded the answers provided by the Proposed Insured(s) completely and accurately.",
              "enabled" : "true",
              "visible" : "true",
              "name" : "additionalFields.askedEachQuestion"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Please explain:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.askedEachQuestion), 'NO');\n  });\n}",
              "name" : "additionalFields.explainIfNotAskedEachQuestion"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "I conducted said interview in person.",
              "enabled" : "true",
              "visible" : "true",
              "name" : "additionalFields.conductedInterviewInPerson"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "Please explain:",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.conductedInterviewInPerson), 'NO');\n  });\n}",
              "name" : "additionalFields.explainIfNotInterviewInPerson"
            } ]
          } ],
          "title" : "Producer Screen"
        } ]
      },
      "quote" : {
        "sections" : [ {
          "rows" : [ {
            "indent" : "0",
            "fields" : [ {
              "type" : "HEADING",
              "label" : "Personal Information",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.personalInformationHeader"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "TEXT",
              "label" : "First Name",
              "enabled" : "true",
              "maxLength" : "20",
              "visible" : "true",
              "name" : "insureds[0].firstName"
            }, {
              "type" : "TEXT",
              "label" : "Last Name",
              "enabled" : "true",
              "maxLength" : "30",
              "visible" : "true",
              "name" : "insureds[0].lastName"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Gender at Birth",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].gender"
            }, {
              "type" : "RADIO",
              "label" : "Does the client use tobacco?",
              "description" : "Answer yes if the client has used any form of tobacco or any form of nicotine replacement/cessation product (such as nicotine gum, patch, spray, ecigarette, vapor, etc.) in the last 12 months. Add any additional information to the producer form comment section.",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].tobaccoUse"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "DATE",
              "label" : "Date of Birth",
              "subLabel" : "MM-DD-YYYY",
              "enabled" : "true",
              "maxLength" : "10",
              "visible" : "true",
              "name" : "insureds[0].birthDate"
            }, {
              "type" : "SELECT",
              "label" : "What is your state of residence?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].residentialAddress.state"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SELECT",
              "label" : "Verify Special Restriction Employee Status",
              "enabled" : "true",
              "visible" : "true",
              "name" : "additionalFields.specialRestrictionEmployee"
            }, {
              "type" : "SELECT",
              "label" : "Risk Class Quoted",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].riskClass"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "SELECT",
              "label" : "Occupation",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].additionalFields.occupationDescription"
            }, {
              "type" : "SELECT",
              "label" : "Specialty",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].additionalFields.occupationSpecialty"
            }, {
              "type" : "SELECT",
              "label" : "Occupational Class Quoted",
              "enabled" : "false",
              "visible" : "true",
              "name" : "insureds[0].occupationClass"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "NUMBER",
              "label" : "What is your total earned income for the previous year? If self-employed, taxable (net) income.",
              "enabled" : "true",
              "maxLength" : "15",
              "visible" : "true",
              "name" : "insureds[0].annualEarnedIncome"
            }, {
              "type" : "RADIO",
              "label" : "Is the client self employed?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].additionalFields.selfEmployed"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "RADIO",
              "label" : "Will the insured be the payor?",
              "enabled" : "true",
              "visible" : "true",
              "name" : "payors[0].additionalFields.proposedInsuredInsuredThePayor"
            }, {
              "type" : "RADIO",
              "label" : "Does the client have existing disability coverage?",
              "description" : "Other Coverage includes disability coverages that pay a benefit upon your inability to work.",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].additionalFields.otherCoverageQuestion"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "HEADING",
              "label" : "Other Coverage Information",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].additionalFields.otherCoverageQuestion), 'YES') || pmrl.greaterThan(pmrl.length(parent.insureds[Big('0')].otherCoverages), Big('0'));\n  });\n}",
              "name" : "ui.asOtherCoverageHeader"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.additionalFields.otherCoverageQuestion), 'YES') || pmrl.greaterThan(pmrl.length(parent.otherCoverages), Big('0'));\n  });\n}",
              "name" : "insureds[0].otherCoverages",
              "group" : {
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "SELECT",
                    "label" : "Policy Type:",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.parent.insureds[Big('0')].additionalFields.otherCoverageQuestion), 'YES') || pmrl.greaterThan(pmrl.length(parent.parent.otherCoverages), Big('0'));\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].coverageType"
                  }, {
                    "type" : "PARAGRAPH",
                    "label" : "",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].additionalFields.otherCoverageQuestion), 'YES');\n  });\n}",
                    "name" : "ui.coverageTypeSpaceHolder"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Monthly Benefit Type:",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.otherCoverageQuestion), 'YES') || pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0'));\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].additionalFields.otherCoverageMonthlyBenefitType"
                  }, {
                    "type" : "PARAGRAPH",
                    "label" : "",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].additionalFields.otherCoverageQuestion), 'YES');\n  });\n}",
                    "name" : "ui.monthlyBenefitTypeSpaceHolder"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "NUMBER",
                    "label" : "Specified Amount:",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.otherCoverageQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.otherCoverageMonthlyBenefitType), 'SPECIFIED_AMOUNT') || pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) && pmrl.equal(pmrl.toUpperCase(parent.otherCoverageMonthlyBenefitType), 'SPECIFIED_AMOUNT');\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].additionalFields.otherCoverageSpecifiedAmount"
                  }, {
                    "type" : "PARAGRAPH",
                    "label" : "",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.insureds[Big('0')].additionalFields.otherCoverageQuestion), 'YES');\n  });\n}",
                    "name" : "ui.specifiedAmountSpaceHolder"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "NUMBER",
                    "label" : "Percent of Income:",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.otherCoverageQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.otherCoverageMonthlyBenefitType), 'PERCENT_OF_INCOME') || pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) && pmrl.equal(pmrl.toUpperCase(parent.otherCoverageMonthlyBenefitType), 'PERCENT_OF_INCOME');\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].additionalFields.otherCoveragePercentOfIncome"
                  }, {
                    "type" : "NUMBER",
                    "label" : "Monthly Cap",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(pmrl.toUpperCase(parent.parent.parent.additionalFields.otherCoverageQuestion), 'YES') && pmrl.equal(pmrl.toUpperCase(parent.otherCoverageMonthlyBenefitType), 'PERCENT_OF_INCOME') || pmrl.greaterThan(pmrl.length(parent.parent.parent.otherCoverages), Big('0')) && pmrl.equal(pmrl.toUpperCase(parent.otherCoverageMonthlyBenefitType), 'PERCENT_OF_INCOME');\n  });\n}",
                    "name" : "insureds[0].otherCoverages[$].additionalFields.otherCoveragePercentMonthlyCap"
                  } ]
                } ]
              },
              "maxItemCount" : "5"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "HEADING",
              "label" : "Plan Information",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.aoPolicyHeader"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "FIELD_GROUP",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.planInfoGroup",
              "group" : {
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "SELECT",
                    "label" : "Benefit Period",
                    "description" : "The maximum length of time disability benefits are payable.  The benefit period begins on the first day benefits become payable after expiration of the elimination period.",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "benefitPeriod"
                  }, {
                    "type" : "SELECT",
                    "label" : "Elimination Period",
                    "description" : "The number of calendar days of disability that must pass before benefits become payable.  The days within this period do not need to be consecutive but need to be completed within the accumulation period.",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "eliminationPeriod"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Select policy renewability:",
                    "description" : "Guaranteed Renewable - This policy guarantees the right to continue the coverage until age 67. During that time, we cannot cancel the policy as long as the required premiums are paid when due. After age 67, and each policy anniversary thereafter, you may continue coverage as provided under conditional renewability to age 75. OR Non-Cancellable - This policy guarantees the right to continue the coverage until age 67.  During this time, we cannot cancel your policy or change your premiums as long as required premiums are paid when due. After age 67, each year you may continue your coverage under conditional renewability to age 75.",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "policyRenewability"
                  }, {
                    "type" : "RADIO",
                    "label" : "Select a payment mode:",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "paymentSchedule"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "HEADING",
              "label" : "Benefit Amount Information",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.benefitAmountHeader"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "enabled" : "true",
              "visible" : "true",
              "name" : "insureds[0].coverages.base",
              "group" : {
                "title" : "",
                "rows" : [ {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Select monthly benefit type:",
                    "description" : "Selecting a 'Specified Monthly Base Benefit' will allow the user to enter a specific monetary amount. Selecting 'Maximum Base Benefit' will automatically generate the maximum amount allowed based on entered criteria.",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "insureds[0].coverages.base[$].additionalFields.benefitAmountType"
                  }, {
                    "type" : "NUMBER",
                    "label" : "Total Monthly Benefit:",
                    "subLabel" : "This is the total benefit, including the base and the SIS benefits, if applicable.",
                    "description" : "If an injury prevents your client from performing the material and substantial duties of their regular occupation, and they are not gainfully employed in another occupation, we will pay a monthly benefit once the elimination period has been met. After the first 24 months following the elimination period, if the maximum benefit period has not been met, we will continue to pay a monthly benefit as long as they are unable to perform the material and substantial duties of any occupation for which they are reasonably suited because of education, training or experience.",
                    "enabled" : "false",
                    "visible" : "true",
                    "name" : "additionalFields.totalMonthlyBenefitAmount"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "NUMBER",
                    "label" : "Monthly Base Benefit",
                    "enabled" : "true",
                    "maxLength" : "5",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.equal(parent.benefitAmountType, 'SPECIFY') && pmrl.isDefined(parent.parent.parent.parent.parent.benefitPeriod) && pmrl.isDefined(parent.parent.parent.parent.annualEarnedIncome) && pmrl.isDefined(parent.parent.parent.parent.occupationClass) && pmrl.isDefined(parent.parent.parent.parent.additionalFields.selfEmployed)) {\n      value = true;\n    }\n    return value;\n  });\n}",
                    "name" : "insureds[0].coverages.base[$].additionalFields.specifiedBenefitAmount"
                  }, {
                    "type" : "PARAGRAPH",
                    "label" : "",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "ui.specifiedEntrySpaceHolder"
                  } ]
                }, {
                  "indent" : "0",
                  "fields" : [ {
                    "type" : "NUMBER",
                    "label" : "Monthly Base Benefit",
                    "enabled" : "false",
                    "maxLength" : "5",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    var value = false;\n    if (pmrl.equal(parent.benefitAmountType, 'MAXIMUM') && pmrl.isDefined(parent.parent.parent.parent.parent.benefitPeriod) && pmrl.isDefined(parent.parent.parent.parent.annualEarnedIncome) && pmrl.isDefined(parent.parent.parent.parent.parent.additionalFields.specialRestrictionEmployee) && pmrl.isDefined(parent.parent.parent.parent.occupationClass) && pmrl.isDefined(parent.parent.parent.parent.additionalFields.selfEmployed)) {\n      value = true;\n    }\n    return value;\n  });\n}",
                    "name" : "insureds[0].coverages.base[$].additionalFields.baseMaximumBenefitAmount"
                  }, {
                    "type" : "PARAGRAPH",
                    "label" : "",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "ui.monthlyEntrySpaceHolder"
                  } ]
                } ]
              },
              "maxItemCount" : "1"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "HEADING",
              "label" : "Optional benefits:",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.riderHeader"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "Select one or both no cost options:",
              "enabled" : "true",
              "maxLength" : "40",
              "visible" : "true",
              "name" : "ui.increaseOptionsHeader"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "label" : "Automatic Increase Benefit (AIB)",
              "subLabel" : "Automatically increases your monthly benefit by 4% each year.",
              "enabled" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    {\n      if (pmrl.greaterThan(pmrl.length(parent.autoIncreaseBenefitRider), Big('0')) || pmrl.isDefined(parent.parent.additionalFields.issueAge)) {\n        valid = true;\n      }\n    }\n    return valid;\n  });\n}",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var minAge = Big('18');\n    var maxAge = Big('55');\n    var valid = false;\n    if (pmrl.isDefined(parent.parent.additionalFields.issueAge)) {\n      if (pmrl.greaterThan(pmrl.length(parent.autoIncreaseBenefitRider), Big('0')) || pmrl.greaterThanEqual(parent.parent.additionalFields.issueAge, minAge) && pmrl.lessThanEqual(parent.parent.additionalFields.issueAge, maxAge)) {\n        valid = true;\n      }\n    } else {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "name" : "insureds[0].coverages.autoIncreaseBenefitRider",
              "group" : {
                "title" : "The Automatic Increase Benefit has been added to your policy.",
                "rows" : [ {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "PARAGRAPH",
                    "label" : "",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "ui.aibBenefitSpaceholder"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "Automatic Increase Benefit (AIB)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var minAge = Big('18');\n    var maxAge = Big('55');\n    var valid = false;\n    if (pmrl.lessThan(pmrl.length(parent.insureds[Big('0')].coverages.autoIncreaseBenefitRider), Big('1')) && pmrl.isDefined(parent.insureds[Big('0')].additionalFields.issueAge) && (pmrl.lessThan(parent.insureds[Big('0')].additionalFields.issueAge, minAge) || pmrl.greaterThan(parent.insureds[Big('0')].additionalFields.issueAge, maxAge))) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "name" : "ui.notEligibleAIBRiderSubheading"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "AIB Coverage is only available to ages 18 thru 55.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var minAge = Big('18');\n    var maxAge = Big('55');\n    var valid = false;\n    if (pmrl.lessThan(pmrl.length(parent.insureds[Big('0')].coverages.autoIncreaseBenefitRider), Big('1')) && pmrl.isDefined(parent.insureds[Big('0')].additionalFields.issueAge) && (pmrl.lessThan(parent.insureds[Big('0')].additionalFields.issueAge, minAge) || pmrl.greaterThan(parent.insureds[Big('0')].additionalFields.issueAge, maxAge))) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "name" : "ui.notEligibleAIBRiderParagraph"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "label" : "Future Insurability Option (FIO)",
              "subLabel" : "Increases your monthly benefit every three years after you buy the policy.",
              "enabled" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if (pmrl.greaterThan(pmrl.length(parent.futureInsurabilityOptionRider), Big('0')) || pmrl.isDefined(parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.additionalFields.specialRestrictionEmployee)) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var minAge = Big('18');\n    var maxAge = Big('51');\n    var valid = true;\n    if (pmrl.equal(pmrl.length(parent.futureInsurabilityOptionRider), Big('0')) && (pmrl.isDefined(parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.parent.additionalFields.specialRestrictionEmployee) && (pmrl.lessThan(parent.parent.additionalFields.issueAge, minAge) || pmrl.greaterThan(parent.parent.additionalFields.issueAge, maxAge) || pmrl.equal(parent.parent.parent.additionalFields.specialRestrictionEmployee, 'GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL')))) {\n      valid = false;\n    }\n    return valid;\n  });\n}",
              "name" : "insureds[0].coverages.futureInsurabilityOptionRider",
              "group" : {
                "title" : "The Future Insurability Option has been added to your policy.",
                "rows" : [ {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "PARAGRAPH",
                    "label" : "",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "ui.fioBenefitSpaceholder"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "Future Insurability Option (FIO)",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var minAge = Big('18');\n    var maxAge = Big('51');\n    var valid = false;\n    if (pmrl.equal(pmrl.length(parent.insureds[Big('0')].coverages.futureInsurabilityOptionRider), Big('0')) && (pmrl.isDefined(parent.insureds[Big('0')].additionalFields.issueAge) && pmrl.isDefined(parent.additionalFields.specialRestrictionEmployee)) && (pmrl.lessThan(parent.insureds[Big('0')].additionalFields.issueAge, minAge) || pmrl.greaterThan(parent.insureds[Big('0')].additionalFields.issueAge, maxAge) || pmrl.equal(parent.additionalFields.specialRestrictionEmployee, 'GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL'))) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "name" : "ui.notEligibleFIORiderSubheading"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Coverage is available to ages 18 thru 51.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var minAge = Big('18');\n    var maxAge = Big('51');\n    var valid = false;\n    if (pmrl.equal(pmrl.length(parent.insureds[Big('0')].coverages.futureInsurabilityOptionRider), Big('0')) && pmrl.isDefined(parent.insureds[Big('0')].additionalFields.issueAge) && (pmrl.lessThan(parent.insureds[Big('0')].additionalFields.issueAge, minAge) || pmrl.greaterThan(parent.insureds[Big('0')].additionalFields.issueAge, maxAge))) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "name" : "ui.notEligibleAIBRiderParagraphAge"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "FIO Benefit is not available to Government Employees.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if (pmrl.equal(pmrl.length(parent.insureds[Big('0')].coverages.futureInsurabilityOptionRider), Big('0')) && pmrl.isDefined(parent.additionalFields.specialRestrictionEmployee) && pmrl.equal(parent.additionalFields.specialRestrictionEmployee, 'GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL')) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "name" : "ui.notEligibleAIBRiderParagraphSpecialRestriction"
            } ]
          }, {
            "indent" : "1",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "Optional SIS Benefit:",
              "enabled" : "true",
              "maxLength" : "40",
              "visible" : "true",
              "name" : "ui.increaseOptionsHeader"
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "REPEATABLE_GROUP",
              "label" : "Social Insurance Supplement (SIS) Benefit",
              "subLabel" : "Lowers the premium since the benefit you receive is the amount of monthly income you purchase, less any benefits provided by social security.",
              "enabled" : "{\n  (function (parent, context, tables, rates) {\n    var valid = true;\n    if (pmrl.equal(pmrl.length(parent.parent.otherCoverages), Big('0'))) {\n      if (pmrl.equal(pmrl.length(parent.sis), Big('0')) && (!pmrl.isDefined(parent.parent.additionalFields.issueAge) || !pmrl.isDefined(parent.parent.parent.additionalFields.specialRestrictionEmployee) || !pmrl.isDefined(parent.parent.parent.benefitPeriod) || !pmrl.isDefined(parent.parent.additionalFields.otherCoverageQuestion))) {\n        valid = false;\n      }\n    } else {\n      for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.parent.otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n        if (pmrl.equal(pmrl.length(parent.sis), Big('0')) && (!pmrl.isDefined(parent.parent.additionalFields.issueAge) || !pmrl.isDefined(parent.parent.parent.additionalFields.specialRestrictionEmployee) || !pmrl.isDefined(parent.parent.parent.benefitPeriod) || !pmrl.isDefined(parent.parent.additionalFields.otherCoverageQuestion) || pmrl.greaterThan(pmrl.length(parent.parent.otherCoverages), Big('0')) && !pmrl.isDefined(parent.parent.otherCoverages[i].coverageType))) {\n          valid = false;\n          break;\n        }\n      }\n    }\n    return valid;\n  });\n}",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var minAge = Big('18');\n    var maxAge = Big('61');\n    var valid = true;\n    if (pmrl.equal(pmrl.length(parent.sis), Big('0')) && (pmrl.isDefined(parent.parent.parent.benefitPeriod) && pmrl.isDefined(parent.parent.additionalFields.issueAge) && pmrl.isDefined(parent.parent.additionalFields.otherCoverageQuestion) && pmrl.isDefined(parent.parent.parent.additionalFields.specialRestrictionEmployee))) {\n      if (pmrl.lessThan(parent.parent.additionalFields.issueAge, minAge) || pmrl.greaterThan(parent.parent.additionalFields.issueAge, maxAge) || pmrl.equal(parent.parent.parent.additionalFields.specialRestrictionEmployee, 'GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL') || pmrl.equal(parent.parent.parent.benefitPeriod, 'BENEFIT_PERIOD_6MO') || pmrl.equal(parent.parent.parent.benefitPeriod, 'BENEFIT_PERIOD_1YR')) {\n        valid = false;\n      } else if (pmrl.isDefined(parent.parent.otherCoverages)) {\n        for (var i = Big('0'); pmrl.lessThan(i, pmrl.length(parent.parent.otherCoverages)); i = pmrl.plus(i, Big('1'))) {\n          if (pmrl.equal(parent.parent.otherCoverages[i].coverageType, 'GROUP')) {\n            valid = false;\n          }\n        }\n      }\n    }\n    return valid;\n  });\n}",
              "name" : "insureds[0].coverages.sis",
              "group" : {
                "title" : "The Social Insurance Supplement Benefit has been added to your policy.",
                "rows" : [ {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "RADIO",
                    "label" : "Select SIS Benefit Amount Type:",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "insureds[0].coverages.sis[$].additionalFields.sisBenefitAmountType"
                  }, {
                    "type" : "PARAGRAPH",
                    "label" : "",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "ui.sisBenefitSpaceholder"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "NUMBER",
                    "label" : "Monthly SIS Base Benefit:",
                    "enabled" : "true",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.sisBenefitAmountType, 'SPECIFY');\n  });\n}",
                    "name" : "insureds[0].coverages.sis[$].additionalFields.sisSpecifiedBenefitAmount"
                  }, {
                    "type" : "PARAGRAPH",
                    "label" : "",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "ui.sisBenefitSpaceholder"
                  } ]
                }, {
                  "indent" : "1",
                  "fields" : [ {
                    "type" : "NUMBER",
                    "label" : "Monthly SIS Base Benefit:",
                    "enabled" : "false",
                    "visible" : "{\n  (function (parent, context, tables, rates) {\n    return pmrl.equal(parent.sisBenefitAmountType, 'MAXIMUM');\n  });\n}",
                    "name" : "insureds[0].coverages.sis[$].additionalFields.sisMaximumBenefitAmount"
                  }, {
                    "type" : "PARAGRAPH",
                    "label" : "",
                    "enabled" : "true",
                    "visible" : "true",
                    "name" : "ui.sisBenefitSpaceholder"
                  } ]
                } ]
              }
            } ]
          }, {
            "indent" : "2",
            "fields" : [ {
              "type" : "SUBHEADING",
              "label" : "Social Insurance Supplement (SIS) Benefit",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var minAge = Big('18');\n    var maxAge = Big('61');\n    var valid = false;\n    if (pmrl.equal(pmrl.length(parent.insureds[Big('0')].coverages.sis), Big('0')) && (pmrl.isDefined(parent.benefitPeriod) && pmrl.isDefined(parent.insureds[Big('0')].additionalFields.issueAge) && pmrl.isDefined(parent.additionalFields.specialRestrictionEmployee)) && (pmrl.lessThan(parent.insureds[Big('0')].additionalFields.issueAge, minAge) || pmrl.greaterThan(parent.insureds[Big('0')].additionalFields.issueAge, maxAge) || pmrl.equal(parent.additionalFields.specialRestrictionEmployee, 'GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL') || pmrl.equal(parent.benefitPeriod, 'BENEFIT_PERIOD_6MO') || pmrl.equal(parent.benefitPeriod, 'BENEFIT_PERIOD_1YR'))) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "name" : "ui.notEligibleSISRiderSubheading"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "Coverage is available to ages 18 thru 61.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var minAge = Big('18');\n    var maxAge = Big('61');\n    var valid = false;\n    if (pmrl.equal(pmrl.length(parent.insureds[Big('0')].coverages.sis), Big('0')) && pmrl.isDefined(parent.insureds[Big('0')].additionalFields.issueAge) && (pmrl.lessThan(parent.insureds[Big('0')].additionalFields.issueAge, minAge) || pmrl.greaterThan(parent.insureds[Big('0')].additionalFields.issueAge, maxAge))) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "name" : "ui.notEligibleSISRiderParagraphAge"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "SIS is not available to Government Employees.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if (pmrl.equal(pmrl.length(parent.insureds[Big('0')].coverages.sis), Big('0')) && pmrl.isDefined(parent.additionalFields.specialRestrictionEmployee) && pmrl.equal(parent.additionalFields.specialRestrictionEmployee, 'GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL')) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "name" : "ui.notEligibleSISRiderParagraphASpecialRestrictions"
            } ]
          }, {
            "indent" : "3",
            "fields" : [ {
              "type" : "PARAGRAPH",
              "label" : "SIS is not available to Benefit Periods of 6 Months and 1 Year.",
              "enabled" : "true",
              "visible" : "{\n  (function (parent, context, tables, rates) {\n    var valid = false;\n    if (pmrl.equal(pmrl.length(parent.insureds[Big('0')].coverages.sis), Big('0')) && pmrl.isDefined(parent.benefitPeriod) && (pmrl.equal(parent.benefitPeriod, 'BENEFIT_PERIOD_6MO') || pmrl.equal(parent.benefitPeriod, 'BENEFIT_PERIOD_1YR'))) {\n      valid = true;\n    }\n    return valid;\n  });\n}",
              "name" : "ui.notEligibleSISRiderParagraphBenefitPeriod"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "HEADING",
              "label" : "Producer, please verify the following discounts for quoting purposes:",
              "enabled" : "true",
              "visible" : "true",
              "name" : "ui.discountsAndProgramHeader"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Association Group (marketing verification form M27646 required)",
              "description" : "A 15 percent premium savings is available if the insured or eligible spouse is a member of an approved association. The approved association’s program number must be included on the application.",
              "enabled" : "true",
              "visible" : "true",
              "name" : "discountAssociationGroup"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Common Employer",
              "description" : "A 15 percent premium savings is available to groups of three or more individuals working 30+ hours per week with a common employer but does not require employer sponsorship. Applications can be submitted all at one time or within a 12-month period. The 15 percent premium savings is not applied until the third application has been issued. At, which time, the premium savings is applied to each of the first two policies starting on the next billing anniversary. All future applications received that are associated with the same common employer will have the same premium savings applied if appropriately indicated on the Producer/Agent form.",
              "enabled" : "true",
              "visible" : "true",
              "name" : "discountCommonEmployer"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Self-Employed (submit financials)",
              "description" : "A 15 percent premium saving is available to individuals who meet the following eligibility criteria: Minimum two years in business, Minimum net income of $32,000 (after expenses and before taxes) for each of the past two years, and Minimum 20 percent ownership required. If applicant meets the requirements above, net income may be increased 20 percent for a maximum benefit increase of up to $2,000 monthly. This premium savings can be used in combination with the other savings up to 30 percent.",
              "enabled" : "true",
              "visible" : "true",
              "name" : "discountSelfEmployed"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Multi-Policy",
              "description" : "A 10 percent premium savings is available at issue to clients who apply for an individual Disability Income policy within 90 days of the application date or prior to an eligible Long-Term Care or Life Insurance policy from Mutual/United of Omaha. Qualifying Mutual of Omaha Long-Term Care policies include: MutualCare Secure Solution, MutualCare Custom Solution and MutualCare Worksite. Qualifying United of Omaha Life policies include: Term Life or Universal Life",
              "enabled" : "true",
              "visible" : "true",
              "name" : "discountMultiPolicy"
            } ]
          }, {
            "indent" : "0",
            "fields" : [ {
              "type" : "CHECKBOX",
              "label" : "Two Person Household",
              "description" : "A 10 percent premium savings is available to individuals who meet the following eligibility criteria: Available when both DI policies are issued under the same policy form/benefit and Any partner that was previously issued under a different policy form/benefit is not eligible for the Two-Person Household discount. A Two-Person Household is defined as a) your spouse to whom you are legally married; b) your registered domestic partner or civil union partner; or c) an adult person who: 1. share a serious and committed personal relationship with you that is intended to be lifelong, 2. has shared a common permanent residence with you on a continuous basis for the most recent three years, 3. is not married, a domestic partner, a civil union partner, or in a committed personal relationship to anyone else; and 4. is not related to you in any way that would bar marriage in the state where you and he or she reside. This premium savings can be used in combination with the other savings up to 30 percent",
              "enabled" : "true",
              "visible" : "true",
              "name" : "discountHousehold"
            } ]
          } ],
          "title" : "Accident Only Quote"
        } ]
      }
    },
    "adminUIForm" : {
      "adminSystem" : "SOCOTRA",
      "sections" : [ {
        "title" : "Policy",
        "fields" : [ {
          "type" : "FIELD",
          "name" : "policyNumber",
          "label" : "Mutual Policy Number (Calculated)",
          "heading" : "Policy"
        }, {
          "type" : "FIELD",
          "name" : "productDefinitionInfo.productId",
          "label" : "Product ID (Calculated)"
        }, {
          "type" : "FIELD",
          "name" : "productDefinitionInfo.productDefinitionVersion",
          "label" : "Product Version (Calculated)"
        }, {
          "type" : "FIELD",
          "name" : "productInfo.lineOfBusiness",
          "label" : "Line Of Business (Calculated)",
          "heading" : "Product Info"
        }, {
          "type" : "FIELD",
          "name" : "productInfo.productGroup",
          "label" : "Product Group (Calculated)"
        }, {
          "type" : "FIELD",
          "name" : "productInfo.productType",
          "label" : "Product Type (Calculated)"
        }, {
          "type" : "FIELD",
          "name" : "productInfo.productName",
          "label" : "Product Name (Calculated)"
        }, {
          "type" : "FIELD",
          "name" : "paidToDate",
          "label" : "Policy Paid To Date (Calculated)",
          "heading" : "    "
        }, {
          "type" : "FIELD",
          "name" : "issueState",
          "label" : "Issue State"
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.totalMonthlyBenefitAmount",
          "label" : "Total Monthly Benefit (Calculated)"
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.specialRestrictionEmployee",
          "label" : "Special Restriction Employee"
        }, {
          "type" : "FIELD",
          "name" : "benefitPeriod",
          "label" : "Benefit Period"
        }, {
          "type" : "FIELD",
          "name" : "eliminationPeriod",
          "label" : "Elimination Period"
        }, {
          "type" : "FIELD",
          "name" : "policyDeliveryMethod",
          "label" : "Policy Delivery Method"
        }, {
          "type" : "FIELD",
          "name" : "policyDeliverTo",
          "label" : "Policy Deliver To"
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.naturalDisasterBenefit",
          "label" : "Natural Disaster Benefit"
        }, {
          "type" : "FIELD",
          "name" : "onWaiverOfPremium",
          "label" : "Waiver Of Premium"
        }, {
          "type" : "FIELD",
          "name" : "onMilitarySuspension",
          "label" : "Military Suspension"
        }, {
          "type" : "FIELD",
          "name" : "policyForm",
          "label" : "Policy Form"
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.statSeries",
          "label" : "Stat Series"
        }, {
          "type" : "FIELD",
          "name" : "issuingCompany",
          "label" : "Issuing Company (Calculated)"
        }, {
          "type" : "FIELD",
          "name" : "policyRenewability",
          "label" : "Policy Renewability"
        }, {
          "type" : "FIELD",
          "name" : "discountAssociationGroup",
          "label" : "Association Group",
          "heading" : "Discounts"
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.discountAssociationNumber",
          "label" : "Association Group Number"
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.discountAssociationName",
          "label" : "Association Group Name"
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.discountAssociationJoinDate",
          "label" : "Association Group Effective Date(Join Date)"
        }, {
          "type" : "FIELD",
          "name" : "discountCommonEmployer",
          "label" : "Common Employer",
          "heading" : " "
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.discountCommonGroupNumber",
          "label" : "Common Employer Group Number"
        }, {
          "type" : "FIELD",
          "name" : "discountMultiPolicy",
          "label" : "Multi Policy",
          "heading" : " "
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.discountMultiPolicyLifePolicyNumber",
          "label" : "Life Policy Number"
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.discountMultiPolicyLtcPolicyNumber",
          "label" : "Long Term Care Policy Number"
        }, {
          "type" : "FIELD",
          "name" : "discountHousehold",
          "label" : "Household",
          "heading" : " "
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.discountHouseholdFullName",
          "label" : "Household Insured Name"
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.discountHouseholdExistingPolicyNumber",
          "label" : "Household Insured Policy Number(s)"
        }, {
          "type" : "FIELD",
          "name" : "discountSelfEmployed",
          "label" : "Self Employed",
          "heading" : " "
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.programsStudentProgram",
          "label" : "Student",
          "heading" : " "
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.programsStudentProgramProgramOfStudy",
          "label" : "Program Of Study"
        }, {
          "type" : "FIELD",
          "name" : "paymentToken",
          "label" : "Payment Token",
          "heading" : "Premium Payment"
        }, {
          "type" : "FIELD",
          "name" : "paymentMethod",
          "label" : "Payment Method"
        }, {
          "type" : "FIELD",
          "name" : "paymentSchedule",
          "label" : "Payment Mode"
        }, {
          "type" : "FIELD",
          "name" : "paymentWithdrawalDay",
          "label" : "Payment Withdrawal Day"
        }, {
          "type" : "FIELD",
          "name" : "policyPremiumAmount",
          "label" : "Policy Premium (Calculated)"
        }, {
          "type" : "FIELD",
          "name" : "premiumNoticeDeliveryMethod",
          "label" : "Premium Notice Delivery Method"
        }, {
          "type" : "GROUP",
          "name" : "payors",
          "label" : "Payors",
          "fields" : [ {
            "type" : "FIELD",
            "name" : "payors.additionalFields.proposedInsuredInsuredThePayor",
            "label" : "Proposed Insured Same As Payor"
          }, {
            "type" : "FIELD",
            "name" : "payors.additionalFields.nameOnBankAccount",
            "label" : "Name On Bank Account"
          }, {
            "type" : "FIELD",
            "name" : "payors.billingAddress.addressLine1",
            "label" : "Billing Address Line 1"
          }, {
            "type" : "FIELD",
            "name" : "payors.billingAddress.addressLine2",
            "label" : "Billing Address Line 2"
          }, {
            "type" : "FIELD",
            "name" : "payors.billingAddress.city",
            "label" : "Billing Address City"
          }, {
            "type" : "FIELD",
            "name" : "payors.billingAddress.state",
            "label" : "Billing Address State"
          }, {
            "type" : "FIELD",
            "name" : "payors.billingAddress.zipCode",
            "label" : "Billing Address Zip Code"
          }, {
            "type" : "FIELD",
            "name" : "payors.partyId",
            "label" : "Party ID"
          } ]
        }, {
          "type" : "GROUP",
          "name" : "beneficiaries",
          "label" : "Beneficiaries",
          "fields" : [ {
            "type" : "FIELD",
            "name" : "beneficiaries.firstName",
            "label" : "First Name"
          }, {
            "type" : "FIELD",
            "name" : "beneficiaries.middleName",
            "label" : "Middle Name"
          }, {
            "type" : "FIELD",
            "name" : "beneficiaries.lastName",
            "label" : "Last Name"
          }, {
            "type" : "FIELD",
            "name" : "beneficiaries.relationshipToInsured",
            "label" : "Relationship To Insured"
          }, {
            "type" : "FIELD",
            "name" : "beneficiaries.relationshipToInsuredOther",
            "label" : "Relationship To Insured Other"
          }, {
            "type" : "FIELD",
            "name" : "beneficiaries.partyId",
            "label" : "Party ID"
          } ]
        }, {
          "type" : "FIELD",
          "name" : "distributionChannel",
          "label" : "Distribution Channel"
        }, {
          "type" : "GROUP",
          "name" : "sellingProducers",
          "label" : "Producers",
          "fields" : [ {
            "type" : "FIELD",
            "name" : "sellingProducers.firstName",
            "label" : "First Name"
          }, {
            "type" : "FIELD",
            "name" : "sellingProducers.middleName",
            "label" : "Middle Initial"
          }, {
            "type" : "FIELD",
            "name" : "sellingProducers.lastName",
            "label" : "Last Name"
          }, {
            "type" : "FIELD",
            "name" : "sellingProducers.producerNumber",
            "label" : "Producer Number"
          }, {
            "type" : "FIELD",
            "name" : "sellingProducers.producerHierarchyId",
            "label" : "Hierarchy/Division Office ID"
          }, {
            "type" : "FIELD",
            "name" : "sellingProducers.additionalFields.producerHierarchyName",
            "label" : "Hierarchy/Division Office Name"
          }, {
            "type" : "FIELD",
            "name" : "sellingProducers.commissionPercentShare",
            "label" : "Commission Percent"
          } ]
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.policyDecision.premiumAdjustment",
          "label" : "Premium Adjustment",
          "heading" : "Policy Decision"
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.policyDecision.premiumAdjustmentType",
          "label" : "Adjustment Type"
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.policyDecision.premiumAdjustmentPct",
          "label" : "Premium Adjustment Percent"
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.policyDecision.premiumAdjustmentText",
          "label" : "Premium Adjustment Text"
        }, {
          "type" : "GROUP",
          "name" : "additionalFields.policyDecision.amendmentsList",
          "label" : "Amendments List",
          "fields" : [ {
            "type" : "FIELD",
            "name" : "additionalFields.policyDecision.amendmentsList.amendmentsText",
            "label" : "Amendment Text"
          } ]
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.policyDecision.permanentExclusion",
          "label" : "Permanent Exclusion",
          "heading" : " "
        }, {
          "type" : "GROUP",
          "name" : "additionalFields.policyDecision.permanentExclusionDetail",
          "label" : "Permanent Exclusion Detail",
          "fields" : [ {
            "type" : "FIELD",
            "name" : "additionalFields.policyDecision.permanentExclusionDetail.code",
            "label" : "Code"
          }, {
            "type" : "FIELD",
            "name" : "additionalFields.policyDecision.permanentExclusionDetail.detail",
            "label" : "Detail"
          } ]
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.policyDecision.reviewableExclusion",
          "label" : "Reviewable Exclusion",
          "heading" : " "
        }, {
          "type" : "GROUP",
          "name" : "additionalFields.policyDecision.reviewableExclusionDetail",
          "label" : "Reviewable Exclusion Detail",
          "fields" : [ {
            "type" : "FIELD",
            "name" : "additionalFields.policyDecision.reviewableExclusionDetail.code",
            "label" : "Code"
          }, {
            "type" : "FIELD",
            "name" : "additionalFields.policyDecision.reviewableExclusionDetail.detail",
            "label" : "Detail"
          }, {
            "type" : "FIELD",
            "name" : "additionalFields.policyDecision.reviewableExclusionMonths",
            "label" : "Reviewable Exclusion Months"
          } ]
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.policyDecision.policyStatus",
          "label" : "Policy Status",
          "heading" : " "
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.policyDecision.withdrawnCode",
          "label" : "Withdrawn Code",
          "heading" : " "
        }, {
          "type" : "GROUP",
          "name" : "additionalFields.policyDecision.declineCode",
          "label" : "Reason for Decline (if applicable)",
          "fields" : [ {
            "type" : "FIELD",
            "name" : "additionalFields.policyDecision.declineCode.code",
            "label" : "Code"
          }, {
            "type" : "FIELD",
            "name" : "additionalFields.policyDecision.declineCode.detail",
            "label" : "Detail"
          } ]
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.policyDecision.policyDispositionText",
          "label" : "Policy Disposition Details",
          "heading" : " "
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.policyDecision.iccState",
          "label" : "ICC State",
          "heading" : " "
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.discountPercent",
          "label" : "Discount Percent",
          "heading" : "Calculated Fields"
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.discountAmount",
          "label" : "Discount Amount"
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.totalPremiumBeforeDiscount",
          "label" : "Total Premium Before Discount"
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.accumulationPeriod",
          "label" : "Accumulation Period (Calculated)"
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.policyDiscountPercent",
          "label" : "Policy Discount Percent"
        }, {
          "type" : "FIELD",
          "name" : "additionalFields.policyFactorPercent",
          "label" : "Policy Factor Percent"
        }, {
          "type" : "FIELD",
          "name" : "reinsurance",
          "label" : "Reinsurance"
        }, {
          "type" : "FIELD",
          "name" : "reinsuranceDeclined",
          "label" : "Reinsurer Declined to Insure?"
        } ]
      }, {
        "title" : "Insureds",
        "fields" : [ {
          "type" : "FIELD",
          "name" : "insureds.partyId",
          "label" : "Party ID"
        }, {
          "type" : "FIELD",
          "name" : "insureds.firstName",
          "label" : "First Name"
        }, {
          "type" : "FIELD",
          "name" : "insureds.middleName",
          "label" : "Middle Name"
        }, {
          "type" : "FIELD",
          "name" : "insureds.lastName",
          "label" : "Last Name"
        }, {
          "type" : "FIELD",
          "name" : "insureds.namePrefix",
          "label" : "Name Prefix"
        }, {
          "type" : "FIELD",
          "name" : "insureds.nameSuffix",
          "label" : "Name Suffix"
        }, {
          "type" : "FIELD",
          "name" : "insureds.birthDate",
          "label" : "Birth Date"
        }, {
          "type" : "FIELD",
          "name" : "insureds.additionalFields.age",
          "label" : "Age (Calculated)"
        }, {
          "type" : "FIELD",
          "name" : "insureds.additionalFields.issueAge",
          "label" : "Issue Age (Calculated)"
        }, {
          "type" : "FIELD",
          "name" : "insureds.birthCountry",
          "label" : "Birth Country"
        }, {
          "type" : "FIELD",
          "name" : "insureds.socialSecurityNumber",
          "label" : "Social Security Number"
        }, {
          "type" : "FIELD",
          "name" : "insureds.emailAddress",
          "label" : "Email Address"
        }, {
          "type" : "FIELD",
          "name" : "insureds.driversLicenseNumber",
          "label" : "Drivers License Number"
        }, {
          "type" : "FIELD",
          "name" : "insureds.driversLicenseIssueState",
          "label" : "Drivers License Issue State"
        }, {
          "type" : "FIELD",
          "name" : "insureds.homePhoneNumber",
          "label" : "Home Phone Number"
        }, {
          "type" : "FIELD",
          "name" : "insureds.cellPhoneNumber",
          "label" : "Cell Phone Number"
        }, {
          "type" : "FIELD",
          "name" : "insureds.gender",
          "label" : "Gender"
        }, {
          "type" : "FIELD",
          "name" : "insureds.ratedGender",
          "label" : "Gender at Birth"
        }, {
          "type" : "FIELD",
          "name" : "insureds.additionalFields.occupationDescription",
          "label" : "Occupation Description"
        }, {
          "type" : "FIELD",
          "name" : "insureds.additionalFields.occupationSpecialty",
          "label" : "Occupation Specialty"
        }, {
          "type" : "FIELD",
          "name" : "insureds.occupationClass",
          "label" : "Occupation Class"
        }, {
          "type" : "FIELD",
          "name" : "insureds.additionalFields.occupationCode",
          "label" : "Occupation Code"
        }, {
          "type" : "FIELD",
          "name" : "insureds.riskClass",
          "label" : "Risk Class"
        }, {
          "type" : "GROUP",
          "name" : "insureds.additionalFields.riskClassConditionDetails",
          "label" : "Risk Class Condition Details",
          "fields" : [ {
            "type" : "FIELD",
            "name" : "insureds.additionalFields.riskClassConditionDetails.code",
            "label" : "Code"
          }, {
            "type" : "FIELD",
            "name" : "insureds.additionalFields.riskClassConditionDetails.detail",
            "label" : "Detail"
          } ]
        }, {
          "type" : "FIELD",
          "name" : "insureds.tobaccoUse",
          "label" : "Tobacco Use"
        }, {
          "type" : "FIELD",
          "name" : "insureds.additionalFields.selfEmployed",
          "label" : "Self Employed"
        }, {
          "type" : "FIELD",
          "name" : "insureds.annualEarnedIncome",
          "label" : "Annual Earned Income"
        }, {
          "type" : "FIELD",
          "name" : "insureds.additionalFields.issueLimit",
          "label" : "Issue Limit"
        }, {
          "type" : "FIELD",
          "name" : "insureds.otherCoverages.internalReplacement",
          "label" : "Other Coverage Replacing Internal"
        }, {
          "type" : "FIELD",
          "name" : "insureds.otherCoverages.additionalFields.premiumAmount",
          "label" : "Other Coverage Premium Amount"
        }, {
          "type" : "FIELD",
          "name" : "insureds.residentialAddress.addressLine1",
          "label" : "Address Line 1",
          "heading" : "Residential Address"
        }, {
          "type" : "FIELD",
          "name" : "insureds.residentialAddress.addressLine2",
          "label" : "Address Line 2"
        }, {
          "type" : "FIELD",
          "name" : "insureds.residentialAddress.city",
          "label" : "City"
        }, {
          "type" : "FIELD",
          "name" : "insureds.residentialAddress.state",
          "label" : "State"
        }, {
          "type" : "FIELD",
          "name" : "insureds.residentialAddress.zipCode",
          "label" : "Zip Code"
        }, {
          "type" : "FIELD",
          "name" : "insureds.additionalFields.mailingAddressIndicator",
          "label" : "Select if Different",
          "heading" : "Mailing Address is Different Than Residential Address"
        }, {
          "type" : "FIELD",
          "name" : "insureds.mailingAddress.addressLine1",
          "label" : "Address Line 1",
          "heading" : "Mailing Address"
        }, {
          "type" : "FIELD",
          "name" : "insureds.mailingAddress.addressLine2",
          "label" : "Address Line 2"
        }, {
          "type" : "FIELD",
          "name" : "insureds.mailingAddress.city",
          "label" : "City"
        }, {
          "type" : "FIELD",
          "name" : "insureds.mailingAddress.state",
          "label" : "State"
        }, {
          "type" : "FIELD",
          "name" : "insureds.mailingAddress.zipCode",
          "label" : "Zip Code"
        } ]
      }, {
        "title" : "Coverages",
        "fields" : [ {
          "type" : "GROUP",
          "name" : "insureds.coverages.base",
          "label" : "Base",
          "fields" : [ {
            "type" : "FIELD",
            "name" : "insureds.coverages.base.benefitAmount",
            "label" : "Benefit Amount"
          }, {
            "type" : "FIELD",
            "name" : "insureds.coverages.base.premiumAmount",
            "label" : "Premium Amount"
          }, {
            "type" : "FIELD",
            "name" : "insureds.coverages.base.additionalFields.discountAmount",
            "label" : "Discount Amount"
          }, {
            "type" : "FIELD",
            "name" : "insureds.coverages.base.additionalFields.description",
            "label" : "Description"
          }, {
            "type" : "FIELD",
            "name" : "insureds.coverages.base.additionalFields.commentsInstructions",
            "label" : "Comments Instruction"
          }, {
            "type" : "FIELD",
            "name" : "insureds.coverages.base.additionalFields.premBeforeDiscount",
            "label" : "Premium Amount Before Discount"
          } ]
        }, {
          "type" : "GROUP",
          "name" : "insureds.coverages.sis",
          "label" : "Social Insurance Supplement (SIS)",
          "fields" : [ {
            "type" : "FIELD",
            "name" : "insureds.coverages.sis.benefitAmount",
            "label" : "Benefit Amount"
          }, {
            "type" : "FIELD",
            "name" : "insureds.coverages.sis.premiumAmount",
            "label" : "Premium Amount"
          }, {
            "type" : "FIELD",
            "name" : "insureds.coverages.sis.additionalFields.discountAmount",
            "label" : "Discount Amount"
          }, {
            "type" : "FIELD",
            "name" : "insureds.coverages.sis.additionalFields.description",
            "label" : "Description"
          }, {
            "type" : "FIELD",
            "name" : "insureds.coverages.sis.additionalFields.commentsInstructions",
            "label" : "Comments Instruction"
          }, {
            "type" : "FIELD",
            "name" : "insureds.coverages.sis.additionalFields.premBeforeDiscount",
            "label" : "Premium Amount Before Discount"
          } ]
        }, {
          "type" : "GROUP",
          "name" : "insureds.coverages.autoIncreaseBenefitRider",
          "label" : "Auto Increase Benefit Rider (AIB)",
          "fields" : [ {
            "type" : "FIELD",
            "name" : "insureds.coverages.autoIncreaseBenefitRider.additionalFields.description",
            "label" : "Description"
          }, {
            "type" : "FIELD",
            "name" : "insureds.coverages.autoIncreaseBenefitRider.additionalFields.commentsInstructions",
            "label" : "Comment Instruction"
          }, {
            "type" : "FIELD",
            "name" : "insureds.coverages.autoIncreaseBenefitRider.premiumAmount",
            "label" : "Premium Amount"
          } ]
        }, {
          "type" : "GROUP",
          "name" : "insureds.coverages.futureInsurabilityOptionRider",
          "label" : "Future Insurability Option (FIO)",
          "fields" : [ {
            "type" : "FIELD",
            "name" : "insureds.coverages.futureInsurabilityOptionRider.additionalFields.description",
            "label" : "Description"
          }, {
            "type" : "FIELD",
            "name" : "insureds.coverages.futureInsurabilityOptionRider.additionalFields.commentsInstructions",
            "label" : "Comment Instruction"
          }, {
            "type" : "FIELD",
            "name" : "insureds.coverages.futureInsurabilityOptionRider.premiumAmount",
            "label" : "Premium Amount"
          } ]
        } ]
      } ]
    },
    "calculatedFieldsOrder" : [ "insureds.coverages.futureInsurabilityOptionRider.premiumAmount", "insureds.underwritingFactors.healthFactors.mentalManicDepressiveOrBipolarDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.hivMTAdditionalFields.physicianAddressCalc", "insureds.underwritingFactors.healthFactors.hivUTAdditionalFields.physicianAddressCalc", "insureds.underwritingFactors.healthFactors.hivKYAdditionalFields.physicianAddressCalc", "owner.residentialAddress.state", "insureds.underwritingFactors.healthFactors.hivMAAdditionalFields.physicianCheckboxCalc", "beneficiaries.additionalFields.beneficiaryFullName", "insureds.underwritingFactors.healthFactors.brainFaintingDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.hivVAAdditionalFields.physicianNameCalc", "insureds.mailingAddress.state", "insureds.underwritingFactors.healthFactors.cancerAfterTreatmentGroup.cancerAfterEndedDiagnosingPhysicianInfo", "owner.homePhoneNumber", "insureds.underwritingFactors.healthFactors.hivAZAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.hivMTAdditionalFields.physicianNameCalc", "insureds.otherCoverages.additionalFields.coverageTypeCalculatedRule", "insureds.underwritingFactors.healthFactors.hivDCAdditionalFields.healthcareProviderNameCalc", "insureds.underwritingFactors.healthFactors.musculoskeletalDegenerativeDiscDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.hivPRAdditionalFields.physicianAddressCalc", "insureds.underwritingFactors.healthFactors.cancerSurgeryGroup.cancerSurgeryDiagnosingPhysicianInfo", "insureds.citizenship.additionalFields.visaCalculatedExpirationDate", "insureds.underwritingFactors.healthFactors.hivPAAdditionalFields.physicianAddressCalc", "insureds.underwritingFactors.healthFactors.cardiacChestPainDiagnosingPhysicianInfo", "owner.nameSuffix", "insureds.underwritingFactors.healthFactors.heightInFeetCalculated", "insureds.underwritingFactors.healthFactors.cancerRecurrenceGroup.cancerRecurrenceOfCancerDiagnosingPhysicianInfo", "productInfo.productGroup", "insureds.underwritingFactors.healthFactors.hivNDAdditionalFields.hivInsurerName", "insureds.underwritingFactors.healthFactors.cancerOtherDiagnosis2", "insureds.underwritingFactors.healthFactors.hivVTAdditionalFields.physicianAddressCalc", "additionalFields.programsStudentProgramProgramOfStudyCalc", "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeSurgeryGroup.cardiacTreatmentTypeSurgeryDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.diabetesGestationalDiabetesDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.cardiacValvularHeartDiseaseDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.cardiacIrregularHeartRhythmDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeOtherGroup.musculoskeletalTreatmentTypeOtherDiagnosingPhysicianInfo", "owner.gender", "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeHospitalizationOrOutPatientGroup.mentalTreatmentTypeHospitalizationOrOutPatientDiagnosingPhysicianInfo", "owner.cellPhoneNumber", "insureds.underwritingFactors.healthFactors.brainSeizuresDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.cardiacHighCholesterolDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.hivIAAdditionalFields.physicianAddressCalc", "owner.residentialAddress.city", "insureds.underwritingFactors.healthFactors.hivKYAdditionalFields.physicianNameCalc", "beneficiaries.additionalFields.beneficiaryRelationshipCalculated", "insureds.underwritingFactors.healthFactors.brainMigrainesDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.musculoskeletalChronicPainDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.hivCTAdditionalFields.hivInsurerAddressLine2", "insureds.underwritingFactors.healthFactors.hivCTAdditionalFields.hivInsurerAddressLine1", "insureds.underwritingFactors.healthFactors.hivINAdditionalFields.physicianNameCalc", "issueState", "insureds.underwritingFactors.healthFactors.hivWAAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.brainNeuropathyDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.cardiacHeartMurmurDiagnosingPhysicianInfo", "owner.residentialAddress.addressLine1", "insureds.underwritingFactors.healthFactors.generalCalculatedRecommendedToHaveTestOrSurgery", "insureds.underwritingFactors.healthFactors.musculoskeletalLupusDiagnosingPhysicianInfo", "owner.middleName", "insureds.underwritingFactors.healthFactors.hivCOAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.hivNCAdditionalFields.physicianAddressCalc", "insureds.underwritingFactors.healthFactors.mentalSuicidalThoughtsOrAttemptsGroup.mentalSuicidalThoughtsOrAttemptsDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.cardiacHeartAttackDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.hivFLAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.musculoskeletalBackPainDiagnosingPhysicianInfo", "insureds.mailingAddress.zipCode", "insureds.underwritingFactors.healthFactors.diabetesTestOrSurgeryGroup.diabetesTestOrSurgeryDiagnosingPhysicianInfo", "additionalFields.policyDiscountPercent", "insureds.underwritingFactors.healthFactors.cardiacRecommendedTestOrSurgeryGroup.cardiacRecommendedTestOrSurgeryDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.hivMOAdditionalFields.physicianAddressCalc", "insureds.underwritingFactors.healthFactors.hivHIAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.generalDiagnosisGroup.generalDiagnosingPhysicianInfo", "productInfo.productType", "insureds.underwritingFactors.healthFactors.diabetesHospitalizedForConditionGroup.diabetesHospitalizedDiagnosingPhysicianInfo", "insureds.otherCoverages.additionalFields.benefitAmountPercentageIncome", "insureds.underwritingFactors.healthFactors.brainHeadachesDiagnosingPhysicianInfo", "insureds.underwritingFactors.financialFactors.totalEarnedIncomeLastYr", "insureds.underwritingFactors.healthFactors.hivMIAdditionalFields.doNotConsentDateCalc", "insureds.underwritingFactors.healthFactors.hivORAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.hivCTAdditionalFields.healthCareProviderAddressCalc", "insureds.underwritingFactors.healthFactors.hivOHAdditionalFields.physicianNameCalc", "insureds.coverages.futureInsurabilityOptionRider.additionalFields.fioCalculatedCheckbox", "insureds.additionalFields.issueAge", "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeHospitalizationOrOutPatientGroup.cardiacTreatmentTypeHospitalizationOrOutPatientDiagnosingPhysicianInfo", "productDefinitionInfo.productDefinitionVersion", "insureds.underwritingFactors.healthFactors.hivTXAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.cancerDiagnosisOtherGroup.cancerOtherDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.hivDCAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.cancerTumorDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.hivIAAdditionalFields.physicianNameCalc", "insureds.additionalFields.age", "insureds.underwritingFactors.healthFactors.musculoskeletalFibromyalgiaDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.generalSurgeryTreatmentGroup2.generalSurgeryDiagnosingPhysicianInfo2", "insureds.underwritingFactors.healthFactors.mentalAnxietyOrAnxietyDisordersDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.hivPRAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.hivSDAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.brainOtherDiagnosis2", "productInfo.lineOfBusiness", "insureds.underwritingFactors.healthFactors.generalOtherTreatmentGroup2.generalOtherDiagnosingPhysicianInfo2", "insureds.additionalFields.insuredFullName", "insureds.mailingAddress.addressLine2", "insureds.underwritingFactors.healthFactors.hivNHAdditionalFields.physicianAddressCalc", "insureds.mailingAddress.addressLine1", "insureds.underwritingFactors.healthFactors.hivNJAdditionalFields.physicianAddressCalc", "insureds.underwritingFactors.healthFactors.hivSDAdditionalFields.physicianAddressCalc", "insureds.underwritingFactors.healthFactors.hivMIAdditionalFields.physicianAddressCalc", "insureds.underwritingFactors.healthFactors.hivORAdditionalFields.physicianCheckboxCalc", "insureds.underwritingFactors.healthFactors.mentalNervousnessOrStressDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.hivNCAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.cardiacOtherDiagnosis2", "insureds.ratedGender", "insureds.underwritingFactors.healthFactors.brainEpilepsyDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeSurgeryGroup.musculoskeletalTreatmentTypeSurgeryDiagnosingPhysicianInfo", "insureds.additionalFields.birthStateOrCountryField", "insureds.underwritingFactors.healthFactors.hivAZAdditionalFields.physicianAddressCalc", "insureds.underwritingFactors.healthFactors.brainDizzinessDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.hivPAAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.hivRIAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.diabetesElevatedGlucoseDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.mentalPersonalityDisorderDiagnosingPhysicianInfo", "insureds.occupationClass", "insureds.underwritingFactors.healthFactors.cardiacTreatmentTypeOtherGroup.cardiacTreatmentTypeOtherDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.diabetesOtherGroup.diabetesOtherDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup.generalRecommendedDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.hivFLAdditionalFields.physicianAddressCalc", "insureds.underwritingFactors.healthFactors.hivORAdditionalFields.physicianAddressCalc", "insureds.underwritingFactors.healthFactors.hivNMAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.cardiacDiagnosisOtherGroup.cardiacOtherDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.generalCalculatedTreatmentTypeMedication", "insureds.underwritingFactors.healthFactors.brainRecommendedTestOrSurgeryGroup.brainRecommendedTestOrSurgeryDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.hivMAAdditionalFields.myselfCheckboxCalc", "insureds.underwritingFactors.healthFactors.musculoskeletalArthritisDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.musculoskeletalTreatmentTypeHospitalizationOrOutPatientGroup.musculoskeletalTreatmentTypeHospitalizationOrOutPatientDiagnosingPhysicianInfo", "insureds.otherCoverages.additionalFields.payorTypeCalculationRule", "insureds.underwritingFactors.healthFactors.hivDCAdditionalFields.physicianAddressCalc", "payors.additionalFields.payorAddressCalculation", "insureds.underwritingFactors.healthFactors.mentalDepressionOrDepressiveDisordersDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.hivNMAdditionalFields.physicianAddressCalc", "insureds.underwritingFactors.healthFactors.generalCalculatedTreatmentTypeOther", "insureds.underwritingFactors.healthFactors.hivCOAdditionalFields.physicianAddressCalc", "insureds.underwritingFactors.financialFactors.totalEarnedIncome2YrAgo", "insureds.underwritingFactors.healthFactors.musculoskeletalChiropracticCareDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.hivKSAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.hivOHAdditionalFields.individualCheckboxCalc", "insureds.underwritingFactors.healthFactors.hivUTAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.hivTXAdditionalFields.physicianAddressCalc", "owner.birthDate", "insureds.underwritingFactors.healthFactors.hivNJAdditionalFields.physicianNameCalc", "owner.partyId", "insureds.underwritingFactors.healthFactors.mentalOtherDiagnosis2", "insureds.underwritingFactors.healthFactors.hivIAAdditionalFields.hivIASignDate", "insureds.underwritingFactors.healthFactors.hivWVAdditionalFields.physicianAddressCalc", "insureds.underwritingFactors.healthFactors.hivOHAdditionalFields.myselfCheckboxCalc", "insureds.underwritingFactors.healthFactors.musculoskeletalSpinalStenosisDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.hivVTAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.heightInInchesCalculated", "insureds.underwritingFactors.healthFactors.hivRIAdditionalFields.physicianAddressCalc", "payors.lastName", "insureds.underwritingFactors.healthFactors.hivDCAdditionalFields.hivInsurerName", "insureds.underwritingFactors.healthFactors.hivMAAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.generalSurgeryTreatmentGroup.generalSurgeryDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.cancerOtherTreatmentTypeGroup.cancerOtherDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.cardiacCoronaryArteryDiagnosingPhysicianInfo", "insureds.otherCoverages.additionalFields.scReplFormPolicyApplyingCalc", "insureds.additionalFields.occupationCode", "insureds.underwritingFactors.financialFactors.totalEarnedIncomeYtd", "insureds.coverages.autoIncreaseBenefitRider.premiumAmount", "insureds.underwritingFactors.healthFactors.hivMIAdditionalFields.doConsentDateCalc", "insureds.underwritingFactors.healthFactors.hivNEAdditionalFields.physicianAddressCalc", "insureds.underwritingFactors.healthFactors.diabetesOtherDiagnosis2", "insureds.underwritingFactors.healthFactors.hivMAAdditionalFields.physicianAddressCalc", "insureds.underwritingFactors.healthFactors.brainOtherDiagnosisGroup.brainOtherDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.hivOHAdditionalFields.physicianCheckboxCalc", "insureds.underwritingFactors.healthFactors.hivINAdditionalFields.physicianAddressCalc", "insureds.underwritingFactors.healthFactors.hivCTAdditionalFields.hivInsurerName", "insureds.underwritingFactors.healthFactors.hivDCAdditionalFields.hivInsurerAddress", "insureds.underwritingFactors.healthFactors.hivPAAdditionalFields.paDepartmentOfHealthCheckboxCalc", "insureds.underwritingFactors.healthFactors.generalCalculatedHospitalizedForCondition", "issuingCompany", "insureds.underwritingFactors.healthFactors.hivIAAdditionalFields.hivIASignYear", "insureds.underwritingFactors.healthFactors.cardiacHypertensionDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.mentalTreatmentTypeCounselingOrTherapyGroup.mentalTreatmentTypeCounselingOrTherapyDiagnosingPhysicianInfo", "owner.firstName", "insureds.underwritingFactors.healthFactors.cancerDiagnosisDiagnosingPhysicianInfo", "owner.socialSecurityNumber", "insureds.underwritingFactors.healthFactors.hivOHAdditionalFields.physicianAddressCalc", "insureds.citizenship.additionalFields.countryOfPermanentResidenceCalculated", "insureds.underwritingFactors.healthFactors.hivCTAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.hivDCAdditionalFields.healthcareAddressCalc", "insureds.underwritingFactors.healthFactors.cardiacMoreThanOneStrokeOrTIAGroup.cardiacMoreThanOneStrokeOrTIADiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.cardiacTransientIschemicAttackDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.musculoskeletalOtherDiagnosisGroup.musculoskeletalOtherDiagnosingPhysicianInfo", "additionalFields.policyFactorPercent", "insureds.underwritingFactors.healthFactors.diabetesDiagnosisDiagnosingPhysicianInfo", "owner.namePrefix", "sellingProducers.additionalFields.sellingProducersFullName", "owner.residentialAddress.zipCode", "insureds.mailingAddress.city", "insureds.underwritingFactors.healthFactors.hivHIAdditionalFields.physicianAddressCalc", "insureds.underwritingFactors.healthFactors.cardiacAneurysmDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.hivMOAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.hivNDAdditionalFields.hivInsurerAddressLine1", "additionalFields.policyDecision.withdrawnCode", "insureds.underwritingFactors.healthFactors.hivNDAdditionalFields.hivInsurerAddressLine2", "insureds.underwritingFactors.healthFactors.cancerCystDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.brainCarpalTunnelDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.musculoskeletalNeckPainDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.mentalPostTraumaticStressDisorderPTSDDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.brainMultipleSclerosisDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.hivORAdditionalFields.myselfCheckboxCalc", "insureds.underwritingFactors.healthFactors.hivORAdditionalFields.departmentCheckboxCalc", "insureds.underwritingFactors.healthFactors.hivPAAdditionalFields.localDepartmentCheckboxCalc", "additionalFields.programsStudentProgramCalc", "insureds.underwritingFactors.healthFactors.generalOtherTreatmentGroup.generalOtherDiagnosingPhysicianInfo", "insureds.additionalFields.estimatedGraduationDateCalculation", "insureds.underwritingFactors.healthFactors.cancerGrowthDiagnosingPhysicianInfo", "insureds.coverages.sis.additionalFields.sisCalculatedCheckbox", "insureds.underwritingFactors.healthFactors.hivVAAdditionalFields.physicianAddressCalc", "payors.firstName", "insureds.underwritingFactors.healthFactors.mentalObsessiveCompulsiveDisorderDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.hivNEAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.hivPAAdditionalFields.localVerifyDepartmentCheckboxCalc", "insureds.underwritingFactors.healthFactors.musculoskeletalRecommendedTestOrSurgeryGroup.musculoskeletalRecommendedTestOrSurgeryDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.generalCalculatedTreatmentTypeSurgery", "insureds.underwritingFactors.healthFactors.cancerHospitalizedForConditionGroup.cancerHospitalizedForConditionDiagnosingPhysicianInfo", "owner.lastName", "additionalFields.accumulationPeriod", "insureds.underwritingFactors.healthFactors.mentalAdjustmentDisorderDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.mentalAttentionDeficitDisorderADDDiagnosingPhysicianInfo", "insureds.coverages.autoIncreaseBenefitRider.additionalFields.aibCalculatedCheckbox", "payors.middleName", "insureds.underwritingFactors.healthFactors.generalCalculatedMissedWorkForThisCondition", "insureds.underwritingFactors.healthFactors.brainConcussionDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.generalHospitalizedGroup.generalHospitalizedForConditionDiagnosingPhysicianInfo", "productDefinitionInfo.productId", "insureds.underwritingFactors.healthFactors.hivIAAdditionalFields.hivIASignMonth", "insureds.underwritingFactors.healthFactors.musculoskeletalHerniatedDiscDiagnosingPhysicianInfo", "insureds.otherCoverages.additionalFields.coverageStatusCalculationRule", "insureds.underwritingFactors.healthFactors.hivKSAdditionalFields.physicianAddressCalc", "insureds.additionalFields.fullResidentialAddress", "policyForm", "insureds.underwritingFactors.healthFactors.hivWVAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.diabetesSugarInUrineDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.mentalSchizophreniaDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.brainMemoryLossDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.mentalDiagnosisOtherGroup.mentalOtherDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.generalDiagnosisGroup2.generalDiagnosingPhysicianInfo2", "insureds.underwritingFactors.healthFactors.hivMIAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.hivNHAdditionalFields.physicianNameCalc", "insureds.underwritingFactors.healthFactors.generalRecommendedToHaveTestOrSurgeryGroup2.generalRecommendedDiagnosingPhysicianInfo2", "insureds.underwritingFactors.healthFactors.generalHospitalizedGroup2.generalHospitalizedDiagnosingPhysicianInfo2", "productInfo.productName", "insureds.underwritingFactors.healthFactors.hivWAAdditionalFields.physicianAddressCalc", "payors.emailAddress", "insureds.underwritingFactors.healthFactors.cardiacStrokeDiagnosingPhysicianInfo", "insureds.underwritingFactors.healthFactors.brainTreatmentTypeHospitalizationOrOutPatientGroup.brainTreatmentTypeHospitalizationOrOutPatientDiagnosingPhysicianInfo", "owner.mailingAddress.state", "additionalFields.policyDecision.iccState", "owner.mailingAddress.zipCode", "additionalFields.discountPercent", "insureds.coverages.sis.additionalFields.sisMaximumBenefitAmount", "insureds.underwritingFactors.healthFactors.hivNEAdditionalFields.individualNameCalc", "insureds.underwritingFactors.healthFactors.hivMIAdditionalFields.doNotConsentSigCalc", "insureds.underwritingFactors.healthFactors.hivMIAdditionalFields.doConsentSigCalc", "owner.mailingAddress.addressLine1", "insureds.additionalFields.issueLimit", "owner.mailingAddress.city", "insureds.additionalFields.fullMailingAddress", "payors.additionalFields.payorsFullName", "insureds.underwritingFactors.healthFactors.hivORAdditionalFields.myselfAddressCalc", "insureds.underwritingFactors.healthFactors.hivOHAdditionalFields.myselfAddressCalc", "insureds.underwritingFactors.healthFactors.hivNEAdditionalFields.individualAddressCalc", "additionalFields.statSeries", "insureds.coverages.sis.benefitAmount", "additionalFields.totalMonthlyMaximumCalc", "insureds.coverages.sis.additionalFields.premBeforeDiscount", "insureds.coverages.base.additionalFields.baseMaximumBenefitAmount", "insureds.coverages.sis.premiumAmount", "insureds.coverages.base.benefitAmount", "insureds.coverages.sis.additionalFields.discountAmount", "insureds.coverages.base.additionalFields.premBeforeDiscount", "additionalFields.totalMonthlyBenefitAmount", "additionalFields.totalPremiumBeforeDiscount", "insureds.coverages.base.premiumAmount", "insureds.additionalFields.automaticEntryCalculation", "insureds.coverages.base.additionalFields.discountAmount", "policyPremiumAmount", "additionalFields.discountAmount" ],
    "functions" : { },
    "tables" : {
      "policyExclusionTbl" : {
        "columns" : [ "code" ],
        "rows" : [ [ "0020" ], [ "0110" ], [ "0150" ], [ "0204" ], [ "0239" ], [ "0339" ], [ "0389" ], [ "0410" ], [ "0411" ], [ "0429" ], [ "0450" ], [ "0530" ], [ "0549" ], [ "0559" ], [ "0700" ], [ "0729" ], [ "0750" ], [ "0785" ], [ "0798" ], [ "0820" ], [ "0846" ], [ "0888" ], [ "0900" ], [ "0940" ], [ "0979" ], [ "0993" ], [ "1109" ], [ "1120" ], [ "1129" ], [ "1159" ], [ "1160" ], [ "1179" ], [ "1290" ], [ "1309" ], [ "1350" ], [ "1363" ], [ "1790" ], [ "1830" ], [ "1850" ], [ "1890" ], [ "1952" ], [ "1985" ], [ "1991" ], [ "2019" ], [ "2028" ], [ "2030" ], [ "2110" ], [ "2111" ], [ "2113" ], [ "2117" ], [ "2139" ], [ "2180" ], [ "2240" ], [ "2252" ], [ "2270" ], [ "2273" ], [ "2278" ], [ "2280" ], [ "2299" ], [ "2331" ], [ "2337" ], [ "2361" ], [ "2367" ], [ "2377" ], [ "2384" ], [ "2387" ], [ "2390" ], [ "2391" ], [ "2392" ], [ "2393" ], [ "2395" ], [ "2396" ], [ "2397" ], [ "2398" ], [ "2409" ], [ "2410" ], [ "2420" ], [ "2449" ], [ "2459" ], [ "2500" ], [ "2504" ], [ "2506" ], [ "2507" ], [ "2509" ], [ "2512" ], [ "2520" ], [ "2521" ], [ "2530" ], [ "2532" ], [ "2533" ], [ "2535" ], [ "2549" ], [ "2550" ], [ "2554" ], [ "2720" ], [ "2721" ], [ "2740" ], [ "2750" ], [ "2751" ], [ "2754" ], [ "2762" ], [ "2770" ], [ "2771" ], [ "2774" ], [ "2780" ], [ "2810" ], [ "2820" ], [ "2824" ], [ "2826" ], [ "2839" ], [ "2849" ], [ "2859" ], [ "2860" ], [ "2864" ], [ "2872" ], [ "2875" ], [ "2880" ], [ "2959" ], [ "2968" ], [ "2971" ], [ "2989" ], [ "2990" ], [ "3000" ], [ "3001" ], [ "3002" ], [ "3007" ], [ "3009" ], [ "3025" ], [ "3027" ], [ "3030" ], [ "3040" ], [ "3061" ], [ "3062" ], [ "3071" ], [ "3072" ], [ "3074" ], [ "3089" ], [ "3099" ], [ "3109" ], [ "3110" ], [ "3140" ], [ "3152" ], [ "3190" ], [ "3229" ], [ "3230" ], [ "3239" ], [ "3240" ], [ "3310" ], [ "3311" ], [ "3314" ], [ "3318" ], [ "3320" ], [ "3330" ], [ "3335" ], [ "3338" ], [ "3339" ], [ "3352" ], [ "3384" ], [ "3400" ], [ "3430" ], [ "3441" ], [ "3446" ], [ "3449" ], [ "3459" ], [ "3469" ], [ "3470" ], [ "3501" ], [ "3510" ], [ "3530" ], [ "3540" ], [ "3542" ], [ "3556" ], [ "3569" ], [ "3570" ], [ "3580" ], [ "3591" ], [ "3619" ], [ "3620" ], [ "3623" ], [ "3625" ], [ "3627" ], [ "3640" ], [ "3659" ], [ "3669" ], [ "3680" ], [ "3690" ], [ "3700" ], [ "3709" ], [ "3723" ], [ "3730" ], [ "3732" ], [ "3740" ], [ "3743" ], [ "3763" ], [ "3771" ], [ "3773" ], [ "3774" ], [ "3780" ], [ "3789" ], [ "3801" ], [ "3829" ], [ "3830" ], [ "3860" ], [ "3861" ], [ "3863" ], [ "3879" ], [ "3899" ], [ "3900" ], [ "3919" ], [ "3929" ], [ "4011" ], [ "4019" ], [ "4039" ], [ "4101" ], [ "4109" ], [ "4139" ], [ "4140" ], [ "4150" ], [ "4151" ], [ "4169" ], [ "4239" ], [ "4240" ], [ "4246" ], [ "4249" ], [ "4267" ], [ "4269" ], [ "4270" ], [ "4271" ], [ "4273" ], [ "4276" ], [ "4278" ], [ "4279" ], [ "4280" ], [ "4290" ], [ "4293" ], [ "4300" ], [ "4310" ], [ "4331" ], [ "4350" ], [ "4360" ], [ "4409" ], [ "4414" ], [ "4419" ], [ "4428" ], [ "4430" ], [ "4431" ], [ "4439" ], [ "4461" ], [ "4476" ], [ "4519" ], [ "4549" ], [ "4556" ], [ "4564" ], [ "4571" ], [ "4572" ], [ "4589" ], [ "4610" ], [ "4620" ], [ "4630" ], [ "4640" ], [ "4659" ], [ "4660" ], [ "4719" ], [ "4730" ], [ "4779" ], [ "4784" ], [ "4828" ], [ "4860" ], [ "4939" ], [ "4960" ], [ "5020" ], [ "5110" ], [ "5122" ], [ "5128" ], [ "5130" ], [ "5188" ], [ "5231" ], [ "5246" ], [ "5275" ], [ "5280" ], [ "5301" ], [ "5302" ], [ "5303" ], [ "5305" ], [ "5307" ], [ "5308" ], [ "5339" ], [ "5355" ], [ "5356" ], [ "5368" ], [ "5370" ], [ "5410" ], [ "5500" ], [ "5533" ], [ "5551" ], [ "5559" ], [ "5569" ], [ "5589" ], [ "5609" ], [ "5621" ], [ "5641" ], [ "5642" ], [ "5647" ], [ "5650" ], [ "5651" ], [ "5694" ], [ "5698" ], [ "5715" ], [ "5716" ], [ "5718" ], [ "5720" ], [ "5723" ], [ "5733" ], [ "5738" ], [ "5739" ], [ "5751" ], [ "5770" ], [ "5772" ], [ "5789" ], [ "5790" ], [ "5798" ], [ "5799" ], [ "5800" ], [ "5819" ], [ "5839" ], [ "5850" ], [ "5856" ], [ "5860" ], [ "5861" ], [ "5902" ], [ "5908" ], [ "5910" ], [ "5920" ], [ "5932" ], [ "5937" ], [ "5978" ], [ "5989" ], [ "5990" ], [ "5991" ], [ "5997" ], [ "6000" ], [ "6019" ], [ "6039" ], [ "6049" ], [ "6069" ], [ "6078" ], [ "6089" ], [ "6101" ], [ "6102" ], [ "6110" ], [ "6111" ], [ "6143" ], [ "6160" ], [ "6161" ], [ "6170" ], [ "6188" ], [ "6202" ], [ "6225" ], [ "6238" ], [ "6250" ], [ "6253" ], [ "6254" ], [ "6260" ], [ "6262" ], [ "6289" ], [ "6349" ], [ "6379" ], [ "6424" ], [ "6488" ], [ "6495" ], [ "6564" ], [ "6829" ], [ "6840" ], [ "6927" ], [ "6929" ], [ "6944" ], [ "6951" ], [ "6952" ], [ "6954" ], [ "6960" ], [ "6961" ], [ "7014" ], [ "7028" ], [ "7061" ], [ "7089" ], [ "7100" ], [ "7101" ], [ "7102" ], [ "7104" ], [ "7109" ], [ "7143" ], [ "7159" ], [ "7165" ], [ "7177" ], [ "7185" ], [ "7192" ], [ "7202" ], [ "7209" ], [ "7219" ], [ "7222" ], [ "7235" ], [ "7240" ], [ "7243" ], [ "7245" ], [ "7247" ], [ "7248" ], [ "7249" ], [ "7250" ], [ "7263" ], [ "7267" ], [ "7269" ], [ "7270" ], [ "7271" ], [ "7273" ], [ "7274" ], [ "7282" ], [ "7286" ], [ "7287" ], [ "7289" ], [ "7291" ], [ "7292" ], [ "7299" ], [ "7302" ], [ "7303" ], [ "7310" ], [ "7329" ], [ "7330" ], [ "7332" ], [ "7354" ], [ "7367" ], [ "7371" ], [ "7373" ], [ "7384" ], [ "7419" ], [ "7452" ], [ "7455" ], [ "7459" ], [ "7460" ], [ "7463" ], [ "7465" ], [ "7468" ], [ "7469" ], [ "7470" ], [ "7471" ], [ "7479" ], [ "7481" ], [ "7486" ], [ "7490" ], [ "7509" ], [ "7510" ], [ "7526" ], [ "7531" ], [ "7539" ], [ "7548" ], [ "7561" ], [ "7568" ], [ "7580" ], [ "7586" ], [ "7587" ], [ "7598" ], [ "7599" ], [ "7619" ], [ "7620" ], [ "7621" ], [ "7634" ], [ "7802" ], [ "7803" ], [ "7804" ], [ "7805" ], [ "7807" ], [ "7809" ], [ "7823" ], [ "7824" ], [ "7834" ], [ "7840" ], [ "7847" ], [ "7850" ], [ "7852" ], [ "7855" ], [ "7856" ], [ "7863" ], [ "7865" ], [ "7883" ], [ "7906" ], [ "7910" ], [ "8000" ], [ "8020" ], [ "8090" ], [ "8150" ], [ "8291" ], [ "8309" ], [ "8362" ], [ "8470" ], [ "8479" ], [ "8491" ], [ "8518" ], [ "8530" ], [ "8541" ], [ "8554" ], [ "8737" ], [ "8888" ], [ "9236" ], [ "9490" ], [ "9590" ], [ "9849" ], [ "9911" ], [ "9912" ], [ "9913" ], [ "9919" ], [ "9920" ], [ "9921" ], [ "9922" ], [ "9923" ], [ "9924" ], [ "9925" ], [ "9926" ], [ "V571" ], [ "V606" ], [ "9927" ], [ "9928" ], [ "9929" ], [ "9930" ], [ "9931" ], [ "9932" ], [ "9933" ], [ "9934" ], [ "9935" ], [ "9936" ], [ "9937" ], [ "9966" ], [ "V222" ], [ "V429" ], [ "V450" ], [ "V463" ], [ "V498" ], [ "V571" ], [ "V606" ], [ "V762" ] ],
        "displayValues" : {
          "0020" : "0020",
          "0110" : "0110",
          "0150" : "0150",
          "0204" : "0204",
          "0239" : "0239",
          "0339" : "0339",
          "0389" : "0389",
          "0410" : "0410",
          "0411" : "0411",
          "0429" : "0429",
          "0450" : "0450",
          "0530" : "0530",
          "0549" : "0549",
          "0559" : "0559",
          "0700" : "0700",
          "0729" : "0729",
          "0750" : "0750",
          "0785" : "0785",
          "0798" : "0798",
          "0820" : "0820",
          "0846" : "0846",
          "0888" : "0888",
          "0900" : "0900",
          "0940" : "0940",
          "0979" : "0979",
          "0993" : "0993",
          "1109" : "1109",
          "1120" : "1120",
          "1129" : "1129",
          "1159" : "1159",
          "1160" : "1160",
          "1179" : "1179",
          "1290" : "1290",
          "1309" : "1309",
          "1350" : "1350",
          "1363" : "1363",
          "1790" : "1790",
          "1830" : "1830",
          "1850" : "1850",
          "1890" : "1890",
          "1952" : "1952",
          "1985" : "1985",
          "1991" : "1991",
          "2019" : "2019",
          "2028" : "2028",
          "2030" : "2030",
          "2110" : "2110",
          "2111" : "2111",
          "2113" : "2113",
          "2117" : "2117",
          "2139" : "2139",
          "2180" : "2180",
          "2240" : "2240",
          "2252" : "2252",
          "2270" : "2270",
          "2273" : "2273",
          "2278" : "2278",
          "2280" : "2280",
          "2299" : "2299",
          "2331" : "2331",
          "2337" : "2337",
          "2361" : "2361",
          "2367" : "2367",
          "2377" : "2377",
          "2384" : "2384",
          "2387" : "2387",
          "2390" : "2390",
          "2391" : "2391",
          "2392" : "2392",
          "2393" : "2393",
          "2395" : "2395",
          "2396" : "2396",
          "2397" : "2397",
          "2398" : "2398",
          "2409" : "2409",
          "2410" : "2410",
          "2420" : "2420",
          "2449" : "2449",
          "2459" : "2459",
          "2500" : "2500",
          "2504" : "2504",
          "2506" : "2506",
          "2507" : "2507",
          "2509" : "2509",
          "2512" : "2512",
          "2520" : "2520",
          "2521" : "2521",
          "2530" : "2530",
          "2532" : "2532",
          "2533" : "2533",
          "2535" : "2535",
          "2549" : "2549",
          "2550" : "2550",
          "2554" : "2554",
          "2720" : "2720",
          "2721" : "2721",
          "2740" : "2740",
          "2750" : "2750",
          "2751" : "2751",
          "2754" : "2754",
          "2762" : "2762",
          "2770" : "2770",
          "2771" : "2771",
          "2774" : "2774",
          "2780" : "2780",
          "2810" : "2810",
          "2820" : "2820",
          "2824" : "2824",
          "2826" : "2826",
          "2839" : "2839",
          "2849" : "2849",
          "2859" : "2859",
          "2860" : "2860",
          "2864" : "2864",
          "2872" : "2872",
          "2875" : "2875",
          "2880" : "2880",
          "2959" : "2959",
          "2968" : "2968",
          "2971" : "2971",
          "2989" : "2989",
          "2990" : "2990",
          "3000" : "3000",
          "3001" : "3001",
          "3002" : "3002",
          "3007" : "3007",
          "3009" : "3009",
          "3025" : "3025",
          "3027" : "3027",
          "3030" : "3030",
          "3040" : "3040",
          "3061" : "3061",
          "3062" : "3062",
          "3071" : "3071",
          "3072" : "3072",
          "3074" : "3074",
          "3089" : "3089",
          "3099" : "3099",
          "3109" : "3109",
          "3110" : "3110",
          "3140" : "3140",
          "3152" : "3152",
          "3190" : "3190",
          "3229" : "3229",
          "3230" : "3230",
          "3239" : "3239",
          "3240" : "3240",
          "3310" : "3310",
          "3311" : "3311",
          "3314" : "3314",
          "3318" : "3318",
          "3320" : "3320",
          "3330" : "3330",
          "3335" : "3335",
          "3338" : "3338",
          "3339" : "3339",
          "3352" : "3352",
          "3384" : "3384",
          "3400" : "3400",
          "3430" : "3430",
          "3441" : "3441",
          "3446" : "3446",
          "3449" : "3449",
          "3459" : "3459",
          "3469" : "3469",
          "3470" : "3470",
          "3501" : "3501",
          "3510" : "3510",
          "3530" : "3530",
          "3540" : "3540",
          "3542" : "3542",
          "3556" : "3556",
          "3569" : "3569",
          "3570" : "3570",
          "3580" : "3580",
          "3591" : "3591",
          "3619" : "3619",
          "3620" : "3620",
          "3623" : "3623",
          "3625" : "3625",
          "3627" : "3627",
          "3640" : "3640",
          "3659" : "3659",
          "3669" : "3669",
          "3680" : "3680",
          "3690" : "3690",
          "3700" : "3700",
          "3709" : "3709",
          "3723" : "3723",
          "3730" : "3730",
          "3732" : "3732",
          "3740" : "3740",
          "3743" : "3743",
          "3763" : "3763",
          "3771" : "3771",
          "3773" : "3773",
          "3774" : "3774",
          "3780" : "3780",
          "3789" : "3789",
          "3801" : "3801",
          "3829" : "3829",
          "3830" : "3830",
          "3860" : "3860",
          "3861" : "3861",
          "3863" : "3863",
          "3879" : "3879",
          "3899" : "3899",
          "3900" : "3900",
          "3919" : "3919",
          "3929" : "3929",
          "4011" : "4011",
          "4019" : "4019",
          "4039" : "4039",
          "4101" : "4101",
          "4109" : "4109",
          "4139" : "4139",
          "4140" : "4140",
          "4150" : "4150",
          "4151" : "4151",
          "4169" : "4169",
          "4239" : "4239",
          "4240" : "4240",
          "4246" : "4246",
          "4249" : "4249",
          "4267" : "4267",
          "4269" : "4269",
          "4270" : "4270",
          "4271" : "4271",
          "4273" : "4273",
          "4276" : "4276",
          "4278" : "4278",
          "4279" : "4279",
          "4280" : "4280",
          "4290" : "4290",
          "4293" : "4293",
          "4300" : "4300",
          "4310" : "4310",
          "4331" : "4331",
          "4350" : "4350",
          "4360" : "4360",
          "4409" : "4409",
          "4414" : "4414",
          "4419" : "4419",
          "4428" : "4428",
          "4430" : "4430",
          "4431" : "4431",
          "4439" : "4439",
          "4461" : "4461",
          "4476" : "4476",
          "4519" : "4519",
          "4549" : "4549",
          "4556" : "4556",
          "4564" : "4564",
          "4571" : "4571",
          "4572" : "4572",
          "4589" : "4589",
          "4610" : "4610",
          "4620" : "4620",
          "4630" : "4630",
          "4640" : "4640",
          "4659" : "4659",
          "4660" : "4660",
          "4719" : "4719",
          "4730" : "4730",
          "4779" : "4779",
          "4784" : "4784",
          "4828" : "4828",
          "4860" : "4860",
          "4939" : "4939",
          "4960" : "4960",
          "5020" : "5020",
          "5110" : "5110",
          "5122" : "5122",
          "5128" : "5128",
          "5130" : "5130",
          "5188" : "5188",
          "5231" : "5231",
          "5246" : "5246",
          "5275" : "5275",
          "5280" : "5280",
          "5301" : "5301",
          "5302" : "5302",
          "5303" : "5303",
          "5305" : "5305",
          "5307" : "5307",
          "5308" : "5308",
          "5339" : "5339",
          "5355" : "5355",
          "5356" : "5356",
          "5368" : "5368",
          "5370" : "5370",
          "5410" : "5410",
          "5500" : "5500",
          "5533" : "5533",
          "5551" : "5551",
          "5559" : "5559",
          "5569" : "5569",
          "5589" : "5589",
          "5609" : "5609",
          "5621" : "5621",
          "5641" : "5641",
          "5642" : "5642",
          "5647" : "5647",
          "5650" : "5650",
          "5651" : "5651",
          "5694" : "5694",
          "5698" : "5698",
          "5715" : "5715",
          "5716" : "5716",
          "5718" : "5718",
          "5720" : "5720",
          "5723" : "5723",
          "5733" : "5733",
          "5738" : "5738",
          "5739" : "5739",
          "5751" : "5751",
          "5770" : "5770",
          "5772" : "5772",
          "5789" : "5789",
          "5790" : "5790",
          "5798" : "5798",
          "5799" : "5799",
          "5800" : "5800",
          "5819" : "5819",
          "5839" : "5839",
          "5850" : "5850",
          "5856" : "5856",
          "5860" : "5860",
          "5861" : "5861",
          "5902" : "5902",
          "5908" : "5908",
          "5910" : "5910",
          "5920" : "5920",
          "5932" : "5932",
          "5937" : "5937",
          "5978" : "5978",
          "5989" : "5989",
          "5990" : "5990",
          "5991" : "5991",
          "5997" : "5997",
          "6000" : "6000",
          "6019" : "6019",
          "6039" : "6039",
          "6049" : "6049",
          "6069" : "6069",
          "6078" : "6078",
          "6089" : "6089",
          "6101" : "6101",
          "6102" : "6102",
          "6110" : "6110",
          "6111" : "6111",
          "6143" : "6143",
          "6160" : "6160",
          "6161" : "6161",
          "6170" : "6170",
          "6188" : "6188",
          "6202" : "6202",
          "6225" : "6225",
          "6238" : "6238",
          "6250" : "6250",
          "6253" : "6253",
          "6254" : "6254",
          "6260" : "6260",
          "6262" : "6262",
          "6289" : "6289",
          "6349" : "6349",
          "6379" : "6379",
          "6424" : "6424",
          "6488" : "6488",
          "6495" : "6495",
          "6564" : "6564",
          "6829" : "6829",
          "6840" : "6840",
          "6927" : "6927",
          "6929" : "6929",
          "6944" : "6944",
          "6951" : "6951",
          "6952" : "6952",
          "6954" : "6954",
          "6960" : "6960",
          "6961" : "6961",
          "7014" : "7014",
          "7028" : "7028",
          "7061" : "7061",
          "7089" : "7089",
          "7100" : "7100",
          "7101" : "7101",
          "7102" : "7102",
          "7104" : "7104",
          "7109" : "7109",
          "7143" : "7143",
          "7159" : "7159",
          "7165" : "7165",
          "7177" : "7177",
          "7185" : "7185",
          "7192" : "7192",
          "7202" : "7202",
          "7209" : "7209",
          "7219" : "7219",
          "7222" : "7222",
          "7235" : "7235",
          "7240" : "7240",
          "7243" : "7243",
          "7245" : "7245",
          "7247" : "7247",
          "7248" : "7248",
          "7249" : "7249",
          "7250" : "7250",
          "7263" : "7263",
          "7267" : "7267",
          "7269" : "7269",
          "7270" : "7270",
          "7271" : "7271",
          "7273" : "7273",
          "7274" : "7274",
          "7282" : "7282",
          "7286" : "7286",
          "7287" : "7287",
          "7289" : "7289",
          "7291" : "7291",
          "7292" : "7292",
          "7299" : "7299",
          "7302" : "7302",
          "7303" : "7303",
          "7310" : "7310",
          "7329" : "7329",
          "7330" : "7330",
          "7332" : "7332",
          "7354" : "7354",
          "7367" : "7367",
          "7371" : "7371",
          "7373" : "7373",
          "7384" : "7384",
          "7419" : "7419",
          "7452" : "7452",
          "7455" : "7455",
          "7459" : "7459",
          "7460" : "7460",
          "7463" : "7463",
          "7465" : "7465",
          "7468" : "7468",
          "7469" : "7469",
          "7470" : "7470",
          "7471" : "7471",
          "7479" : "7479",
          "7481" : "7481",
          "7486" : "7486",
          "7490" : "7490",
          "7509" : "7509",
          "7510" : "7510",
          "7526" : "7526",
          "7531" : "7531",
          "7539" : "7539",
          "7548" : "7548",
          "7561" : "7561",
          "7568" : "7568",
          "7580" : "7580",
          "7586" : "7586",
          "7587" : "7587",
          "7598" : "7598",
          "7599" : "7599",
          "7619" : "7619",
          "7620" : "7620",
          "7621" : "7621",
          "7634" : "7634",
          "7802" : "7802",
          "7803" : "7803",
          "7804" : "7804",
          "7805" : "7805",
          "7807" : "7807",
          "7809" : "7809",
          "7823" : "7823",
          "7824" : "7824",
          "7834" : "7834",
          "7840" : "7840",
          "7847" : "7847",
          "7850" : "7850",
          "7852" : "7852",
          "7855" : "7855",
          "7856" : "7856",
          "7863" : "7863",
          "7865" : "7865",
          "7883" : "7883",
          "7906" : "7906",
          "7910" : "7910",
          "8000" : "8000",
          "8020" : "8020",
          "8090" : "8090",
          "8150" : "8150",
          "8291" : "8291",
          "8309" : "8309",
          "8362" : "8362",
          "8470" : "8470",
          "8479" : "8479",
          "8491" : "8491",
          "8518" : "8518",
          "8530" : "8530",
          "8541" : "8541",
          "8554" : "8554",
          "8737" : "8737",
          "8888" : "8888",
          "9236" : "9236",
          "9490" : "9490",
          "9590" : "9590",
          "9849" : "9849",
          "9911" : "9911",
          "9912" : "9912",
          "9913" : "9913",
          "9919" : "9919",
          "9920" : "9920",
          "9921" : "9921",
          "9922" : "9922",
          "9923" : "9923",
          "9924" : "9924",
          "9925" : "9925",
          "9926" : "9926",
          "V571" : "V571",
          "V606" : "V606",
          "9927" : "9927",
          "9928" : "9928",
          "9929" : "9929",
          "9930" : "9930",
          "9931" : "9931",
          "9932" : "9932",
          "9933" : "9933",
          "9934" : "9934",
          "9935" : "9935",
          "9936" : "9936",
          "9937" : "9937",
          "9966" : "9966",
          "V222" : "V222",
          "V429" : "V429",
          "V450" : "V450",
          "V463" : "V463",
          "V498" : "V498",
          "V762" : "V762"
        }
      },
      "iccStateTbl" : {
        "columns" : [ "issueState" ],
        "rows" : [ [ "AL" ], [ "AK" ], [ "AZ" ], [ "AR" ], [ "CA" ], [ "CO" ], [ "CT" ], [ "DC" ], [ "GA" ], [ "HI" ], [ "ID" ], [ "IL" ], [ "IN" ], [ "IA" ], [ "KS" ], [ "KY" ], [ "LA" ], [ "ME" ], [ "MD" ], [ "MA" ], [ "MI" ], [ "MN" ], [ "MS" ], [ "MO" ], [ "NE" ], [ "NV" ], [ "NH" ], [ "NJ" ], [ "NM" ], [ "NC" ], [ "OH" ], [ "OK" ], [ "OR" ], [ "PA" ], [ "PR" ], [ "RI" ], [ "SC" ], [ "TN" ], [ "TX" ], [ "UT" ], [ "VT" ], [ "VA" ], [ "WA" ], [ "WV" ], [ "WI" ] ],
        "displayValues" : {
          "AL" : "AL",
          "AK" : "AK",
          "AZ" : "AZ",
          "AR" : "AR",
          "CA" : "CA",
          "CO" : "CO",
          "CT" : "CT",
          "DC" : "DC",
          "GA" : "GA",
          "HI" : "HI",
          "ID" : "ID",
          "IL" : "IL",
          "IN" : "IN",
          "IA" : "IA",
          "KS" : "KS",
          "KY" : "KY",
          "LA" : "LA",
          "ME" : "ME",
          "MD" : "MD",
          "MA" : "MA",
          "MI" : "MI",
          "MN" : "MN",
          "MS" : "MS",
          "MO" : "MO",
          "NE" : "NE",
          "NV" : "NV",
          "NH" : "NH",
          "NJ" : "NJ",
          "NM" : "NM",
          "NC" : "NC",
          "OH" : "OH",
          "OK" : "OK",
          "OR" : "OR",
          "PA" : "PA",
          "PR" : "PR",
          "RI" : "RI",
          "SC" : "SC",
          "TN" : "TN",
          "TX" : "TX",
          "UT" : "UT",
          "VT" : "VT",
          "VA" : "VA",
          "WA" : "WA",
          "WV" : "WV",
          "WI" : "WI"
        }
      },
      "birthCountryTbl" : {
        "columns" : [ "birthCountry" ],
        "rows" : [ [ "UNITED STATES" ], [ "OTHER" ], [ "AFGHANISTAN" ], [ "ALBANIA" ], [ "ALGERIA" ], [ "ANDORRA" ], [ "ANGOLA" ], [ "ANTIGUA AND BARBUDA" ], [ "ARGENTINA" ], [ "ARMENIA" ], [ "AUSTRALIA" ], [ "AUSTRIA" ], [ "AZERBAIJAN" ], [ "BAHAMAS" ], [ "BAHRAIN" ], [ "BANGLADESH" ], [ "BARBADOS" ], [ "BELARUS" ], [ "BELGIUM" ], [ "BELIZE" ], [ "BENIN" ], [ "BHUTAN" ], [ "BOLIVIA" ], [ "BOSNIA/HERZEGOVINA" ], [ "BOTSWANA" ], [ "BRAZIL" ], [ "BRUNEI" ], [ "BULGARIA" ], [ "BURKINA FASO" ], [ "BURUNDI" ], [ "CAMBODIA" ], [ "CAMEROON" ], [ "CANADA" ], [ "CENTRAL AFRICAN REPUBLIC" ], [ "CHAD" ], [ "CHILE" ], [ "CHINA" ], [ "COLOMBIA" ], [ "COMOROS" ], [ "COSTA RICA" ], [ "COTE D IVOIRE" ], [ "CROATIA" ], [ "CUBA" ], [ "CYPRUS" ], [ "CZECH REPUBLIC" ], [ "DEMOCRATIC REPUBLIC OF THE CONGO" ], [ "DENMARK" ], [ "DJIBOUTI" ], [ "DOMINICA" ], [ "DOMINICAN REPUBLIC" ], [ "EAST TIMOR (TIMOR-LESTE)" ], [ "ECUADOR" ], [ "EGYPT" ], [ "EL SALVADOR" ], [ "EQUATORIAL GUINEA" ], [ "ERITREA" ], [ "ESTONIA" ], [ "ESWATINI" ], [ "ETHIOPIA" ], [ "FIJI" ], [ "FINLAND" ], [ "FRANCE" ], [ "GABON" ], [ "GAMBIA" ], [ "GEORGIA" ], [ "GERMANY" ], [ "GHANA" ], [ "GREECE" ], [ "GRENADA" ], [ "GUATEMALA" ], [ "GUINEA" ], [ "GUINEA-BISSAU" ], [ "GUYANA" ], [ "HAITI" ], [ "HONDURAS" ], [ "HUNGARY" ], [ "ICELAND" ], [ "INDIA" ], [ "INDONESIA" ], [ "IRAN" ], [ "IRAQ" ], [ "IRELAND" ], [ "ISRAEL" ], [ "ITALY" ], [ "JAMAICA" ], [ "JAPAN" ], [ "JORDAN" ], [ "KAZAKHSTAN" ], [ "KENYA" ], [ "KIRIBATI" ], [ "KOSOVO" ], [ "KUWAIT" ], [ "KYRGYZSTAN" ], [ "LAOS" ], [ "LATVIA" ], [ "LEBANON" ], [ "LESOTHO" ], [ "LIBERIA" ], [ "LIBYA" ], [ "LIECHTENSTEIN" ], [ "LITHUANIA" ], [ "LUXEMBOURG" ], [ "MADAGASCAR" ], [ "MALAWI" ], [ "MALAYSIA" ], [ "MALDIVES" ], [ "MALI" ], [ "MALTA" ], [ "MARSHALL ISLANDS" ], [ "MAURITANIA" ], [ "MAURITIUS" ], [ "MEXICO" ], [ "MICRONESIA" ], [ "MOLDOVA" ], [ "MONACO" ], [ "MONGOLIA" ], [ "MONTENEGRO" ], [ "MOROCCO" ], [ "MOZAMBIQUE" ], [ "MYANMAR/BURMA" ], [ "NAMIBIA" ], [ "NAURU" ], [ "NEPAL" ], [ "NETHERLANDS" ], [ "NEW ZEALAND" ], [ "NICARAGUA" ], [ "NIGER" ], [ "NIGERIA" ], [ "NORTH KOREA" ], [ "NORTH MACEDONIA" ], [ "NORWAY" ], [ "OMAN" ], [ "PAKISTAN" ], [ "PALAU" ], [ "PANAMA" ], [ "PAPUA NEW GUINEA" ], [ "PARAGUAY" ], [ "PERU" ], [ "PHILIPPINES" ], [ "POLAND" ], [ "PORTUGAL" ], [ "QATAR" ], [ "REPUBLIC OF THE CONGO" ], [ "ROMANIA" ], [ "RUSSIA" ], [ "RWANDA" ], [ "SAINT KITTS AND NEVIS" ], [ "SAINT LUCIA" ], [ "SAINT VINCENT AND THE GRENADINES" ], [ "SAMOA" ], [ "SAN MARINO" ], [ "SAO TOME AND PRINCIPE" ], [ "SAUDI ARABIA" ], [ "SENEGAL" ], [ "SERBIA" ], [ "SEYCHELLES" ], [ "SIERRA LEONE" ], [ "SINGAPORE" ], [ "SLOVAKIA" ], [ "SLOVENIA" ], [ "SOLOMON ISLANDS" ], [ "SOMALIA" ], [ "SOUTH AFRICA" ], [ "SOUTH KOREA" ], [ "SOUTH SUDAN" ], [ "SPAIN" ], [ "SRI LANKA" ], [ "SUDAN" ], [ "SURINAME" ], [ "SWEDEN" ], [ "SWITZERLAND" ], [ "SYRIA" ], [ "TAIWAN" ], [ "TAJIKISTAN" ], [ "TANZANIA" ], [ "THAILAND" ], [ "TOGO" ], [ "TONGA" ], [ "TRINIDAD AND TOBAGO" ], [ "TUNISIA" ], [ "TURKEY" ], [ "TURKMENISTAN" ], [ "TUVALU" ], [ "UGANDA" ], [ "UKRAINE" ], [ "UNITED ARAB EMIRATES" ], [ "UNITED KINGDOM" ], [ "URUGUAY" ], [ "UZBEKISTAN" ], [ "VANUATU" ], [ "VATICAN CITY" ], [ "VENEZUELA" ], [ "VIETNAM" ], [ "YEMEN" ], [ "ZAMBIA" ], [ "ZIMBABWE" ] ],
        "displayValues" : {
          "UNITED STATES" : "United States",
          "OTHER" : "Other",
          "AFGHANISTAN" : "Afghanistan",
          "ALBANIA" : "Albania",
          "ALGERIA" : "Algeria",
          "ANDORRA" : "Andorra",
          "ANGOLA" : "Angola",
          "ANTIGUA AND BARBUDA" : "Antigua and Barbuda",
          "ARGENTINA" : "Argentina",
          "ARMENIA" : "Armenia",
          "AUSTRALIA" : "Australia",
          "AUSTRIA" : "Austria",
          "AZERBAIJAN" : "Azerbaijan",
          "BAHAMAS" : "Bahamas",
          "BAHRAIN" : "Bahrain",
          "BANGLADESH" : "Bangladesh",
          "BARBADOS" : "Barbados",
          "BELARUS" : "Belarus",
          "BELGIUM" : "Belgium",
          "BELIZE" : "Belize",
          "BENIN" : "Benin",
          "BHUTAN" : "Bhutan",
          "BOLIVIA" : "Bolivia",
          "BOSNIA/HERZEGOVINA" : "Bosnia/Herzegovina",
          "BOTSWANA" : "Botswana",
          "BRAZIL" : "Brazil",
          "BRUNEI" : "Brunei",
          "BULGARIA" : "Bulgaria",
          "BURKINA FASO" : "Burkina Faso",
          "BURUNDI" : "Burundi",
          "CAMBODIA" : "Cambodia",
          "CAMEROON" : "Cameroon",
          "CANADA" : "Canada",
          "CENTRAL AFRICAN REPUBLIC" : "Central African Republic",
          "CHAD" : "Chad",
          "CHILE" : "Chile",
          "CHINA" : "China",
          "COLOMBIA" : "Colombia",
          "COMOROS" : "Comoros",
          "COSTA RICA" : "Costa Rica",
          "COTE D IVOIRE" : "Cote d Ivoire",
          "CROATIA" : "Croatia",
          "CUBA" : "Cuba",
          "CYPRUS" : "Cyprus",
          "CZECH REPUBLIC" : "Czech Republic",
          "DEMOCRATIC REPUBLIC OF THE CONGO" : "Democratic Republic of the Congo",
          "DENMARK" : "Denmark",
          "DJIBOUTI" : "Djibouti",
          "DOMINICA" : "Dominica",
          "DOMINICAN REPUBLIC" : "Dominican Republic",
          "EAST TIMOR (TIMOR-LESTE)" : "East Timor (Timor-Leste)",
          "ECUADOR" : "Ecuador",
          "EGYPT" : "Egypt",
          "EL SALVADOR" : "El Salvador",
          "EQUATORIAL GUINEA" : "Equatorial Guinea",
          "ERITREA" : "Eritrea",
          "ESTONIA" : "Estonia",
          "ESWATINI" : "Eswatini",
          "ETHIOPIA" : "Ethiopia",
          "FIJI" : "Fiji",
          "FINLAND" : "Finland",
          "FRANCE" : "France",
          "GABON" : "Gabon",
          "GAMBIA" : "Gambia",
          "GEORGIA" : "Georgia",
          "GERMANY" : "Germany",
          "GHANA" : "Ghana",
          "GREECE" : "Greece",
          "GRENADA" : "Grenada",
          "GUATEMALA" : "Guatemala",
          "GUINEA" : "Guinea",
          "GUINEA-BISSAU" : "Guinea-Bissau",
          "GUYANA" : "Guyana",
          "HAITI" : "Haiti",
          "HONDURAS" : "Honduras",
          "HUNGARY" : "Hungary",
          "ICELAND" : "Iceland",
          "INDIA" : "India",
          "INDONESIA" : "Indonesia",
          "IRAN" : "Iran",
          "IRAQ" : "Iraq",
          "IRELAND" : "Ireland",
          "ISRAEL" : "Israel",
          "ITALY" : "Italy",
          "JAMAICA" : "Jamaica",
          "JAPAN" : "Japan",
          "JORDAN" : "Jordan",
          "KAZAKHSTAN" : "Kazakhstan",
          "KENYA" : "Kenya",
          "KIRIBATI" : "Kiribati",
          "KOSOVO" : "Kosovo",
          "KUWAIT" : "Kuwait",
          "KYRGYZSTAN" : "Kyrgyzstan",
          "LAOS" : "Laos",
          "LATVIA" : "Latvia",
          "LEBANON" : "Lebanon",
          "LESOTHO" : "Lesotho",
          "LIBERIA" : "Liberia",
          "LIBYA" : "Libya",
          "LIECHTENSTEIN" : "Liechtenstein",
          "LITHUANIA" : "Lithuania",
          "LUXEMBOURG" : "Luxembourg",
          "MADAGASCAR" : "Madagascar",
          "MALAWI" : "Malawi",
          "MALAYSIA" : "Malaysia",
          "MALDIVES" : "Maldives",
          "MALI" : "Mali",
          "MALTA" : "Malta",
          "MARSHALL ISLANDS" : "Marshall Islands",
          "MAURITANIA" : "Mauritania",
          "MAURITIUS" : "Mauritius",
          "MEXICO" : "Mexico",
          "MICRONESIA" : "Micronesia",
          "MOLDOVA" : "Moldova",
          "MONACO" : "Monaco",
          "MONGOLIA" : "Mongolia",
          "MONTENEGRO" : "Montenegro",
          "MOROCCO" : "Morocco",
          "MOZAMBIQUE" : "Mozambique",
          "MYANMAR/BURMA" : "Myanmar/Burma",
          "NAMIBIA" : "Namibia",
          "NAURU" : "Nauru",
          "NEPAL" : "Nepal",
          "NETHERLANDS" : "Netherlands",
          "NEW ZEALAND" : "New Zealand",
          "NICARAGUA" : "Nicaragua",
          "NIGER" : "Niger",
          "NIGERIA" : "Nigeria",
          "NORTH KOREA" : "North Korea",
          "NORTH MACEDONIA" : "North Macedonia",
          "NORWAY" : "Norway",
          "OMAN" : "Oman",
          "PAKISTAN" : "Pakistan",
          "PALAU" : "Palau",
          "PANAMA" : "Panama",
          "PAPUA NEW GUINEA" : "Papua New Guinea",
          "PARAGUAY" : "Paraguay",
          "PERU" : "Peru",
          "PHILIPPINES" : "Philippines",
          "POLAND" : "Poland",
          "PORTUGAL" : "Portugal",
          "QATAR" : "Qatar",
          "REPUBLIC OF THE CONGO" : "Republic of the Congo",
          "ROMANIA" : "Romania",
          "RUSSIA" : "Russia",
          "RWANDA" : "Rwanda",
          "SAINT KITTS AND NEVIS" : "Saint Kitts and Nevis",
          "SAINT LUCIA" : "Saint Lucia",
          "SAINT VINCENT AND THE GRENADINES" : "Saint Vincent and the Grenadines",
          "SAMOA" : "Samoa",
          "SAN MARINO" : "San Marino",
          "SAO TOME AND PRINCIPE" : "Sao Tome and Principe",
          "SAUDI ARABIA" : "Saudi Arabia",
          "SENEGAL" : "Senegal",
          "SERBIA" : "Serbia",
          "SEYCHELLES" : "Seychelles",
          "SIERRA LEONE" : "Sierra Leone",
          "SINGAPORE" : "Singapore",
          "SLOVAKIA" : "Slovakia",
          "SLOVENIA" : "Slovenia",
          "SOLOMON ISLANDS" : "Solomon Islands",
          "SOMALIA" : "Somalia",
          "SOUTH AFRICA" : "South Africa",
          "SOUTH KOREA" : "South Korea",
          "SOUTH SUDAN" : "South Sudan",
          "SPAIN" : "Spain",
          "SRI LANKA" : "Sri Lanka",
          "SUDAN" : "Sudan",
          "SURINAME" : "Suriname",
          "SWEDEN" : "Sweden",
          "SWITZERLAND" : "Switzerland",
          "SYRIA" : "Syria",
          "TAIWAN" : "Taiwan",
          "TAJIKISTAN" : "Tajikistan",
          "TANZANIA" : "Tanzania",
          "THAILAND" : "Thailand",
          "TOGO" : "Togo",
          "TONGA" : "Tonga",
          "TRINIDAD AND TOBAGO" : "Trinidad and Tobago",
          "TUNISIA" : "Tunisia",
          "TURKEY" : "Turkey",
          "TURKMENISTAN" : "Turkmenistan",
          "TUVALU" : "Tuvalu",
          "UGANDA" : "Uganda",
          "UKRAINE" : "Ukraine",
          "UNITED ARAB EMIRATES" : "United Arab Emirates",
          "UNITED KINGDOM" : "United Kingdom",
          "URUGUAY" : "Uruguay",
          "UZBEKISTAN" : "Uzbekistan",
          "VANUATU" : "Vanuatu",
          "VATICAN CITY" : "Vatican City",
          "VENEZUELA" : "Venezuela",
          "VIETNAM" : "Vietnam",
          "YEMEN" : "Yemen",
          "ZAMBIA" : "Zambia",
          "ZIMBABWE" : "Zimbabwe"
        }
      },
      "incomeErSeQualSisTbl" : {
        "columns" : [ "annualEarnedIncome", "sis" ],
        "rows" : [ [ "15000", "700" ], [ "17000", "800" ], [ "19000", "800" ], [ "21000", "1000" ], [ "23000", "1000" ], [ "25000", "1100" ], [ "27000", "1100" ], [ "29000", "1100" ], [ "31000", "1300" ], [ "33000", "1400" ], [ "35000", "1600" ], [ "37000", "1600" ], [ "39000", "1600" ], [ "41000", "1600" ], [ "43000", "1800" ], [ "45000", "1900" ], [ "47000", "1900" ], [ "50000", "2100" ], [ "52000", "2100" ], [ "54000", "2100" ], [ "56000", "2100" ], [ "58000", "2200" ], [ "60000", "2200" ], [ "62000", "2200" ], [ "64000", "2300" ], [ "66000", "2300" ], [ "68000", "2500" ], [ "70000", "2500" ], [ "72000", "2500" ], [ "75000", "2500" ], [ "80000", "2600" ], [ "85000", "2600" ], [ "90000", "2600" ], [ "95000", "2600" ], [ "100000", "2600" ], [ "105000", "2600" ], [ "110000", "2600" ], [ "115000", "2600" ], [ "120000", "2600" ], [ "125000", "2600" ], [ "130000", "2600" ], [ "135000", "2600" ], [ "140000", "2600" ], [ "145000", "2600" ], [ "150000", "2600" ], [ "155000", "2600" ], [ "160000", "2600" ], [ "165000", "2600" ], [ "170000", "2600" ], [ "175000", "2600" ], [ "180000", "2600" ], [ "185000", "2600" ], [ "190000", "2600" ], [ "195000", "2600" ], [ "200000", "2600" ], [ "210000", "2600" ], [ "220000", "2600" ], [ "230000", "2600" ], [ "240000", "2600" ], [ "250000", "2600" ], [ "260000", "2600" ], [ "270000", "2600" ], [ "280000", "2600" ], [ "290000", "2600" ], [ "300000", "2600" ], [ "325000", "2600" ], [ "350000", "2600" ], [ "375000", "2600" ], [ "400000", "2600" ], [ "425000", "2600" ], [ "450000", "2600" ], [ "475000", "2600" ], [ "500000", "2600" ], [ "525000", "2600" ], [ "550000", "2600" ], [ "575000", "2600" ], [ "600000", "2600" ], [ "625000", "2600" ], [ "650000", "2600" ], [ "675000", "2600" ], [ "700000", "2600" ], [ "725000", "2600" ], [ "750000", "2600" ], [ "775000", "2600" ], [ "800000", "2600" ], [ "825000", "2600" ], [ "850000", "2600" ], [ "875000", "2600" ], [ "900000", "2600" ], [ "925000", "2600" ], [ "950000", "2600" ], [ "975000", "2600" ], [ "1000000", "2600" ], [ "1050000", "2600" ], [ "1100000", "2600" ], [ "1150000", "2600" ], [ "1200000", "2600" ] ],
        "displayValues" : {
          "700" : "700",
          "800" : "800",
          "1000" : "1000",
          "1100" : "1100",
          "1300" : "1300",
          "1400" : "1400",
          "1600" : "1600",
          "1800" : "1800",
          "1900" : "1900",
          "2100" : "2100",
          "2200" : "2200",
          "2300" : "2300",
          "2500" : "2500",
          "2600" : "2600"
        }
      },
      "incomeGrpEe" : {
        "columns" : [ "annualEarnedIncome", "total" ],
        "rows" : [ [ "15000", "1000" ], [ "17000", "1100" ], [ "19000", "1200" ], [ "21000", "1300" ], [ "23000", "1400" ], [ "25000", "1500" ], [ "27000", "1600" ], [ "29000", "1700" ], [ "31000", "1900" ], [ "33000", "1900" ], [ "35000", "2100" ], [ "37000", "2200" ], [ "39000", "2200" ], [ "41000", "2500" ], [ "43000", "2500" ], [ "45000", "2600" ], [ "47000", "2600" ], [ "50000", "2900" ], [ "52000", "3000" ], [ "54000", "3000" ], [ "56000", "3100" ], [ "58000", "3100" ], [ "60000", "3500" ], [ "62000", "3500" ], [ "64000", "3500" ], [ "66000", "3600" ], [ "68000", "3600" ], [ "70000", "3900" ], [ "72000", "3900" ], [ "75000", "4000" ], [ "80000", "4300" ], [ "85000", "4400" ], [ "90000", "4800" ], [ "95000", "4900" ], [ "100000", "5100" ], [ "105000", "5100" ], [ "110000", "5300" ], [ "115000", "5300" ], [ "120000", "6000" ], [ "125000", "6000" ], [ "130000", "6100" ], [ "135000", "6100" ], [ "140000", "6700" ], [ "145000", "6700" ], [ "150000", "6900" ], [ "155000", "7000" ], [ "160000", "7600" ], [ "165000", "7700" ], [ "170000", "7800" ], [ "175000", "7800" ], [ "180000", "8500" ], [ "185000", "8600" ], [ "190000", "8700" ], [ "195000", "8900" ], [ "200000", "9400" ], [ "210000", "9600" ], [ "220000", "9900" ], [ "230000", "10700" ], [ "240000", "10900" ], [ "250000", "11700" ], [ "260000", "11900" ], [ "270000", "12000" ], [ "280000", "12600" ], [ "290000", "12700" ], [ "300000", "13300" ], [ "325000", "13900" ], [ "350000", "15000" ], [ "375000", "15600" ], [ "400000", "16300" ], [ "425000", "16800" ], [ "450000", "17300" ], [ "475000", "17700" ], [ "500000", "18400" ], [ "525000", "18700" ], [ "550000", "19400" ], [ "575000", "19600" ], [ "600000", "20000" ], [ "625000", "20400" ], [ "650000", "20800" ], [ "675000", "21200" ], [ "700000", "21600" ], [ "725000", "22000" ], [ "750000", "22400" ], [ "775000", "22900" ], [ "800000", "23400" ], [ "825000", "23900" ], [ "850000", "24400" ], [ "875000", "24900" ], [ "900000", "25400" ], [ "925000", "26000" ], [ "950000", "26600" ], [ "975000", "27200" ], [ "1000000", "27800" ], [ "1050000", "28400" ], [ "1100000", "29000" ], [ "1150000", "29500" ], [ "1200000", "30000" ] ],
        "displayValues" : {
          "1000" : "1000",
          "1100" : "1100",
          "1200" : "1200",
          "1300" : "1300",
          "1400" : "1400",
          "1500" : "1500",
          "1600" : "1600",
          "1700" : "1700",
          "1900" : "1900",
          "2100" : "2100",
          "2200" : "2200",
          "2500" : "2500",
          "2600" : "2600",
          "2900" : "2900",
          "3000" : "3000",
          "3100" : "3100",
          "3500" : "3500",
          "3600" : "3600",
          "3900" : "3900",
          "4000" : "4000",
          "4300" : "4300",
          "4400" : "4400",
          "4800" : "4800",
          "4900" : "4900",
          "5100" : "5100",
          "5300" : "5300",
          "6000" : "6000",
          "6100" : "6100",
          "6700" : "6700",
          "6900" : "6900",
          "7000" : "7000",
          "7600" : "7600",
          "7700" : "7700",
          "7800" : "7800",
          "8500" : "8500",
          "8600" : "8600",
          "8700" : "8700",
          "8900" : "8900",
          "9400" : "9400",
          "9600" : "9600",
          "9900" : "9900",
          "10700" : "10700",
          "10900" : "10900",
          "11700" : "11700",
          "11900" : "11900",
          "12000" : "12000",
          "12600" : "12600",
          "12700" : "12700",
          "13300" : "13300",
          "13900" : "13900",
          "15000" : "15000",
          "15600" : "15600",
          "16300" : "16300",
          "16800" : "16800",
          "17300" : "17300",
          "17700" : "17700",
          "18400" : "18400",
          "18700" : "18700",
          "19400" : "19400",
          "19600" : "19600",
          "20000" : "20000",
          "20400" : "20400",
          "20800" : "20800",
          "21200" : "21200",
          "21600" : "21600",
          "22000" : "22000",
          "22400" : "22400",
          "22900" : "22900",
          "23400" : "23400",
          "23900" : "23900",
          "24400" : "24400",
          "24900" : "24900",
          "25400" : "25400",
          "26000" : "26000",
          "26600" : "26600",
          "27200" : "27200",
          "27800" : "27800",
          "28400" : "28400",
          "29000" : "29000",
          "29500" : "29500",
          "30000" : "30000"
        }
      },
      "incomeQualBaseTbl" : {
        "columns" : [ "annualEarnedIncome", "base" ],
        "rows" : [ [ "15000", "300" ], [ "17000", "300" ], [ "19000", "400" ], [ "21000", "400" ], [ "23000", "400" ], [ "25000", "600" ], [ "27000", "600" ], [ "29000", "600" ], [ "31000", "800" ], [ "33000", "800" ], [ "35000", "900" ], [ "37000", "1000" ], [ "39000", "1000" ], [ "41000", "1100" ], [ "43000", "1300" ], [ "45000", "1300" ], [ "47000", "1300" ], [ "50000", "1500" ], [ "52000", "1600" ], [ "54000", "1600" ], [ "56000", "1700" ], [ "58000", "1700" ], [ "60000", "2000" ], [ "62000", "2000" ], [ "64000", "2200" ], [ "66000", "2300" ], [ "68000", "2300" ], [ "70000", "2600" ], [ "72000", "2600" ], [ "75000", "2700" ], [ "80000", "3000" ], [ "85000", "3300" ], [ "90000", "3700" ], [ "95000", "3900" ], [ "100000", "4200" ], [ "105000", "4300" ], [ "110000", "4500" ], [ "115000", "4700" ], [ "120000", "5500" ], [ "125000", "5600" ], [ "130000", "5900" ], [ "135000", "6000" ], [ "140000", "6700" ], [ "145000", "6700" ], [ "150000", "6900" ], [ "155000", "6900" ], [ "160000", "7600" ], [ "165000", "7600" ], [ "170000", "7800" ], [ "175000", "7800" ], [ "180000", "8500" ], [ "185000", "8500" ], [ "190000", "8700" ], [ "195000", "8700" ], [ "200000", "9400" ], [ "210000", "9600" ], [ "220000", "9900" ], [ "230000", "10700" ], [ "240000", "10900" ], [ "250000", "11700" ], [ "260000", "11900" ], [ "270000", "12000" ], [ "280000", "12600" ], [ "290000", "12700" ], [ "300000", "13300" ], [ "325000", "13900" ], [ "350000", "15000" ], [ "375000", "15600" ], [ "400000", "16300" ], [ "425000", "16800" ], [ "450000", "17300" ], [ "475000", "17700" ], [ "500000", "18400" ], [ "525000", "18700" ], [ "550000", "19400" ], [ "575000", "19600" ], [ "600000", "20000" ], [ "625000", "20000" ], [ "650000", "20000" ], [ "675000", "20000" ], [ "700000", "20000" ], [ "725000", "20000" ], [ "750000", "20000" ], [ "775000", "20000" ], [ "800000", "20000" ], [ "825000", "20000" ], [ "850000", "20000" ], [ "875000", "20000" ], [ "900000", "20000" ], [ "925000", "20000" ], [ "950000", "20000" ], [ "975000", "20000" ], [ "1000000", "20000" ], [ "1050000", "20000" ], [ "1100000", "20000" ], [ "1150000", "20000" ], [ "1200000", "20000" ] ],
        "displayValues" : {
          "300" : "300",
          "400" : "400",
          "600" : "600",
          "800" : "800",
          "900" : "900",
          "1000" : "1000",
          "1100" : "1100",
          "1300" : "1300",
          "1500" : "1500",
          "1600" : "1600",
          "1700" : "1700",
          "2000" : "2000",
          "2200" : "2200",
          "2300" : "2300",
          "2600" : "2600",
          "2700" : "2700",
          "3000" : "3000",
          "3300" : "3300",
          "3700" : "3700",
          "3900" : "3900",
          "4200" : "4200",
          "4300" : "4300",
          "4500" : "4500",
          "4700" : "4700",
          "5500" : "5500",
          "5600" : "5600",
          "5900" : "5900",
          "6000" : "6000",
          "6700" : "6700",
          "6900" : "6900",
          "7600" : "7600",
          "7800" : "7800",
          "8500" : "8500",
          "8700" : "8700",
          "9400" : "9400",
          "9600" : "9600",
          "9900" : "9900",
          "10700" : "10700",
          "10900" : "10900",
          "11700" : "11700",
          "11900" : "11900",
          "12000" : "12000",
          "12600" : "12600",
          "12700" : "12700",
          "13300" : "13300",
          "13900" : "13900",
          "15000" : "15000",
          "15600" : "15600",
          "16300" : "16300",
          "16800" : "16800",
          "17300" : "17300",
          "17700" : "17700",
          "18400" : "18400",
          "18700" : "18700",
          "19400" : "19400",
          "19600" : "19600",
          "20000" : "20000"
        }
      },
      "incomeSeQualTotalTbl" : {
        "columns" : [ "annualEarnedIncome", "total" ],
        "rows" : [ [ "15000", "1000" ], [ "17000", "1100" ], [ "19000", "1200" ], [ "21000", "1300" ], [ "23000", "1400" ], [ "25000", "1500" ], [ "27000", "1600" ], [ "29000", "1700" ], [ "31000", "1900" ], [ "33000", "2200" ], [ "35000", "2500" ], [ "37000", "2500" ], [ "39000", "2600" ], [ "41000", "2600" ], [ "43000", "3000" ], [ "45000", "3000" ], [ "47000", "3100" ], [ "50000", "3500" ], [ "52000", "3500" ], [ "54000", "3500" ], [ "56000", "3600" ], [ "58000", "3900" ], [ "60000", "3900" ], [ "62000", "3900" ], [ "64000", "4000" ], [ "66000", "4000" ], [ "68000", "4300" ], [ "70000", "4300" ], [ "72000", "4400" ], [ "75000", "4800" ], [ "80000", "4900" ], [ "85000", "5100" ], [ "90000", "5100" ], [ "95000", "5300" ], [ "100000", "6000" ], [ "105000", "6000" ], [ "110000", "6100" ], [ "115000", "6100" ], [ "120000", "6700" ], [ "125000", "6900" ], [ "130000", "6900" ], [ "135000", "7600" ], [ "140000", "7600" ], [ "145000", "7800" ], [ "150000", "8500" ], [ "155000", "8500" ], [ "160000", "8700" ], [ "165000", "8700" ], [ "170000", "9400" ], [ "175000", "9600" ], [ "180000", "9600" ], [ "185000", "9900" ], [ "190000", "9900" ], [ "195000", "10700" ], [ "200000", "10900" ], [ "210000", "11600" ], [ "220000", "11900" ], [ "230000", "12000" ], [ "240000", "12600" ], [ "250000", "13300" ], [ "260000", "13300" ], [ "270000", "13300" ], [ "280000", "13900" ], [ "290000", "13900" ], [ "300000", "15000" ], [ "325000", "15600" ], [ "350000", "16300" ], [ "375000", "17300" ], [ "400000", "17700" ], [ "425000", "18400" ], [ "450000", "18700" ], [ "475000", "19400" ], [ "500000", "20000" ], [ "525000", "20000" ], [ "550000", "20000" ], [ "575000", "20000" ], [ "600000", "20000" ], [ "625000", "20000" ], [ "650000", "20000" ], [ "675000", "20000" ], [ "700000", "20000" ], [ "725000", "20000" ], [ "750000", "20000" ], [ "775000", "20000" ], [ "800000", "20000" ], [ "825000", "20000" ], [ "850000", "20000" ], [ "875000", "20000" ], [ "900000", "20000" ], [ "925000", "20000" ], [ "950000", "20000" ], [ "975000", "20000" ], [ "1000000", "20000" ], [ "1050000", "20000" ], [ "1100000", "20000" ], [ "1150000", "20000" ], [ "1200000", "20000" ] ],
        "displayValues" : {
          "1000" : "1000",
          "1100" : "1100",
          "1200" : "1200",
          "1300" : "1300",
          "1400" : "1400",
          "1500" : "1500",
          "1600" : "1600",
          "1700" : "1700",
          "1900" : "1900",
          "2200" : "2200",
          "2500" : "2500",
          "2600" : "2600",
          "3000" : "3000",
          "3100" : "3100",
          "3500" : "3500",
          "3600" : "3600",
          "3900" : "3900",
          "4000" : "4000",
          "4300" : "4300",
          "4400" : "4400",
          "4800" : "4800",
          "4900" : "4900",
          "5100" : "5100",
          "5300" : "5300",
          "6000" : "6000",
          "6100" : "6100",
          "6700" : "6700",
          "6900" : "6900",
          "7600" : "7600",
          "7800" : "7800",
          "8500" : "8500",
          "8700" : "8700",
          "9400" : "9400",
          "9600" : "9600",
          "9900" : "9900",
          "10700" : "10700",
          "10900" : "10900",
          "11600" : "11600",
          "11900" : "11900",
          "12000" : "12000",
          "12600" : "12600",
          "13300" : "13300",
          "13900" : "13900",
          "15000" : "15000",
          "15600" : "15600",
          "16300" : "16300",
          "17300" : "17300",
          "17700" : "17700",
          "18400" : "18400",
          "18700" : "18700",
          "19400" : "19400",
          "20000" : "20000"
        }
      },
      "incomeErQualTotalTbl" : {
        "columns" : [ "annualEarnedIncome", "total" ],
        "rows" : [ [ "15000", "1100" ], [ "17000", "1200" ], [ "19000", "1300" ], [ "21000", "1400" ], [ "23000", "1500" ], [ "25000", "1600" ], [ "27000", "1700" ], [ "29000", "1800" ], [ "31000", "2000" ], [ "33000", "2100" ], [ "35000", "2300" ], [ "37000", "2500" ], [ "39000", "2500" ], [ "41000", "2800" ], [ "43000", "2800" ], [ "45000", "3000" ], [ "47000", "3000" ], [ "50000", "3400" ], [ "52000", "3600" ], [ "54000", "3600" ], [ "56000", "3700" ], [ "58000", "3700" ], [ "60000", "4200" ], [ "62000", "4200" ], [ "64000", "4200" ], [ "66000", "4300" ], [ "68000", "4300" ], [ "70000", "4800" ], [ "72000", "4800" ], [ "75000", "5000" ], [ "80000", "5500" ], [ "85000", "5600" ], [ "90000", "5900" ], [ "95000", "6100" ], [ "100000", "6400" ], [ "105000", "6400" ], [ "110000", "6700" ], [ "115000", "6700" ], [ "120000", "7500" ], [ "125000", "7500" ], [ "130000", "7700" ], [ "135000", "7700" ], [ "140000", "8500" ], [ "145000", "8500" ], [ "150000", "8700" ], [ "155000", "8700" ], [ "160000", "9500" ], [ "165000", "9500" ], [ "170000", "9800" ], [ "175000", "9800" ], [ "180000", "10600" ], [ "185000", "10600" ], [ "190000", "10900" ], [ "195000", "10900" ], [ "200000", "11700" ], [ "210000", "12000" ], [ "220000", "12300" ], [ "230000", "13300" ], [ "240000", "13600" ], [ "250000", "14600" ], [ "260000", "14700" ], [ "270000", "14800" ], [ "280000", "15500" ], [ "290000", "15600" ], [ "300000", "16200" ], [ "325000", "16800" ], [ "350000", "18100" ], [ "375000", "18700" ], [ "400000", "19900" ], [ "425000", "20000" ], [ "450000", "20000" ], [ "475000", "20000" ], [ "500000", "20000" ], [ "525000", "20000" ], [ "550000", "20000" ], [ "575000", "20000" ], [ "600000", "20000" ], [ "625000", "20000" ], [ "650000", "20000" ], [ "675000", "20000" ], [ "700000", "20000" ], [ "725000", "20000" ], [ "750000", "20000" ], [ "775000", "20000" ], [ "800000", "20000" ], [ "825000", "20000" ], [ "850000", "20000" ], [ "875000", "20000" ], [ "900000", "20000" ], [ "925000", "20000" ], [ "950000", "20000" ], [ "975000", "20000" ], [ "1000000", "20000" ], [ "1050000", "20000" ], [ "1100000", "20000" ], [ "1150000", "20000" ], [ "1200000", "20000" ] ],
        "displayValues" : {
          "1100" : "1100",
          "1200" : "1200",
          "1300" : "1300",
          "1400" : "1400",
          "1500" : "1500",
          "1600" : "1600",
          "1700" : "1700",
          "1800" : "1800",
          "2000" : "2000",
          "2100" : "2100",
          "2300" : "2300",
          "2500" : "2500",
          "2800" : "2800",
          "3000" : "3000",
          "3400" : "3400",
          "3600" : "3600",
          "3700" : "3700",
          "4200" : "4200",
          "4300" : "4300",
          "4800" : "4800",
          "5000" : "5000",
          "5500" : "5500",
          "5600" : "5600",
          "5900" : "5900",
          "6100" : "6100",
          "6400" : "6400",
          "6700" : "6700",
          "7500" : "7500",
          "7700" : "7700",
          "8500" : "8500",
          "8700" : "8700",
          "9500" : "9500",
          "9800" : "9800",
          "10600" : "10600",
          "10900" : "10900",
          "11700" : "11700",
          "12000" : "12000",
          "12300" : "12300",
          "13300" : "13300",
          "13600" : "13600",
          "14600" : "14600",
          "14700" : "14700",
          "14800" : "14800",
          "15500" : "15500",
          "15600" : "15600",
          "16200" : "16200",
          "16800" : "16800",
          "18100" : "18100",
          "18700" : "18700",
          "19900" : "19900",
          "20000" : "20000"
        }
      },
      "incomeQualTotalTbl" : {
        "columns" : [ "annualEarnedIncome", "total" ],
        "rows" : [ [ "15000", "1000" ], [ "17000", "1100" ], [ "19000", "1200" ], [ "21000", "1300" ], [ "23000", "1400" ], [ "25000", "1500" ], [ "27000", "1600" ], [ "29000", "1700" ], [ "31000", "1900" ], [ "33000", "1900" ], [ "35000", "2100" ], [ "37000", "2200" ], [ "39000", "2200" ], [ "41000", "2500" ], [ "43000", "2500" ], [ "45000", "2600" ], [ "47000", "2600" ], [ "50000", "2900" ], [ "52000", "3000" ], [ "54000", "3000" ], [ "56000", "3100" ], [ "58000", "3100" ], [ "60000", "3500" ], [ "62000", "3500" ], [ "64000", "3500" ], [ "66000", "3600" ], [ "68000", "3600" ], [ "70000", "3900" ], [ "72000", "3900" ], [ "75000", "4000" ], [ "80000", "4300" ], [ "85000", "4400" ], [ "90000", "4800" ], [ "95000", "4900" ], [ "100000", "5100" ], [ "105000", "5100" ], [ "110000", "5300" ], [ "115000", "5300" ], [ "120000", "6000" ], [ "125000", "6000" ], [ "130000", "6100" ], [ "135000", "6100" ], [ "140000", "6700" ], [ "145000", "6700" ], [ "150000", "6900" ], [ "155000", "6900" ], [ "160000", "7600" ], [ "165000", "7600" ], [ "170000", "7800" ], [ "175000", "7800" ], [ "180000", "8500" ], [ "185000", "8500" ], [ "190000", "8700" ], [ "195000", "8700" ], [ "200000", "9400" ], [ "210000", "9600" ], [ "220000", "9900" ], [ "230000", "10700" ], [ "240000", "10900" ], [ "250000", "11700" ], [ "260000", "11900" ], [ "270000", "12000" ], [ "280000", "12600" ], [ "290000", "12700" ], [ "300000", "13300" ], [ "325000", "13900" ], [ "350000", "15000" ], [ "375000", "15600" ], [ "400000", "16300" ], [ "425000", "16800" ], [ "450000", "17300" ], [ "475000", "17700" ], [ "500000", "18400" ], [ "525000", "18700" ], [ "550000", "19400" ], [ "575000", "19600" ], [ "600000", "20000" ], [ "625000", "20000" ], [ "650000", "20000" ], [ "675000", "20000" ], [ "700000", "20000" ], [ "725000", "20000" ], [ "750000", "20000" ], [ "775000", "20000" ], [ "800000", "20000" ], [ "825000", "20000" ], [ "850000", "20000" ], [ "875000", "20000" ], [ "900000", "20000" ], [ "925000", "20000" ], [ "950000", "20000" ], [ "975000", "20000" ], [ "1000000", "20000" ], [ "1050000", "20000" ], [ "1100000", "20000" ], [ "1150000", "20000" ], [ "1200000", "20000" ] ],
        "displayValues" : {
          "1000" : "1000",
          "1100" : "1100",
          "1200" : "1200",
          "1300" : "1300",
          "1400" : "1400",
          "1500" : "1500",
          "1600" : "1600",
          "1700" : "1700",
          "1900" : "1900",
          "2100" : "2100",
          "2200" : "2200",
          "2500" : "2500",
          "2600" : "2600",
          "2900" : "2900",
          "3000" : "3000",
          "3100" : "3100",
          "3500" : "3500",
          "3600" : "3600",
          "3900" : "3900",
          "4000" : "4000",
          "4300" : "4300",
          "4400" : "4400",
          "4800" : "4800",
          "4900" : "4900",
          "5100" : "5100",
          "5300" : "5300",
          "6000" : "6000",
          "6100" : "6100",
          "6700" : "6700",
          "6900" : "6900",
          "7600" : "7600",
          "7800" : "7800",
          "8500" : "8500",
          "8700" : "8700",
          "9400" : "9400",
          "9600" : "9600",
          "9900" : "9900",
          "10700" : "10700",
          "10900" : "10900",
          "11700" : "11700",
          "11900" : "11900",
          "12000" : "12000",
          "12600" : "12600",
          "12700" : "12700",
          "13300" : "13300",
          "13900" : "13900",
          "15000" : "15000",
          "15600" : "15600",
          "16300" : "16300",
          "16800" : "16800",
          "17300" : "17300",
          "17700" : "17700",
          "18400" : "18400",
          "18700" : "18700",
          "19400" : "19400",
          "19600" : "19600",
          "20000" : "20000"
        }
      },
      "incomeGrpEESe" : {
        "columns" : [ "annualEarnedIncome", "total" ],
        "rows" : [ [ "15000", "1000" ], [ "17000", "1100" ], [ "19000", "1200" ], [ "21000", "1300" ], [ "23000", "1400" ], [ "25000", "1500" ], [ "27000", "1600" ], [ "29000", "1700" ], [ "31000", "1900" ], [ "33000", "2200" ], [ "35000", "2500" ], [ "37000", "2500" ], [ "39000", "2600" ], [ "41000", "2600" ], [ "43000", "3000" ], [ "45000", "3000" ], [ "47000", "3100" ], [ "50000", "3500" ], [ "52000", "3500" ], [ "54000", "3500" ], [ "56000", "3600" ], [ "58000", "3900" ], [ "60000", "3900" ], [ "62000", "3900" ], [ "64000", "4000" ], [ "66000", "4000" ], [ "68000", "4300" ], [ "70000", "4300" ], [ "72000", "4400" ], [ "75000", "4800" ], [ "80000", "4900" ], [ "85000", "5100" ], [ "90000", "5100" ], [ "95000", "5300" ], [ "100000", "6000" ], [ "105000", "6000" ], [ "110000", "6100" ], [ "115000", "6100" ], [ "120000", "6700" ], [ "125000", "6900" ], [ "130000", "7000" ], [ "135000", "7600" ], [ "140000", "7700" ], [ "145000", "7800" ], [ "150000", "8500" ], [ "155000", "8600" ], [ "160000", "8700" ], [ "165000", "8900" ], [ "170000", "9400" ], [ "175000", "9600" ], [ "180000", "9600" ], [ "185000", "9900" ], [ "190000", "9900" ], [ "195000", "10700" ], [ "200000", "10900" ], [ "210000", "11600" ], [ "220000", "11900" ], [ "230000", "12000" ], [ "240000", "12600" ], [ "250000", "13300" ], [ "260000", "13300" ], [ "270000", "13300" ], [ "280000", "13900" ], [ "290000", "13900" ], [ "300000", "15000" ], [ "325000", "15600" ], [ "350000", "16300" ], [ "375000", "17300" ], [ "400000", "17700" ], [ "425000", "18400" ], [ "450000", "18700" ], [ "475000", "19400" ], [ "500000", "20000" ], [ "525000", "20400" ], [ "550000", "20800" ], [ "575000", "21200" ], [ "600000", "21600" ], [ "625000", "22400" ], [ "650000", "22800" ], [ "675000", "23200" ], [ "700000", "23600" ], [ "725000", "24000" ], [ "750000", "24400" ], [ "775000", "24900" ], [ "800000", "25400" ], [ "825000", "25900" ], [ "850000", "26400" ], [ "875000", "26900" ], [ "900000", "27400" ], [ "925000", "28000" ], [ "950000", "28600" ], [ "975000", "29200" ], [ "1000000", "29800" ], [ "1050000", "30000" ], [ "1100000", "30000" ], [ "1150000", "30000" ], [ "1200000", "30000" ] ],
        "displayValues" : {
          "1000" : "1000",
          "1100" : "1100",
          "1200" : "1200",
          "1300" : "1300",
          "1400" : "1400",
          "1500" : "1500",
          "1600" : "1600",
          "1700" : "1700",
          "1900" : "1900",
          "2200" : "2200",
          "2500" : "2500",
          "2600" : "2600",
          "3000" : "3000",
          "3100" : "3100",
          "3500" : "3500",
          "3600" : "3600",
          "3900" : "3900",
          "4000" : "4000",
          "4300" : "4300",
          "4400" : "4400",
          "4800" : "4800",
          "4900" : "4900",
          "5100" : "5100",
          "5300" : "5300",
          "6000" : "6000",
          "6100" : "6100",
          "6700" : "6700",
          "6900" : "6900",
          "7000" : "7000",
          "7600" : "7600",
          "7700" : "7700",
          "7800" : "7800",
          "8500" : "8500",
          "8600" : "8600",
          "8700" : "8700",
          "8900" : "8900",
          "9400" : "9400",
          "9600" : "9600",
          "9900" : "9900",
          "10700" : "10700",
          "10900" : "10900",
          "11600" : "11600",
          "11900" : "11900",
          "12000" : "12000",
          "12600" : "12600",
          "13300" : "13300",
          "13900" : "13900",
          "15000" : "15000",
          "15600" : "15600",
          "16300" : "16300",
          "17300" : "17300",
          "17700" : "17700",
          "18400" : "18400",
          "18700" : "18700",
          "19400" : "19400",
          "20000" : "20000",
          "20400" : "20400",
          "20800" : "20800",
          "21200" : "21200",
          "21600" : "21600",
          "22400" : "22400",
          "22800" : "22800",
          "23200" : "23200",
          "23600" : "23600",
          "24000" : "24000",
          "24400" : "24400",
          "24900" : "24900",
          "25400" : "25400",
          "25900" : "25900",
          "26400" : "26400",
          "26900" : "26900",
          "27400" : "27400",
          "28000" : "28000",
          "28600" : "28600",
          "29200" : "29200",
          "29800" : "29800",
          "30000" : "30000"
        }
      },
      "studentMaxTbl" : {
        "columns" : [ "occupationSpecialty", "maxBenefit" ],
        "rows" : [ [ "ACCOUNTANTS", "3000" ], [ "AUDIOLOGISTS", "4000" ], [ "CHIROPRACTORS", "4000" ], [ "DENTISTS", "4000" ], [ "ENGINEER_ARCHITECTS", "4000" ], [ "ATTORNEY_LAWYER", "4000" ], [ "NURSE_ANESTHETISTS_NURSE_MIDWIVES_NURSE_PRACTITIONERS", "4000" ], [ "OPTOMETRISTS", "4000" ], [ "PHARMACISTS", "4000" ], [ "PHYSICIAN_ASSISTANTS", "3000" ], [ "PHYSICIANS", "7500" ], [ "PODIATRISTS", "2500" ], [ "VETERINARIANS_SMALL_ANIMAL", "4000" ], [ "VETERINARIANS_LARGE_ANIMAL", "4000" ] ],
        "displayValues" : {
          "3000" : "3000",
          "4000" : "4000",
          "7500" : "7500",
          "2500" : "2500"
        }
      },
      "occSpecTbl" : {
        "columns" : [ "occupationDescription", "occupationSpecialty" ],
        "rows" : [ [ "MISC_OCCUPATION", "OCC_CLASS_6A" ], [ "MISC_OCCUPATION", "OCC_CLASS_5A" ], [ "MISC_OCCUPATION", "OCC_CLASS_4A" ], [ "MISC_OCCUPATION", "OCC_CLASS_3A" ], [ "MISC_OCCUPATION", "OCC_CLASS_2A" ], [ "MISC_OCCUPATION", "OCC_CLASS_1A" ], [ "MISC_OCCUPATION", "OCC_CLASS_5M" ], [ "MISC_OCCUPATION", "OCC_CLASS_4M" ], [ "MISC_OCCUPATION", "OCC_CLASS_3M" ], [ "MISC_OCCUPATION", "OCC_CLASS_2M" ], [ "ACCOUNTANT", "ACCOUNTANT__4_YEAR_ACCOUNTING_DEGREE__AUDITOR_OR_CPA" ], [ "ACCOUNTANT", "OTHER_ACCOUNTANT_BOOKKEEPER" ], [ "ACTUARY", "ACTUARY" ], [ "ADVERTISING_MARKETING", "ADVERTISING_MARKETING___ACCOUNT_EXECUTIVE_ACCOUNT_MANAGER" ], [ "ADVERTISING_MARKETING", "ADVERTISING_MARKETING___COPYWRITER" ], [ "ADVERTISING_MARKETING", "ADVERTISING_MARKETING___FREELANCE__W__DOCUMENTED_INCOME" ], [ "ANIMALS", "ANIMAL_HANDLERS__ZOO_" ], [ "ANIMALS", "DOG_CAT_BREEDER" ], [ "ANIMALS", "DOG_TRAINER_W__DOCUMENTED_INCOME" ], [ "ANIMALS", "DOGWALKER_SITTER___IN_HOUSE" ], [ "ANIMALS", "KENNEL_DAY_CARE_OPERATOR__NOT_IN_HOME_" ], [ "ANIMALS", "OTHER_ZOO_WORKERS" ], [ "ANIMALS", "PET_GROOMER_PET_SHOP_WORKER__MOBILE_GROOMER" ], [ "ARCHITECT", "ARCHITECT___ALL_OTHERS__90__OFFICE_AND_CONSULTING_" ], [ "ARCHITECT", "ARCHITECT___BACHELOR_S_DEGREE" ], [ "ARMED_FORCES_PERSONNEL", "ACTIVE_DUTY_MILITARY" ], [ "ART_DEALER_GALLERY_OWNER_MUSEUM_CURATOR", "ART_DEALER_GALLERY_OWNER_CURATOR_AT_LEAST__45_000_INCOME_EACH_OF_LAST_TWO_YEARS" ], [ "ARTIST", "CARTOONIST_ILLUSTRATOR__SALARIED_OR_SE_W___35K_NET_" ], [ "ARTIST", "COMMERCIAL_ARTIST_GRAPHIC_ARTIST_COMMERCIAL_DESIGNER__SALARIED__OR_SE_W___35K_NET_" ], [ "ARTIST", "PICTURE_FRAMER" ], [ "ASTROLOGER", "ASTROLOGER" ], [ "ATHLETICS", "COLLEGIATE_ATHLETIC_DIRECTOR" ], [ "ATHLETICS", "PROFESSION_OR_COLLEGIATE_FT_REFEREE__IF_PT__ISSUE_1_OCC_CLASS_LOWER_THAN_FT_OCC_" ], [ "ATHLETICS", "PROFESSIONAL_ATHLETE_JOCKEY" ], [ "ATHLETICS", "PROFESSIONAL_OR_COLLEGIATE_ATHLETIC_TRAINER" ], [ "ATHLETICS", "PROFESSIONAL_OR_COLLEGIATE_COACH" ], [ "ATHLETICS", "UNDER_18_NON_PROFESSIONAL_COACH" ], [ "ATHLETICS", "UNDER_18_NON_PROFESSIONAL_FT_REFEREE__IF_PT__ISSUE_1_OCC_CLASS_LOWER_THAN_FT_OCC_" ], [ "AUTO_SALVAGE_WORKERS", "AUTO_SALVAGE_WORKERS" ], [ "AUTOMOBILE_DEALERSHIP", "AUTO_DEALERSHIP___GENERAL_MANAGER_FINANCE_MANAGER_BUSINESS_MANAGER" ], [ "AUTOMOBILE_DEALERSHIP", "AUTO_DEALERSHIP___OWNER__ADMINISTRATIVE_DUTIES_ONLY" ], [ "AUTOMOBILE_DEALERSHIP", "AUTO_DEALERSHIP___SALESPERSON_SALES_MANAGER" ], [ "AUTOMOBILE_DEALERSHIP", "AUTO_DEALERSIP___WASHER_POLISHER" ], [ "AVIATION", "AIR_TRAFFIC_CONTROL_SPECIALIST" ], [ "AVIATION", "CROP_DUSTER_OTHER_PILOTS" ], [ "AVIATION", "FLIGHT_ATTENDANT_STEWARD_STEWARDESS" ], [ "AVIATION", "FREIGHT_OR_BAGGAGE_HANDLER_BELLHOP_PORTER" ], [ "AVIATION", "OTHER_ON_GROUND_AVIATION_PERSONNEL" ], [ "AVIATION", "PILOT_OFFICER__COMMERCIAL_SCHEDULED_AIRLINE" ], [ "AVIATION", "PILOT_OFFICER__CORPORATION_OR_EXECUTIVE_CARRIERS" ], [ "AVIATION", "PILOT_OFFICER__NONSCHEDULED_AIRLINE_CHARTER" ], [ "AVIATION", "TICKET_AGENT_ADMINISTRATIVE_PERSONNEL" ], [ "BAILBONDSMAN", "BAILBONDSMAN" ], [ "BAILBONDSMAN", "BAILBONDSMAN___OFFICE_DUTIES_ONLY__NO_FIREARM" ], [ "BAILBONDSMAN", "BAILBONDSMAN___OFFICE_DUTIES_ONLY__WITH_FIREARM" ], [ "BAKERY", "BAKER" ], [ "BAKERY", "BAKERY___SUPERVISORY___ADMINISTRATIVE_DUTIES_ONLY__OWNER" ], [ "BAKERY", "BAKERY_DELIVERY" ], [ "BANKING", "BANK_CASHIER_TELLER" ], [ "BANKING", "BANKING_OFFICER__EXECUTIVE__BANK_EXAMINER" ], [ "BANKING", "PERSONAL_BANKER__MORTGAGE_LOAN_OFFICER__LOAN_ORIGINATOR_CREDIT_ANALYST" ], [ "BARBER_BEAUTICIAN", "BARBER" ], [ "BARBER_BEAUTICIAN", "COSMETOLOGIST_HAIRSTYLIST__W_2_OR_RENTING_BOOTH_" ], [ "BARBER_BEAUTICIAN", "ESTHETICIAN__ELECTROLOGIST_MANICURIST_MAKEUP_ARTIST" ], [ "BARTENDER", "BARTENDER__FT_OR_PT_" ], [ "BROKER", "COMMODITIES_FUTURES_OPTIONS_FLOOR_TRADER" ], [ "BROKER", "COMMODITIES_FUTURES_OPTIONS_OTHER_BROKER" ], [ "BROKER", "OTHER_BROKER___2_YEARS_EXPERIENCE" ], [ "BROKER", "OTHER_BROKER___LESS_THAN_2_YEARS_EXPERIENCE" ], [ "BROKER", "STOCKS_BONDS_BROKER___2_YEARS_EXPERIENCE" ], [ "BROKER", "STOCKS_BONDS_FLOOR_TRADER_DAYTRADER" ], [ "BROKER", "STOCKS_BONDS_OTHER_BROKER" ], [ "BUTCHER", "BUTCHER" ], [ "BUTLER", "BUTLER_PERSONAL_ASSISTANT__W_2_ONLY_" ], [ "CALL_CENTER_WORKERS", "CALL_CENTER_WORKERS" ], [ "CARPET_CLEANER_OR_INSTALLER", "CARPET_CLEANER_OR_INSTALLER" ], [ "CARTOGRAPHER", "CARTOGRAPHER" ], [ "CASINO_WORKERS", "CASINO___OTHERS" ], [ "CASINO_WORKERS", "CASINO_CASHIER__NOT_ON_FLOOR_" ], [ "CASINO_WORKERS", "CASINO_DEALERS_PIT_BOSS_WORKERS_ON_FLOOR__MINIMUM_ONE_YEAR_WITH_EMPLOYER_" ], [ "CASINO_WORKERS", "CASINO_MANAGER_SUPERVISOR_OPERATOR__NO_FLOOR_DUTIES_" ], [ "CASINO_WORKERS", "CASINO_SECURITY__FIREARM" ], [ "CASINO_WORKERS", "CASINO_SECURITY__NO_FIREARM" ], [ "CATERER", "CATERER" ], [ "CHEMICAL_INDUSTRY", "CHEMICAL_INDUSTRY___ALL_OTHER_WORKERS__ACIDS__ALKALIS__CARCINOGENS__OR_EXPLOSIVES_" ], [ "CHEMICAL_INDUSTRY", "CHEMICAL_INDUSTRY___LAB_TECHNICIAN__NO_ACIDS__ALKALIS__CARCINOGENS__OR_EXPLOSIVES_" ], [ "CHEMICAL_INDUSTRY", "CHEMICAL_INDUSTRY___MACHINE_OPERATOR__FLOOR_WORKER__NO_ACIDS__ALKALIS__CARCINOGENS__OR_EXPLOSIVES_" ], [ "CHEMICAL_INDUSTRY", "CHEMICAL_INDUSTRY___SKILLED_WORKER__NO_ACIDS__ALKALIS__CARCINOGENS__OR_EXPLOSIVES_" ], [ "CHEMICAL_INDUSTRY", "CHEMICAL_INDUSTRY___TESTER__NO_ACIDS__ALKALIS__CARCINOGENS__OR_EXPLOSIVES_" ], [ "CHIMNEYSWEEP", "CHIMNEYSWEEP" ], [ "CIRCUS_CARNIVAL_WORKERS", "CIRCUS_CARNIVAL_WORKERS" ], [ "CIVIC_CENTERS_CONVENTION_CENTERS_ARENAS", "CIVIC_CENTERS_CONVENTION_CENTERS_ARENAS___ADMINISTRATOR_MANAGER" ], [ "CIVIC_CENTERS_CONVENTION_CENTERS_ARENAS", "CIVIC_CENTERS_CONVENTION_CENTERS_ARENAS___CLERICAL_OFFICE_PERSONNEL" ], [ "CIVIC_CENTERS_CONVENTION_CENTERS_ARENAS", "CIVIC_CENTERS_CONVENTION_CENTERS_ARENAS___CONCESSION_WORKERS" ], [ "CIVIC_CENTERS_CONVENTION_CENTERS_ARENAS", "CIVIC_CENTERS_CONVENTION_CENTERS_ARENAS___PRODUCTION_WORKERS__LIGHTS__PROPERTY__SOUND_" ], [ "CLEANING", "CLEANERS___SUPERVISORY_ADMINISTRATIVE_DUTIES_ONLY" ], [ "CLEANING", "CUSTODIANS_JANITORS_OTHER_CLEAN_UP_WORKERS" ], [ "CLEANING", "POOL_CLEANER__INSTALLER" ], [ "CLEANING", "WINDOW_CLEANER__2_STORIES_OR_LESS_" ], [ "CLEANING", "WINDOW_CLEANER__MORE_THAN_2_STORIES_" ], [ "CLERGY", "MINISTER_RABBI_PASTOR" ], [ "CLERGY", "MISSIONARY__SALARIED_AND___90_DAYS__YR_OUT_OF_US_" ], [ "CLERICAL", "CLERICAL___GENERAL" ], [ "CLERICAL", "CLERICAL___INVENTORY_CONTROL" ], [ "CLERICAL", "CLERICAL___QUALITY_CONTROL" ], [ "CLERICAL", "DATA_ENTRY" ], [ "CLERICAL", "PARTS_OR_STOCK_CLERK" ], [ "CLERICAL", "SHIPPING_AND_RECEIVING__NO_FREIGHT_HANDLING_" ], [ "CLOTHING_INDUSTRY", "CLOTH_CLOTHING_FASHION_DESIGNER" ], [ "CLOTHING_INDUSTRY", "FASHION_MODEL" ], [ "CLOTHING_INDUSTRY", "TAILOR_DRESSMAKER_SEAMSTRESS" ], [ "COMPUTER_INDUSTRY", "IT___ADMINISTRATOR__CAPACITY_MANAGEMENT_SPECIALIST" ], [ "COMPUTER_INDUSTRY", "IT___ENGINEER_ARCHITECT__PROGRAMMER__SYSTEM_ANALYST__WEB_DEVELOPER" ], [ "COMPUTER_INDUSTRY", "IT___HELP_DESK_WORKER__TECHNICAL_SUPPORT_STAFF" ], [ "CONSTRUCTION", "ASBESTOS_REMOVAL_WORKERS" ], [ "CONSTRUCTION", "BRIDGE_PAINTER" ], [ "CONSTRUCTION", "BRIDGE_STRUCTURAL_STEEL_WORKERS_WELDERS" ], [ "CONSTRUCTION", "CARPENTRY__WOODWORKER_CABINET_MAKER" ], [ "CONSTRUCTION", "CONSTRUCTION_JOB_SUPERVISOR_FOREMAN" ], [ "CONSTRUCTION", "DRY_WALL_WORKER_PLASTERER" ], [ "CONSTRUCTION", "EXPLOSIVE_HANDLER_BLASTER" ], [ "CONSTRUCTION", "FLAT_ROOF_WORKERS_ONLY" ], [ "CONSTRUCTION", "FLOOR_COVERING_LAYER_LINOLEUM___CARPET_WORKER" ], [ "CONSTRUCTION", "FOUNDRY" ], [ "CONSTRUCTION", "GENERAL_LABORER_CLEAN_UP__DEMOLITION_WORKER" ], [ "CONSTRUCTION", "HANDYMAN_WITH_DEMOLITION__ROOFING__LADDERS" ], [ "CONSTRUCTION", "HANDYMAN_WITHOUT_DEMOLITION__ROOFING__LADDERS" ], [ "CONSTRUCTION", "HEAVY_EQUIPMENT_OPERATOR__GRADER_BULLDOZER_EARTH_MOVER_CRANE_" ], [ "CONSTRUCTION", "HIGHWAY__ROAD_OR_STREET_CONSTRUCTION_WORKER_LABORER" ], [ "CONSTRUCTION", "INSULATION_WORKER" ], [ "CONSTRUCTION", "MASON_BRICKWORKER_CEMENT_WORKER_TILESETTER" ], [ "CONSTRUCTION", "MONUMENT_WORKER_STONE_CARVER" ], [ "CONSTRUCTION", "PAINTER__EXTERIOR_NON_RESIDENTIAL__WORKING_GREATER_THAN_2_STORIES" ], [ "CONSTRUCTION", "PAINTER__EXTERIOR_NON_RESIDENTIAL__WORKING_LESS_THAN_2_STORIES" ], [ "CONSTRUCTION", "PAINTER__INTERIOR_" ], [ "CONSTRUCTION", "PAPERHANGER" ], [ "CONSTRUCTION", "ROOFER__ANY_WORK_ON_PITCHED_ROOFS" ], [ "CONSTRUCTION", "ROOFING_CONTRACTOR___NO_LABOR" ], [ "CONSTRUCTION", "SANDBLASTER" ], [ "CONSTRUCTION", "SEWER_CONSTRUCTION__EXCEPT_TUNNEL_" ], [ "CONSTRUCTION", "SHEET_METAL_WORKER" ], [ "CONSTRUCTION", "STEEPLEJACK" ], [ "CONSTRUCTION", "SUPERINTENDENT_BUILDING_CONTRACTOR" ], [ "CONSTRUCTION", "TOWER_ERECTORS" ], [ "CONSTRUCTION", "TUNNEL_WORKERS__SHAFT_OR_SUBWAY_" ], [ "CONSTRUCTION", "UPHOLSTERER" ], [ "CONSTRUCTION", "WELDER__IN_CONSTRUCTION_INDUSTRY_" ], [ "CONSULTANT_LOBBYIST", "CONSULTANT_LOBBYIST" ], [ "CONSULTANT_LOBBYIST", "CONSULTANT_LOBBYIST___IT_COMPUTER_SCIENCE_DEGREE_ONLY" ], [ "CORPORATE_OFFICER_EXECUTIVE", "CORPORATE_OFFICER_EXECUTIVE___ADMIN_DUTIES_ONLY__AT_LEAST__100_000_INCOME" ], [ "CORPORATE_OFFICER_EXECUTIVE", "CORPORATE_OFFICER_EXECUTIVE___ALL_OTHERS" ], [ "DAY_CARE__NON_HOME", "DAY_CARE___NOT_IN_HOME_OR_ON_PROPERTY" ], [ "DAY_CARE__NON_HOME", "DAY_CARE___NOT_IN_HOME_OR_ON_PROPERTY__OWNER_DIRECTOR__ADMINISTRATIVE_DUTIES_ONLY_" ], [ "DAY_CARE_HOME_BASED", "DAY_CARE__HOME_BASED_____OWNER_MUST_BE_ST_LICENSED__AT_LEAST_2_YRS_IN_BUSINESS_W__TAX_FORMS__MIN_3_CHILD_UNRELATED_TO_PROVIDER_" ], [ "DAY_CARE_HOME_BASED", "NANNY_AU_PAIR" ], [ "DISPATCHER", "AUTO_BUS_TRUCK_TAXI_DISPATCHER__OFFICE_DUTIES_ONLY_" ], [ "DIVER", "SCUBA_TEACHER_POLICE_SEARCH_DIVER_OTHER_DIVERS" ], [ "DRIVER", "ARMORED_CAR_DRIVER" ], [ "DRIVER", "DELIVERY_OR_ROUTE_DRIVER" ], [ "DRIVER", "DRIVING_INSTRUCTOR" ], [ "DRIVER", "EMERGENCY_VEHICLE__TOW_TRUCK_DRIVER" ], [ "DRIVER", "FORK_LIFT_OPERATOR" ], [ "DRIVER", "GARBAGE_SANITATION_TRUCK_DRIVER" ], [ "DRIVER", "RACING__ALL_TYPES_" ], [ "DRIVER", "TAXICAB_BUS_LIMOSINE__ONLY_IF_W_2_EMPLOYEES_" ], [ "DRIVER", "TRACTOR_TRAILER_TRUCK___TWO_OR_MORE_AXLES" ], [ "DRIVER", "UBER__LYFT_DRIVER__LIMO__FT_OR___10_HRS_WEEK" ], [ "DRIVER", "VALET_CAR_PARK__HOTEL__RESTAURANT__CASINO_" ], [ "DRY_CLEANING_LAUNDRY", "DRY_CLEANING_LAUNDRY_OWNER_MANAGER_SUPERVISOR" ], [ "DRY_CLEANING_LAUNDRY", "DRY_CLEANING_LAUNDRY_WORKERS" ], [ "ECONOMIST", "ECONOMIST" ], [ "ELECTRICAL_INDUSTRY", "ELECTRICAL_INDUSTRY___FIELD_SUPERVISOR_ESTIMATOR" ], [ "ELECTRICAL_INDUSTRY", "ELECTRICIAN" ], [ "ELECTRICAL_INDUSTRY", "METER_INSTALLER" ], [ "ELECTRICAL_INDUSTRY", "METER_READER_OR_INSPECTOR" ], [ "ELECTRICAL_INDUSTRY", "OVERHEAD_LINES_CONDUITS_TUNNELS" ], [ "ENERGY_INDUSTRY", "ELECTRIC_SOLAR_NUCLEAR_OIL_GAS___MANAGER_SUPERVISOR_ENGINEER__OFFICE_DUTIES_ONLY_" ], [ "ENERGY_INDUSTRY", "ELECTRIC_SOLAR_NUCLEAR_OIL_GAS___OTHER_EMPLOYEES" ], [ "ENGINEER", "BIOMEDICAL_ENGINEER" ], [ "ENGINEER", "ENGINEER___INSPECTOR_SUPERVISOR__WITH_FIELD_DUTIES_" ], [ "ENGINEER", "MECHANICAL_ELECTRICAL_STRUCTURAL_RPE___OTHER_PROFESSIONAL_DEGREES" ], [ "ENGINEER", "OTHER_ENGINEERS_W__NO_DEGREE_OFFICE_ONLY" ], [ "ENTERTAINMENT_INDUSTRY", "ACTOR_ACTRESS_ENTERTAINER" ], [ "ENTERTAINMENT_INDUSTRY", "ANNOUNCER_COMMENTATOR" ], [ "ENTERTAINMENT_INDUSTRY", "CAMERA_OPERATOR_PHOTOGRAPHER" ], [ "ENTERTAINMENT_INDUSTRY", "COSTUME_MAKEUP__SPECIAL_EFFECTS_MAKEUP" ], [ "ENTERTAINMENT_INDUSTRY", "DIRECTOR" ], [ "ENTERTAINMENT_INDUSTRY", "DISC_JOCKEY__RADIO_ANNOUNCER" ], [ "ENTERTAINMENT_INDUSTRY", "DISC_JOCKEY__SELF_EMPLOYED__WEDDINGS__PARTIES_ETC_" ], [ "ENTERTAINMENT_INDUSTRY", "EVENT_PLANNER__CORPORATE_WEDDING__W_2_OR_SE_W_NET_INCOME____30K_" ], [ "ENTERTAINMENT_INDUSTRY", "PRODUCER" ], [ "ENTERTAINMENT_INDUSTRY", "PRODUCTION_WORKERS__LIGHT_PROPERTY_SOUND_" ], [ "ENTERTAINMENT_INDUSTRY", "REPORTER__WITH_OR_WITHOUT_FIELD_DUTIES_" ], [ "ENTERTAINMENT_INDUSTRY", "STUDIO_ENGINEER" ], [ "ENTERTAINMENT_INDUSTRY", "TECHNICIAN" ], [ "EXTERMINATOR_FUMIGATOR", "EXTERMINATOR_FUMIGATOR" ], [ "FARMING_AND_RANCHING", "ANY_TYPE__OWNER" ], [ "FARMING_AND_RANCHING", "AUCTIONEER__RETAIL_OR_WHOLESALE" ], [ "FARMING_AND_RANCHING", "BEEKEEPER__APIARIST_" ], [ "FARMING_AND_RANCHING", "BUYER__AGRICULTURAL_AND_LIVESTOCK_PRODUCTS" ], [ "FARMING_AND_RANCHING", "CHICKEN_POULTRY_GROWER_OR_RAISER" ], [ "FARMING_AND_RANCHING", "CITRUS_FRUIT_GROWER" ], [ "FARMING_AND_RANCHING", "DAIRY_FARM_RANCH_ORCHARD_WINERY_WORKERS" ], [ "FARMING_AND_RANCHING", "DAIRY_FARMER" ], [ "FARMING_AND_RANCHING", "FARM_IMPLEMENT_DEALER__OFFICE_DUTIES_ONLY_" ], [ "FARMING_AND_RANCHING", "FARMER_TREE_FARMER" ], [ "FARMING_AND_RANCHING", "FARRIER__HORSESHOER" ], [ "FARMING_AND_RANCHING", "GRAIN_ELEVATORS_OR_MILLS__NON_OFFICE_WORKERS_" ], [ "FARMING_AND_RANCHING", "GRAIN_ELEVATORS_OR_MILLS__OFFICE_WORKERS_" ], [ "FARMING_AND_RANCHING", "HORSE_BREAKER" ], [ "FARMING_AND_RANCHING", "HORSE_TRAINER_OR_OWNER" ], [ "FARMING_AND_RANCHING", "KELP_FARMING__ON_OCEAN_" ], [ "FARMING_AND_RANCHING", "LIVESTOCK_RAISER_OR_FEEDER_RANCHER" ], [ "FARMING_AND_RANCHING", "MANAGER_SUPERINTENDENT" ], [ "FARMING_AND_RANCHING", "MARIJUANA_FARMER" ], [ "FARMING_AND_RANCHING", "MILLWRIGHT" ], [ "FARMING_AND_RANCHING", "ORCHARDIST" ], [ "FARMING_AND_RANCHING", "TOBACCO_FARMER_OR_GROWER" ], [ "FINANCIAL_PLANNER", "FINANCIAL_PLANNER" ], [ "FIREARMS", "FIREARMS_REPAIR" ], [ "FIREARMS", "FIREARMS_TRAINING_BUSINESS_OWNER__NO_COMBAT_STYLE_TRAINING" ], [ "FIREFIGHTER_EMERGENCY_MEDICAL_TECHNICIAN", "FIREFIGHTER_EMT_FT_ALL__INCLUDING_DRIVERS" ], [ "FISHING_INDUSTRY", "CAPTAIN__SPORT_FISHING_BOAT__TOURIST__PLEASURE_" ], [ "FISHING_INDUSTRY", "FISH_HATCHERY_WORKER" ], [ "FISHING_INDUSTRY", "FISHERMEN_AND_SURFACE_WORKERS" ], [ "FLORIST", "FLORIST___ADMINISTRATIVE_OR_SALES_ONLY__NO_GREENHOUSE_WORK_" ], [ "FLORIST", "FLORIST___OTHERS_WITH_GREENHOUSE_WORK" ], [ "FOREST_RANGER", "FOREST_RANGER" ], [ "GAMBLER", "PROFESSIONAL_GAMBLER" ], [ "GARBAGE_COLLECTOR_TRUCK_DRIVER", "GARBAGE_COLLECTOR" ], [ "GLASS_INDUSTRY", "AUTO_GLASS_INSTALLER" ], [ "GLASS_INDUSTRY", "GLASS_PRODUCTS_WORKER" ], [ "GLASS_INDUSTRY", "GLAZIER" ], [ "GOLF_COURSE_COUNTRY_CLUB", "GOLF_COUNTRY_CLUB_GREENSKEEPER_GROUNDSKEEPER" ], [ "GOLF_COURSE_COUNTRY_CLUB", "GOLF_COUNTRY_CLUB_MANAGER_PROPRIETOR" ], [ "GOLF_COURSE_COUNTRY_CLUB", "GOLF_COUNTRY_CLUB_PROFESSIONAL__GOLF_OR_TENNIS__FULL_TIME_ONLY_" ], [ "GOLF_COURSE_COUNTRY_CLUB", "GOLF_COUNTRY_CLUB_SUPERVISOR_OF_GROUNDS_CREW__LIGHT_PHYSICAL_ACTIVITY_" ], [ "GUIDE", "HUNTING_FISHING_GUIDE" ], [ "GUIDE", "MOUNTAIN_CLIMBING_OR_RIVER_GUIDE" ], [ "GUIDE", "TOUR_GUIDE__NO_PASSENGER_TRANSPORT_OR_PHYSICAL_DUTIES__BIKING__ETC__" ], [ "GUIDE", "TOUR_GUIDE_OTHER" ], [ "HEALTH_CARE", "ACUPUNCTURIST" ], [ "HEALTH_CARE", "ANESTHESIOLOGIST" ], [ "HEALTH_CARE", "AUDIOLOGIST" ], [ "HEALTH_CARE", "CERTIFIED_NURSE_AIDE__CNA___DOCTOR_S_OFFICE_OR_CLINIC_ONLY" ], [ "HEALTH_CARE", "CHIROPRACTOR" ], [ "HEALTH_CARE", "DENTAL_ASSISTANT" ], [ "HEALTH_CARE", "DENTAL_HYGIENIST" ], [ "HEALTH_CARE", "DENTAL_LAB_TECHNICIAN" ], [ "HEALTH_CARE", "DENTIST__GENERAL_OR_SPECIALTY" ], [ "HEALTH_CARE", "DERMATOLOGIST" ], [ "HEALTH_CARE", "DIALYSIS__ECG__LABORATORY__ULTRASOUND__X_RAY_TECHINCIANS" ], [ "HEALTH_CARE", "EMERGENCY_ROOM_PHYSICIAN" ], [ "HEALTH_CARE", "FAMILY_PRACTICE_PEDIATRICIAN" ], [ "HEALTH_CARE", "HEALTH_CARE_ADMINISTRATOR" ], [ "HEALTH_CARE", "HOME_HEALTH_CARE_PROVIDER_OTHER_THAN_RN_LPN_LVN_CAN" ], [ "HEALTH_CARE", "INTERNAL_MEDICINE" ], [ "HEALTH_CARE", "MASSAGE__CERTIFIED_OR_LICENSED_" ], [ "HEALTH_CARE", "MEDICAL_ASSISTANT" ], [ "HEALTH_CARE", "NURSE_MIDWIFE" ], [ "HEALTH_CARE", "NATUROPATH" ], [ "HEALTH_CARE", "NURSE_ANESTHETIST" ], [ "HEALTH_CARE", "NURSE_IN_PSYCHIATRIC_HOSPITAL_PRISON_JAIL" ], [ "HEALTH_CARE", "NURSE_PRACTITIONER" ], [ "HEALTH_CARE", "NUTRITIONIST_OR_DIETICIAN__NO_FOOD_PREPARATION_" ], [ "HEALTH_CARE", "OBSTETRICS_GYNECOLOGY" ], [ "HEALTH_CARE", "OCCUPATIONAL_THERAPIST__HOSPITAL__CLINIC__DOCTOR_S_OFFICE_" ], [ "HEALTH_CARE", "OCCUPATIONAL_THERAPIST__IN_HOME_" ], [ "HEALTH_CARE", "ONCOLOGIST" ], [ "HEALTH_CARE", "OPHTHALMOLOGIST" ], [ "HEALTH_CARE", "OPTICIAN" ], [ "HEALTH_CARE", "OPTOMETRIST" ], [ "HEALTH_CARE", "ORTHOPEDIC_SURGEON" ], [ "HEALTH_CARE", "OSTEOPATH" ], [ "HEALTH_CARE", "OTHER_THERAPIST" ], [ "HEALTH_CARE", "PAIN_MANAGEMENT" ], [ "HEALTH_CARE", "PARAMEDICAL_EXAMINER" ], [ "HEALTH_CARE", "PARAMEDICAL_EXAMINERS" ], [ "HEALTH_CARE", "PATHOLOGIST" ], [ "HEALTH_CARE", "PHARMACY_TECHNICIAN" ], [ "HEALTH_CARE", "PHLEBOTOMISTS" ], [ "HEALTH_CARE", "PHYSICAL_THERAPIST__HOSPITAL__CLINIC__DOCTOR_S_OFFICE_" ], [ "HEALTH_CARE", "PHYSICAL_THERAPIST__IN_HOME_" ], [ "HEALTH_CARE", "PHYSICIAN_ASSISTANT" ], [ "HEALTH_CARE", "PODIATRIST" ], [ "HEALTH_CARE", "PRIVATE_DUTY_NURSE__OUTSIDE_HOSPITAL_" ], [ "HEALTH_CARE", "PSYCHIATRIST" ], [ "HEALTH_CARE", "PSYCHOLOGIST_COUNSELOR__LICENSED_AND_PH_D__" ], [ "HEALTH_CARE", "PSYCHOLOGIST_COUNSELOR__LICENSED_ONLY_" ], [ "HEALTH_CARE", "PULMONOLOGIST" ], [ "HEALTH_CARE", "RADIOLOGIST__INVASIVE" ], [ "HEALTH_CARE", "RADIOLOGIST__NON_INVASIVE" ], [ "HEALTH_CARE", "REGISTERED_PHARMACIST" ], [ "HEALTH_CARE", "RESPIRATORY_THERAPIST__HOSPITAL__CLINIC__DOCTOR_S_OFFICE_" ], [ "HEALTH_CARE", "RESPIRATORY_THERAPIST__IN_HOME_" ], [ "HEALTH_CARE", "RN_LPN_LVN__ALL" ], [ "HEALTH_CARE", "SCHOOL_NURSE__FULL_TIME_ONLY_" ], [ "HEALTH_CARE", "SPECIALTY_NOT_LISTED" ], [ "HEALTH_CARE", "SPEECH__REGISTERED_OR_LICENSED___HOSPITAL__CLINIC__DOCTOR_S_OFFICE_" ], [ "HEALTH_CARE", "SPEECH_THERAPIST__REGISTERED_OR_LICENSED___IN_HOME_" ], [ "HEALTH_CARE", "SURGEON" ], [ "HEALTH_CARE", "THERAPIST_ASSISTANT__HOSPITAL__CLINIC__DOCTOR_S_OFFICE_" ], [ "HEALTH_CARE", "THERAPIST_ASSISTANT__IN_HOME_" ], [ "HEALTH_CARE", "UROLOGIST" ], [ "HORTICULTURIST", "GARDENER_GREENHOUSE_WORKER_NURSERY_WORKER" ], [ "HOTEL_MOTEL_INN", "HOTEL_CARETAKER_MAINTENANCE" ], [ "HOTEL_MOTEL_INN", "HOTEL_DESK_CLERK" ], [ "HOTEL_MOTEL_INN", "HOTEL_MANAGER_OWNER__OFFICE_DUTIES_ONLY_" ], [ "INSURANCE_INDUSTRY", "CLAIMS_EXAMINER_UNDERWRITER__OFFICE_DUTIES_ONLY_" ], [ "INSURANCE_INDUSTRY", "CLAIMS_EXAMINER_UNDERWRITER__WITH_FIELD_DUTIES_" ], [ "INSURANCE_INDUSTRY", "FINANCIAL_ADVISOR_AGENT___2_YEARS_EXPERIENCE" ], [ "INSURANCE_INDUSTRY", "FINANCIAL_ADVISOR_AGENT___OTHER" ], [ "INSURANCE_INDUSTRY", "INSURANCE_GENERAL_AGENT__OWNER_OF_AN_AGENCY_" ], [ "INSURANCE_INDUSTRY", "INSURANCE_OFFICE_MANAGER" ], [ "INTERIOR_DESIGNER_DECORATOR", "INTERIOR_DESIGNER_NO_HANDS_ON_PAINTING__ETC_" ], [ "INTERIOR_DESIGNER_DECORATOR", "OTHER_INTERIOR_DESIGNER__WITH_PAINTING__ETC_" ], [ "INTERPRETER_TRANSLATOR", "INTERPRETER_TRANSLATOR" ], [ "JEWELRY", "CERTIFIED_GEMOLOGIST_CERTIFIED_GEMOLOGIST_APPRAISER" ], [ "JEWELRY", "GOLDSMITH_SILVERSMITH_DIAMOND_CUTTER" ], [ "JEWELRY", "OTHER_JEWERLY_SALES" ], [ "LANDSCAPING", "LANDSCAPE_ARCHITECT" ], [ "LANDSCAPING", "LANDSCAPE_CONTRACTOR" ], [ "LANDSCAPING", "OTHER_LANDSCAPING_WORKERS_INCLUDING_LAWN_MOWERS" ], [ "LANDSCAPING", "TREE_TRIMMER_TREE_SURGEON" ], [ "LAW_ENFORCEMENT", "AIR_MARSHAL" ], [ "LAW_ENFORCEMENT", "BORDER_PATROL_OFFICER" ], [ "LAW_ENFORCEMENT", "CITY__TOWN_POLICE__DETECTIVE_INSPECTOR__MARSHALS_SHERIFFS_STATE_HIGHWAY_PATROL__DEPUTIES__METER_PERSON" ], [ "LAW_ENFORCEMENT", "CITY_COUNTY_STATE_POLICE_DISPATCHER__COMMUNICATIONS__NO_WEAPON_" ], [ "LAW_ENFORCEMENT", "CUSTOMS_AND_IMMIGRATION_INSPECTOR__INSIDE_DUTIES_ONLY__NO_WEAPON_" ], [ "LAW_ENFORCEMENT", "FISH_AND_GAME_WARDEN__NO_WEAPON_" ], [ "LAW_ENFORCEMENT", "GUARD__SECURITY_OR_BANK__NO_WEAPON_" ], [ "LAW_ENFORCEMENT", "GUARD__SECURITY_OR_BANK__WITH_WEAPON_" ], [ "LAW_ENFORCEMENT", "JUVENILE_DETENTION_FACILITY_WORKERS" ], [ "LAW_ENFORCEMENT", "LAW_ENFORCEMENT_PROCESS_SERVER" ], [ "LAW_ENFORCEMENT", "OTHER_LAW_ENFORCEMENT__OFFICE_ONLY_NO_WEAPON_" ], [ "LAW_ENFORCEMENT", "PRISON_OR_CORRECTIONAL_FACILITY___GUARD_JAILER_MATRON" ], [ "LAW_ENFORCEMENT", "PRISON_OR_CORRECTIONAL_FACILITY___MEDICAL_PROFESSIONAL__SOCIAL_WORKER_CLERGY" ], [ "LAW_ENFORCEMENT", "PRISON_OR_CORRECTIONAL_FACILITY___WARDEN" ], [ "LAW_ENFORCEMENT", "PRIVATE_DETECTIVES__PRIVATE_INVESTIGATORS" ], [ "LAW_ENFORCEMENT", "TACTICAL_POLICE_TRAINING" ], [ "LAW_ENFORCEMENT", "TSA__CUSTOMS_AGENT__BORDER_PATROL" ], [ "LAW_ENFORCEMENT", "UNDERCOVER_POLICE_NARCOTICS_VICE_OR_UNDERCOVER_DETECTIVES" ], [ "LEGAL", "ATTORNEY" ], [ "LEGAL", "BAILIFF" ], [ "LEGAL", "COURT_REPORTER_STENOGRAPHER" ], [ "LEGAL", "JUDGE" ], [ "LEGAL", "LEGAL_ASSISTANT__SECRETARY" ], [ "LEGAL", "PARALEGAL" ], [ "LIBRARIAN", "LIBRARIAN" ], [ "LIQUOR_DISTRIBUTION", "BARTENDER__FT_OR_PT_" ], [ "LIQUOR_DISTRIBUTION", "BREWERY_DISTILLERY_WINE_PLANT_WORKERS" ], [ "LIQUOR_DISTRIBUTION", "LIQUOR_STORE_OWNER_MANAGER" ], [ "LIQUOR_DISTRIBUTION", "LIQUOR_WHOLESALER" ], [ "LIQUOR_DISTRIBUTION", "WINERY_VINEYARD_OWNERS" ], [ "LOCKSMITH_KEYMAKER", "LOCKSMITH_KEYMAKER" ], [ "LUMBER_INDUSTRY", "LUMBER_INDUSTRY___OFFICE_DUTIES_ONLY" ], [ "LUMBER_INDUSTRY", "OTHER_LUMBER_INDUSTRY" ], [ "MAID", "MAID__W_2_ONLY_" ], [ "MANUFACTURING_PROCESSING_PACKAGING", "ALCOHOL_BREWERY_DISTILLERY_WINERY_PLANT_WORKERS" ], [ "MANUFACTURING_PROCESSING_PACKAGING", "ASSEMBLER_BENCHWORKER_TOOLMAKER" ], [ "MANUFACTURING_PROCESSING_PACKAGING", "AUTOMOBILE_MANUFACTURING" ], [ "MANUFACTURING_PROCESSING_PACKAGING", "CHICKEN_OR_BEEF_CLEANER_CUTTER_DRESSER_OR_PROCESSOR" ], [ "MANUFACTURING_PROCESSING_PACKAGING", "CRANE_OPERATOR" ], [ "MANUFACTURING_PROCESSING_PACKAGING", "CREAMERY_DAIRY_PLANT_WORKERS" ], [ "MANUFACTURING_PROCESSING_PACKAGING", "DIEMAKER_ENGRAVER" ], [ "MANUFACTURING_PROCESSING_PACKAGING", "FACTORY_CANNING_PRESERVING_WORKERS" ], [ "MANUFACTURING_PROCESSING_PACKAGING", "FOUNDRY" ], [ "MANUFACTURING_PROCESSING_PACKAGING", "MACHINE_OPERATOR_MACHINIST_MECHANIC_MILLWRIGHT" ], [ "MANUFACTURING_PROCESSING_PACKAGING", "MANUFACTURING___ADMINISTRATIVE_SUPERVISORY_DUTIES_ONLY" ], [ "MANUFACTURING_PROCESSING_PACKAGING", "MANUFACTURING___FOREMAN_INSPECTOR_SUPERINTENDENT" ], [ "MANUFACTURING_PROCESSING_PACKAGING", "MANUFACTURING___INSTALLER_TESTER" ], [ "MANUFACTURING_PROCESSING_PACKAGING", "MANUFACTURING___LAB_TECHNICIAN_OTHER_SKILLED_WORKER" ], [ "MANUFACTURING_PROCESSING_PACKAGING", "PACKINGHOUSE_WORKER" ], [ "MANUFACTURING_PROCESSING_PACKAGING", "RECEIVING_SHIPPING_CLERK" ], [ "MANUFACTURING_PROCESSING_PACKAGING", "REFRIGERATION_PLANT_WORKERS" ], [ "MANUFACTURING_PROCESSING_PACKAGING", "RENDERING_PLANT_WORKERS" ], [ "MANUFACTURING_PROCESSING_PACKAGING", "SHEET_METAL_WORKER" ], [ "MANUFACTURING_PROCESSING_PACKAGING", "SUGAR_REFINERY_WORKER" ], [ "MARIJUANA_DISPENSARY", "OWNERS" ], [ "MARIJUANA_DISPENSARY", "WORKERS" ], [ "MARINE_INDUSTRY", "CARGO_SHIP__CREW" ], [ "MARINE_INDUSTRY", "CARGO_SHIP__PILOT_OFFICERS" ], [ "MARINE_INDUSTRY", "HARBOR_MASTER" ], [ "MARINE_INDUSTRY", "HARBOR_PILOT" ], [ "MARINE_INDUSTRY", "INLAND_VESSEL_PILOT" ], [ "MARINE_INDUSTRY", "LONGSHOREMAN__DOCKWORKER__STEVEDORE__WHARFWORKER" ], [ "MARINE_INDUSTRY", "PASSENGER_SHIP__CREW" ], [ "MARINE_INDUSTRY", "PASSENGER_SHIP__PILOT_OFFICERS" ], [ "MARINE_INDUSTRY", "PASSENGER_SHIP__RADIO_OPERATOR_PURSER_CHIEF_STEWARD" ], [ "MESSENGER", "BICYCLE_MESSENGER" ], [ "MESSENGER", "OUTSIDE_OR_BETWEEN_OFFICES_MESSENGER" ], [ "MINING", "MINING___MANAGER_OWNER" ], [ "MINING", "MINING___OUTSIDE_FOREMAN__SURFACE_ONLY_" ], [ "MINING", "OTHER_MINING" ], [ "MORTICIAN", "FUNERAL_DIRECTOR" ], [ "MORTICIAN", "MORTICIAN___NO_EMBALMING" ], [ "MORTICIAN", "MORTICIAN___WITH_EMBALMING" ], [ "MOVING_AND_STORAGE", "MOVER____FURNITURE_AND_HOUSEHOLD_GOODS" ], [ "MOVING_AND_STORAGE", "MOVING_AND_STORAGE___ESTIMATOR_FOREMAN__NO_MANUAL_LABOR_" ], [ "MOVING_AND_STORAGE", "MOVING_AND_STORAGE___OWNER_MANAGER__NO_MANUAL_LABOR_" ], [ "MUSIC", "ALL_OTHER_MUSIC" ], [ "MUSIC", "MUSICIAN__FULL_TIME_ORCHESTRA_STUDIO_COMPOSER_ARRANGER_" ], [ "MUSIC", "MUSICIAN_SINGER__NIGHT_CLUB_RESTAURANT_LOUNGE_TAVERN_" ], [ "MUSIC", "PIANO_TUNER_TEACHER" ], [ "OFFICE_WORKER", "OFFICE_ADMINISTRATIVE_ASSISTANT" ], [ "OFFICE_WORKER", "OFFICE_ADMINISTRATIVE_DUTIES_ONLY" ], [ "OFFICE_WORKER", "RECRUITER_TALENT_ACQUISITION" ], [ "PAWN_BROKER", "PAWN_BROKER" ], [ "PETROLEUM_INDUSTRY", "OTHER_PETROLEUM_INDUSTRY__INCLUDING_OFFSHORE_WORKERS_AND_TECHNICIANS" ], [ "PETROLEUM_INDUSTRY", "PETROLEUM_INDUSTRY___FOREMAN" ], [ "PETROLEUM_INDUSTRY", "PETROLEUM_INDUSTRY___MANAGER_SUPERINTENDENT" ], [ "PETROLEUM_INDUSTRY", "PETROLEUM_INDUSTRY___MECHANIC" ], [ "PHOTOGRAPHER", "CAMERA_OPERATOR__MOTION_PICTURE_TELEVISION" ], [ "PHOTOGRAPHER", "COMMERCIAL_PHOTOGRAPHER__NON_STUDIO__SPORTING_EVENTS__CORP_FUNCTIONS__CONCERTS__FILM_ON_LOCATION_" ], [ "PHOTOGRAPHER", "NON_HAZARDOUS_PHOTOGRAPHER__WEDDINGS_FAMILY_PORTRAITS__ETC__" ], [ "PHOTOGRAPHER", "PHOTOGRAPHER___DRONE_OPERATOR__OFFICE_ONLY_" ], [ "PHOTOGRAPHER", "PHOTOGRAPHER___DRONE_OPERATOR__WORKING_OUTSIDE_ON_GROUND_OR_FLAT_ROOF_ONLY_" ], [ "PIPEFITTER_STEAMFITTER", "PIPEFITTER_STEAMFITTER" ], [ "PLUMBER", "PLUMBER" ], [ "POSTAL_EMPLOYEES", "POSTAL_INSPECTOR__OFFICE_ONLY_" ], [ "POSTAL_EMPLOYEES", "POSTAL_WORKER___DRIVER_LETTER_CARRIER_MAIL_HANDLER_CLERK" ], [ "PRINTING_AND_PUBLISHING", "COMPOSITOR_LITHOGRAPHER_PRESSMAN_TYPESETTER__ENGRAVER__PHOTOENGRAVER__MACHINE_OPERATOR__MAINENANCE_MECHANIC" ], [ "PRINTING_AND_PUBLISHING", "EDITOR_PUBLISHER_PROOFREADER" ], [ "PRINTING_AND_PUBLISHING", "FOREMAN_OR_GRAPHIC_LITHOGRAPHIC_ARTIST_COPYWRITER_PHOTOGRAPHER" ], [ "PRIVATE_INVESTIGATOR", "PRIVATE_INVESTIGATOR___NO_WEAPON__OFFICE_ONLY" ], [ "PROPERTY_MANAGER_APARTMENT_HOUSE_MANAGER", "PROPERTY_MANAGER___WITH_MAINTENANCE_WORK" ], [ "PROPERTY_MANAGER_APARTMENT_HOUSE_MANAGER", "PROPERTY_MANAGER___NO_MAINTENANCE_WORK" ], [ "RAILROAD", "RAILROAD_TRACK_AND_SECTION_WORKERS" ], [ "RAILROAD", "RAILROAD_TRAIN_CREW" ], [ "RAILROAD", "RAILROAD_YARD_WORKERS" ], [ "RAILROAD_EMPLOYEES", "OTHER_RAILROAD" ], [ "REAL_ESTATE", "ESCROW_TITLE_CLERKS" ], [ "REAL_ESTATE", "HOME_INSPECTOR" ], [ "REAL_ESTATE", "REAL_ESTATE_ABSTRACTOR_ABSTRACT_CLERK" ], [ "REAL_ESTATE", "REAL_ESTATE_AGENT_BROKER__OTHERS_" ], [ "REAL_ESTATE", "REAL_ESTATE_AGENT_BROKER_2_YRS_EXPERIENCE" ], [ "REAL_ESTATE", "REAL_ESTATE_APPRAISER" ], [ "RESTAURANT_BAR", "FOODTRUCK_OPERATOR" ], [ "RESTAURANT_BAR", "RESTAURANT_BAR___BUSBOY_BUSGIRL" ], [ "RESTAURANT_BAR", "RESTAURANT_BAR___CHEF" ], [ "RESTAURANT_BAR", "RESTAURANT_BAR___COOK" ], [ "RESTAURANT_BAR", "RESTAURANT_BAR___DISHWASHER" ], [ "RESTAURANT_BAR", "RESTAURANT_BAR___HOST_HOSTESS_CASHIER" ], [ "RESTAURANT_BAR", "RESTAURANT_BAR___OWNER_OPERATOR_MANAGER__NO_BARTENDING_DUTIES_" ], [ "RESTAURANT_BAR", "RESTAURANT_BAR___WAITER_WAITRESS" ], [ "RETAIL_SALES", "CONVENIENCE_STORE___OWNER_MANAGER_SUPERVISOR" ], [ "RETAIL_SALES", "GROCERY_STORE_MAINTENANCE_CLEAN_UP_WORKERS" ], [ "RETAIL_SALES", "GROCERY_STORE_MANAGER" ], [ "RETAIL_SALES", "GROCERY_STORE_STOCK_CLERK_DELI_PRODUCE_BUTCHER_BAKERY" ], [ "RETAIL_SALES", "OTHER_CONVENIENCE_STORE_EMPLOYEES" ], [ "RETAIL_SALES", "OTHER_RETAIL_SALES_EMPLOYEES" ], [ "RETAIL_SALES", "RETAIL_SALES___OWNER_MANAGER_BUYER_PURCHASING_AGENT" ], [ "RETAIL_SALES", "RETAIL_SALES___SALESPERSON_SALES_CLERK_RECEIVING_CLERK" ], [ "RETIRED_PERSON", "RETIRED_PERSON" ], [ "RODEO_PERFORMER", "RODEO_PERFORMER" ], [ "SALES_AGENT_MANUFACTURING_REPRESENTATIVE", "MULTI_LEVEL_MARKETING__IN_HOME_JEWELRY__MAKEUP_CLOTHING_COOKWARE_SALES____FT" ], [ "SALES_AGENT_MANUFACTURING_REPRESENTATIVE", "SALES_AGENT_REP___2_YRS_EXPERIENCE" ], [ "SALES_AGENT_MANUFACTURING_REPRESENTATIVE", "SALES_AGENT_REP___OTHER" ], [ "SCIENTIST", "SCIENTIST_NO_PHD__NO_FIELD_DUTIES" ], [ "SCIENTIST", "SCIENTIST_WITH_FIELD_DUTIES" ], [ "SCIENTIST", "SCIENTIST_WITH_PHD__NO_FIELD_DUTIES" ], [ "SEPTIC_AND_SEWAGE", "SEPTIC_AND_SEWAGE_INSTALLATION" ], [ "SEPTIC_AND_SEWAGE", "SEPTIC_AND_SEWAGE_SERVICING" ], [ "SERVICE_REPAIR_INSTALLATION", "AUTOMOBILE_BODY_REPAIR_WORKER_WELDER" ], [ "SERVICE_REPAIR_INSTALLATION", "AUTOMOBILE_MECHANIC" ], [ "SERVICE_REPAIR_INSTALLATION", "AUTOMOBILE_SERVICE_MANAGER__SUPERVISORY_ONLY_" ], [ "SERVICE_REPAIR_INSTALLATION", "CABLE_SATELLITE_TELEVISION_EQUIP_REPAIRER_INSTALLER_SERVICER__NO_LINE_WORK__POLE_CLIMBING__OR_DIGGING_" ], [ "SERVICE_REPAIR_INSTALLATION", "CABLE_SATELLITE_TELEVISION_LINEMAN_POLE_CLIMBER" ], [ "SERVICE_REPAIR_INSTALLATION", "CLOCK_WATCH_REPAIRER" ], [ "SERVICE_REPAIR_INSTALLATION", "COMPUTER_INSTALLER" ], [ "SERVICE_REPAIR_INSTALLATION", "COMPUTER_SERVICER_REPAIRER" ], [ "SERVICE_REPAIR_INSTALLATION", "ELEVATOR_MECHANIC" ], [ "SERVICE_REPAIR_INSTALLATION", "HEATING__VENTILATION__AND_AIR_CONDITIONING_SERVICE_REPAIR_INSTALLATION" ], [ "SERVICE_REPAIR_INSTALLATION", "HOUSEHOLD_APPLIANCES_SERVICE_REPAIR_INSTALLATION" ], [ "SERVICE_REPAIR_INSTALLATION", "MECHANIC__AIRCRAFT_BOAT_TRUCK_SMALL_ENGINE_" ], [ "SERVICE_REPAIR_INSTALLATION", "MUSICAL_INSTRUMENT_REPAIRER" ], [ "SERVICE_REPAIR_INSTALLATION", "OFFICE_MACHINES_SERVICE_REPAIR_INSTALLATION" ], [ "SERVICE_REPAIR_INSTALLATION", "SECURITY_SYSTEMS_SERVICE_REPAIR_INSTALLATION_NO_LINE_WORK__POLE_CLIMBING_OR_DIGGING_" ], [ "SERVICE_REPAIR_INSTALLATION", "SERVICE_STATION___OWNER_MANAGER_CASHIER_MECHANIC" ], [ "SERVICE_REPAIR_INSTALLATION", "SHOE_REPAIRER" ], [ "SERVICE_REPAIR_INSTALLATION", "TELEPHONE_EQUIP_REPAIRER_INSTALLER_SERVICER__NO_LINE_WORK__POLE_CLIMBING__OR_DIGGING_" ], [ "SERVICE_REPAIR_INSTALLATION", "TELEPHONE_LINEMAN_POLE_CLIMBER" ], [ "SERVICE_REPAIR_INSTALLATION", "TELEPHONE_TOWER_SERVICE_INSTALLATION" ], [ "SERVICE_REPAIR_INSTALLATION", "VENDING_MACHINE_SERVICE_REPAIR_INSTALLATION" ], [ "SERVICE_REPAIR_INSTALLATION", "WELDER" ], [ "SOCIAL_WORKER", "SOCIAL_WORKER_WITH_FIELD_DUTIES" ], [ "SOCIAL_WORKER", "SOCIAL_WORKER_WITH_OFFICE_DUTIES_ONLY" ], [ "STUDENT", "ACCOUNTANTS" ], [ "STUDENT", "AUDIOLOGISTS" ], [ "STUDENT", "CHIROPRACTORS" ], [ "STUDENT", "DENTISTS" ], [ "STUDENT", "ENGINEER_ARCHITECTS" ], [ "STUDENT", "ATTORNEY_LAWYER" ], [ "STUDENT", "NURSE_ANESTHETIST" ], [ "STUDENT", "NURSE_MIDWIFE" ], [ "STUDENT", "OPTOMETRISTS" ], [ "STUDENT", "PHARMACISTS" ], [ "STUDENT", "PHYSICIAN_ASSISTANTS" ], [ "STUDENT", "PHYSICIANS" ], [ "STUDENT", "PODIATRISTS" ], [ "STUDENT", "VETERINARIANS_SMALL_ANIMAL" ], [ "STUDENT", "VETERINARIANS_LARGE_ANIMAL" ], [ "STUNTLADY_STUNTMAN", "STUNTMAN" ], [ "SURVEYOR", "SURVEYOR_WITH_FIELD_DUTIES" ], [ "SURVEYOR", "SURVEYOR_WITH_OFFICE_DUTIES_ONLY" ], [ "TATOO_ARTIST_BODY_PIERCING", "TATOO_ARTIST_BODY_PIERCING" ], [ "TAXIDERMIST", "TAXIDERMIST" ], [ "TEACHING_INSTRUCTION", "AEROBICS_YOGA_INSTRUCTOR_PERSONAL_TRAINER" ], [ "TEACHING_INSTRUCTION", "COLLEGE_UNIVERSITY___DEAN_PROFESSOR_REGISTRAR" ], [ "TEACHING_INSTRUCTION", "DANCING_INSTRUCTOR" ], [ "TEACHING_INSTRUCTION", "K_12_ADMINISTRATOR_GUIDANCE_COUNSELOR_SPECIAL_EDUCATION_DRIVER_EDUCATION" ], [ "TEACHING_INSTRUCTION", "K_12_ATHLETIC_DIRECTOR" ], [ "TEACHING_INSTRUCTION", "MARTIAL_ARTS_INSTRUCTOR" ], [ "TEACHING_INSTRUCTION", "PRINCIPAL_SUPERINTENDENT" ], [ "TEACHING_INSTRUCTION", "SKI_INSTRUCTOR" ], [ "TEACHING_INSTRUCTION", "TEACHER__FULL_TIME_CLASSROOM_ONLY__NOT_IN_HOME__DEGREE_REQUIRED_" ], [ "TEACHING_INSTRUCTION", "TEACHER__PHYS_ED_SHOP_OTHERS_WITH_DUTIES_OUTSIDE_OF_THE_CLASSROOM_" ], [ "TEACHING_INSTRUCTION", "VOCATIONAL_TEACHER_PROFESSOR" ], [ "TEMPORARY_SEASONAL_WORKER", "TEMPORARY_SEASONAL_WORKER" ], [ "TRAVEL_AND_TRANSPORATION", "TRAVEL_BUREAU_WORKER_TRAVEL_AGENT" ], [ "VETERINARIAN", "VETERINARIAN___DVM__LARGE_ANIMALS_" ], [ "VETERINARIAN", "VETERINARIAN___DVM__SMALL_ANIMAL_" ], [ "VETERINARIAN", "VETERINARIAN_ASSISTANT__LARGE_ANIMAL_" ], [ "VETERINARIAN", "VETERINARIAN_ASSISTANT__SMALL_ANIMAL_" ], [ "WAREHOUSE_WORKERS", "ALL_OTHER_WAREHOUSE_WORKERS" ], [ "WAREHOUSE_WORKERS", "WAREHOUSE_CHECKER_CRATER_FOREMAN_PACKER" ], [ "WRITER", "AUTHOR_NOVELIST_WRITER_PROOFREADER__SALARIED_ONLY_" ], [ "WRITER", "COLUMNIST" ], [ "WRITER", "FREELANCE_WRITER_AUTHOR_NOVELIST" ], [ "WRITER", "JOURNALIST_ON_STAFF_OF_NEWSPAPER_PERIODICAL" ], [ "WRITER", "SCRIPTWRITER__SALARIED_ONLY_" ], [ "WRITER", "TECHNICAL_WRITER__SALARIED_ONLY_" ] ],
        "displayValues" : {
          "OCC_CLASS_6A" : "Misc Occupation - 6A",
          "OCC_CLASS_5A" : "Misc Occupation - 5A",
          "OCC_CLASS_4A" : "Misc Occupation - 4A",
          "OCC_CLASS_3A" : "Misc Occupation - 3A",
          "OCC_CLASS_2A" : "Misc Occupation - 2A",
          "OCC_CLASS_1A" : "Misc Occupation - 1A",
          "OCC_CLASS_5M" : "Misc Occupation - 5M",
          "OCC_CLASS_4M" : "Misc Occupation - 4M",
          "OCC_CLASS_3M" : "Misc Occupation - 3M",
          "OCC_CLASS_2M" : "Misc Occupation - 2M",
          "ACCOUNTANT__4_YEAR_ACCOUNTING_DEGREE__AUDITOR_OR_CPA" : "Accountant, 4-Year Accounting Degree, AUDITOR or CPA",
          "OTHER_ACCOUNTANT_BOOKKEEPER" : "Other Accountant/Bookkeeper",
          "ACTUARY" : "Actuary",
          "ADVERTISING_MARKETING___ACCOUNT_EXECUTIVE_ACCOUNT_MANAGER" : "Advertising/Marketing - Account Executive/Account Manager",
          "ADVERTISING_MARKETING___COPYWRITER" : "Advertising/Marketing - Copywriter",
          "ADVERTISING_MARKETING___FREELANCE__W__DOCUMENTED_INCOME" : "Advertising/Marketing - Freelance  w/ documented income",
          "ANIMAL_HANDLERS__ZOO_" : "Animal Handlers (Zoo)",
          "DOG_CAT_BREEDER" : "Dog/Cat Breeder",
          "DOG_TRAINER_W__DOCUMENTED_INCOME" : "Dog Trainer W/ DOCUMENTED INCOME",
          "DOGWALKER_SITTER___IN_HOUSE" : "Dogwalker/Sitter - In House",
          "KENNEL_DAY_CARE_OPERATOR__NOT_IN_HOME_" : "Kennel/Day Care Operator (Not in Home)",
          "OTHER_ZOO_WORKERS" : "Other Zoo Workers",
          "PET_GROOMER_PET_SHOP_WORKER__MOBILE_GROOMER" : "Pet Groomer/Pet Shop Worker/ Mobile Groomer",
          "ARCHITECT___ALL_OTHERS__90__OFFICE_AND_CONSULTING_" : "Architect - all others (90% Office And Consulting)",
          "ARCHITECT___BACHELOR_S_DEGREE" : "Architect - Bachelor's Degree",
          "ACTIVE_DUTY_MILITARY" : "Active Duty Military",
          "ART_DEALER_GALLERY_OWNER_CURATOR_AT_LEAST__45_000_INCOME_EACH_OF_LAST_TWO_YEARS" : "Art Dealer/Gallery Owner/Curator At Least $45,000 Income Each Of Last Two Years",
          "CARTOONIST_ILLUSTRATOR__SALARIED_OR_SE_W___35K_NET_" : "Cartoonist/Illustrator (Salaried or SE w/ $35k NET)",
          "COMMERCIAL_ARTIST_GRAPHIC_ARTIST_COMMERCIAL_DESIGNER__SALARIED__OR_SE_W___35K_NET_" : "Commercial Artist/Graphic Artist/Commercial Designer (Salaried  or SE w/ $35k NET)",
          "PICTURE_FRAMER" : "Picture Framer",
          "ASTROLOGER" : "Astrologer",
          "COLLEGIATE_ATHLETIC_DIRECTOR" : "Collegiate Athletic Director",
          "PROFESSION_OR_COLLEGIATE_FT_REFEREE__IF_PT__ISSUE_1_OCC_CLASS_LOWER_THAN_FT_OCC_" : "Profession or Collegiate FT Referee (If PT, issue 1 occ class lower than FT occ)",
          "PROFESSIONAL_ATHLETE_JOCKEY" : "Professional Athlete/Jockey",
          "PROFESSIONAL_OR_COLLEGIATE_ATHLETIC_TRAINER" : "Professional or Collegiate Athletic Trainer",
          "PROFESSIONAL_OR_COLLEGIATE_COACH" : "Professional or Collegiate Coach",
          "UNDER_18_NON_PROFESSIONAL_COACH" : "Under 18/Non-Professional Coach",
          "UNDER_18_NON_PROFESSIONAL_FT_REFEREE__IF_PT__ISSUE_1_OCC_CLASS_LOWER_THAN_FT_OCC_" : "Under 18/Non-Professional FT Referee (If PT, issue 1 occ class lower than FT occ)",
          "AUTO_SALVAGE_WORKERS" : "Auto Salvage Workers",
          "AUTO_DEALERSHIP___GENERAL_MANAGER_FINANCE_MANAGER_BUSINESS_MANAGER" : "Auto Dealership - General Manager/Finance Manager/Business Manager",
          "AUTO_DEALERSHIP___OWNER__ADMINISTRATIVE_DUTIES_ONLY" : "Auto Dealership - Owner, Administrative Duties Only",
          "AUTO_DEALERSHIP___SALESPERSON_SALES_MANAGER" : "Auto Dealership - Salesperson/Sales Manager",
          "AUTO_DEALERSIP___WASHER_POLISHER" : "Auto Dealersip - Washer/Polisher",
          "AIR_TRAFFIC_CONTROL_SPECIALIST" : "Air Traffic Control Specialist",
          "CROP_DUSTER_OTHER_PILOTS" : "Crop Duster/Other Pilots",
          "FLIGHT_ATTENDANT_STEWARD_STEWARDESS" : "Flight Attendant/Steward/Stewardess",
          "FREIGHT_OR_BAGGAGE_HANDLER_BELLHOP_PORTER" : "Freight Or Baggage Handler/Bellhop/Porter",
          "OTHER_ON_GROUND_AVIATION_PERSONNEL" : "Other on-ground aviation personnel",
          "PILOT_OFFICER__COMMERCIAL_SCHEDULED_AIRLINE" : "Pilot/Officer, Commercial Scheduled Airline",
          "PILOT_OFFICER__CORPORATION_OR_EXECUTIVE_CARRIERS" : "Pilot/Officer, Corporation Or Executive Carriers",
          "PILOT_OFFICER__NONSCHEDULED_AIRLINE_CHARTER" : "Pilot/Officer, Nonscheduled Airline/Charter",
          "TICKET_AGENT_ADMINISTRATIVE_PERSONNEL" : "Ticket Agent/Administrative Personnel",
          "BAILBONDSMAN" : "Bailbondsman",
          "BAILBONDSMAN___OFFICE_DUTIES_ONLY__NO_FIREARM" : "Bailbondsman - Office Duties Only, no firearm",
          "BAILBONDSMAN___OFFICE_DUTIES_ONLY__WITH_FIREARM" : "Bailbondsman - Office Duties Only, with firearm",
          "BAKER" : "Baker",
          "BAKERY___SUPERVISORY___ADMINISTRATIVE_DUTIES_ONLY__OWNER" : "Bakery - Supervisory / Administrative Duties Only/ Owner",
          "BAKERY_DELIVERY" : "Bakery Delivery",
          "BANK_CASHIER_TELLER" : "Bank Cashier/Teller",
          "BANKING_OFFICER__EXECUTIVE__BANK_EXAMINER" : "Banking Officer (executive)/Bank Examiner",
          "PERSONAL_BANKER__MORTGAGE_LOAN_OFFICER__LOAN_ORIGINATOR_CREDIT_ANALYST" : "Personal Banker/ Mortgage Loan Officer/ Loan Originator/Credit Analyst",
          "BARBER" : "Barber",
          "COSMETOLOGIST_HAIRSTYLIST__W_2_OR_RENTING_BOOTH_" : "Cosmetologist/Hairstylist (W-2 or renting booth)",
          "ESTHETICIAN__ELECTROLOGIST_MANICURIST_MAKEUP_ARTIST" : "Esthetician/ Electrologist/Manicurist/Makeup Artist",
          "BARTENDER__FT_OR_PT_" : "Bartender (FT or PT)",
          "COMMODITIES_FUTURES_OPTIONS_FLOOR_TRADER" : "Commodities/Futures/Options Floor Trader",
          "COMMODITIES_FUTURES_OPTIONS_OTHER_BROKER" : "Commodities/Futures/Options Other Broker",
          "OTHER_BROKER___2_YEARS_EXPERIENCE" : "Other Broker - 2 years experience",
          "OTHER_BROKER___LESS_THAN_2_YEARS_EXPERIENCE" : "Other Broker - less than 2 years experience",
          "STOCKS_BONDS_BROKER___2_YEARS_EXPERIENCE" : "Stocks/Bonds Broker - 2 years experience",
          "STOCKS_BONDS_FLOOR_TRADER_DAYTRADER" : "Stocks/Bonds Floor Trader/Daytrader",
          "STOCKS_BONDS_OTHER_BROKER" : "Stocks/Bonds Other Broker",
          "BUTCHER" : "Butcher",
          "BUTLER_PERSONAL_ASSISTANT__W_2_ONLY_" : "Butler/Personal Assistant (W-2 only)",
          "CALL_CENTER_WORKERS" : "Call Center Workers",
          "CARPET_CLEANER_OR_INSTALLER" : "Carpet Cleaner or Installer",
          "CARTOGRAPHER" : "Cartographer",
          "CASINO___OTHERS" : "Casino - Others",
          "CASINO_CASHIER__NOT_ON_FLOOR_" : "Casino Cashier (Not On Floor)",
          "CASINO_DEALERS_PIT_BOSS_WORKERS_ON_FLOOR__MINIMUM_ONE_YEAR_WITH_EMPLOYER_" : "Casino Dealers/Pit Boss/Workers On Floor (Minimum One Year With Employer)",
          "CASINO_MANAGER_SUPERVISOR_OPERATOR__NO_FLOOR_DUTIES_" : "Casino Manager/Supervisor/Operator (No Floor Duties)",
          "CASINO_SECURITY__FIREARM" : "Casino Security, firearm",
          "CASINO_SECURITY__NO_FIREARM" : "Casino Security, no firearm",
          "CATERER" : "Caterer",
          "CHEMICAL_INDUSTRY___ALL_OTHER_WORKERS__ACIDS__ALKALIS__CARCINOGENS__OR_EXPLOSIVES_" : "Chemical Industry - All other Workers (Acids, Alkalis, Carcinogens, or Explosives)",
          "CHEMICAL_INDUSTRY___LAB_TECHNICIAN__NO_ACIDS__ALKALIS__CARCINOGENS__OR_EXPLOSIVES_" : "Chemical Industry - Lab Technician (No Acids, Alkalis, Carcinogens, or Explosives)",
          "CHEMICAL_INDUSTRY___MACHINE_OPERATOR__FLOOR_WORKER__NO_ACIDS__ALKALIS__CARCINOGENS__OR_EXPLOSIVES_" : "Chemical Industry - Machine Operator/ Floor worker (No Acids, Alkalis, Carcinogens, or Explosives)",
          "CHEMICAL_INDUSTRY___SKILLED_WORKER__NO_ACIDS__ALKALIS__CARCINOGENS__OR_EXPLOSIVES_" : "Chemical Industry - Skilled Worker (No Acids, Alkalis, Carcinogens, or Explosives)",
          "CHEMICAL_INDUSTRY___TESTER__NO_ACIDS__ALKALIS__CARCINOGENS__OR_EXPLOSIVES_" : "Chemical Industry - Tester (No Acids, Alkalis, Carcinogens, or Explosives)",
          "CHIMNEYSWEEP" : "Chimneysweep",
          "CIRCUS_CARNIVAL_WORKERS" : "Circus/Carnival Workers",
          "CIVIC_CENTERS_CONVENTION_CENTERS_ARENAS___ADMINISTRATOR_MANAGER" : "Civic Centers/Convention Centers/Arenas - Administrator/Manager",
          "CIVIC_CENTERS_CONVENTION_CENTERS_ARENAS___CLERICAL_OFFICE_PERSONNEL" : "Civic Centers/Convention Centers/Arenas - Clerical/Office Personnel",
          "CIVIC_CENTERS_CONVENTION_CENTERS_ARENAS___CONCESSION_WORKERS" : "Civic Centers/Convention Centers/Arenas - Concession Workers",
          "CIVIC_CENTERS_CONVENTION_CENTERS_ARENAS___PRODUCTION_WORKERS__LIGHTS__PROPERTY__SOUND_" : "Civic Centers/Convention Centers/Arenas - Production Workers (Lights, Property, Sound)",
          "CLEANERS___SUPERVISORY_ADMINISTRATIVE_DUTIES_ONLY" : "Cleaners - Supervisory/Administrative Duties Only",
          "CUSTODIANS_JANITORS_OTHER_CLEAN_UP_WORKERS" : "Custodians/Janitors/Other Clean-Up Workers",
          "POOL_CLEANER__INSTALLER" : "Pool Cleaner/ Installer",
          "WINDOW_CLEANER__2_STORIES_OR_LESS_" : "Window Cleaner (2 Stories Or Less)",
          "WINDOW_CLEANER__MORE_THAN_2_STORIES_" : "Window Cleaner (More Than 2 Stories)",
          "MINISTER_RABBI_PASTOR" : "Minister/Rabbi/Pastor",
          "MISSIONARY__SALARIED_AND___90_DAYS__YR_OUT_OF_US_" : "Missionary (salaried and < 90 days/ yr out of US)",
          "CLERICAL___GENERAL" : "Clerical - General",
          "CLERICAL___INVENTORY_CONTROL" : "Clerical - Inventory Control",
          "CLERICAL___QUALITY_CONTROL" : "Clerical - Quality Control",
          "DATA_ENTRY" : "Data Entry",
          "PARTS_OR_STOCK_CLERK" : "Parts Or Stock Clerk",
          "SHIPPING_AND_RECEIVING__NO_FREIGHT_HANDLING_" : "Shipping And Receiving (No Freight Handling)",
          "CLOTH_CLOTHING_FASHION_DESIGNER" : "Cloth/Clothing/Fashion Designer",
          "FASHION_MODEL" : "Fashion Model",
          "TAILOR_DRESSMAKER_SEAMSTRESS" : "Tailor/Dressmaker/Seamstress",
          "IT___ADMINISTRATOR__CAPACITY_MANAGEMENT_SPECIALIST" : "IT - Administrator/ Capacity Management Specialist",
          "IT___ENGINEER_ARCHITECT__PROGRAMMER__SYSTEM_ANALYST__WEB_DEVELOPER" : "IT - Engineer/Architect/ programmer/ system analyst/ web developer",
          "IT___HELP_DESK_WORKER__TECHNICAL_SUPPORT_STAFF" : "IT - Help Desk Worker/ Technical Support Staff",
          "ASBESTOS_REMOVAL_WORKERS" : "Asbestos Removal Workers",
          "BRIDGE_PAINTER" : "Bridge Painter",
          "BRIDGE_STRUCTURAL_STEEL_WORKERS_WELDERS" : "Bridge Structural Steel Workers/Welders",
          "CARPENTRY__WOODWORKER_CABINET_MAKER" : "Carpentry/ Woodworker/Cabinet Maker",
          "CONSTRUCTION_JOB_SUPERVISOR_FOREMAN" : "Construction Job Supervisor/Foreman",
          "DRY_WALL_WORKER_PLASTERER" : "Dry Wall Worker/Plasterer",
          "EXPLOSIVE_HANDLER_BLASTER" : "Explosive Handler/Blaster",
          "FLAT_ROOF_WORKERS_ONLY" : "Flat Roof Workers Only",
          "FLOOR_COVERING_LAYER_LINOLEUM___CARPET_WORKER" : "Floor Covering Layer/Linoleum / Carpet Worker",
          "FOUNDRY" : "Foundry",
          "GENERAL_LABORER_CLEAN_UP__DEMOLITION_WORKER" : "General Laborer/Clean-up/ Demolition worker",
          "HANDYMAN_WITH_DEMOLITION__ROOFING__LADDERS" : "Handyman with demolition, roofing, ladders",
          "HANDYMAN_WITHOUT_DEMOLITION__ROOFING__LADDERS" : "Handyman without demolition, roofing, ladders",
          "HEAVY_EQUIPMENT_OPERATOR__GRADER_BULLDOZER_EARTH_MOVER_CRANE_" : "Heavy Equipment Operator (Grader/Bulldozer/Earth Mover/Crane)",
          "HIGHWAY__ROAD_OR_STREET_CONSTRUCTION_WORKER_LABORER" : "Highway, Road Or Street Construction Worker/Laborer",
          "INSULATION_WORKER" : "Insulation Worker",
          "MASON_BRICKWORKER_CEMENT_WORKER_TILESETTER" : "Mason/Brickworker/Cement Worker/Tilesetter",
          "MONUMENT_WORKER_STONE_CARVER" : "Monument Worker/Stone Carver",
          "PAINTER__EXTERIOR_NON_RESIDENTIAL__WORKING_GREATER_THAN_2_STORIES" : "Painter (Exterior Non-Residential) working greater than 2 stories",
          "PAINTER__EXTERIOR_NON_RESIDENTIAL__WORKING_LESS_THAN_2_STORIES" : "Painter (Exterior Non-Residential) working less than 2 stories",
          "PAINTER__INTERIOR_" : "Painter (Interior)",
          "PAPERHANGER" : "Paperhanger",
          "ROOFER__ANY_WORK_ON_PITCHED_ROOFS" : "Roofer- any work on pitched roofs",
          "ROOFING_CONTRACTOR___NO_LABOR" : "Roofing Contractor - no labor",
          "SANDBLASTER" : "Sandblaster",
          "SEWER_CONSTRUCTION__EXCEPT_TUNNEL_" : "Sewer Construction (Except Tunnel)",
          "SHEET_METAL_WORKER" : "Sheet Metal Worker",
          "STEEPLEJACK" : "Steeplejack",
          "SUPERINTENDENT_BUILDING_CONTRACTOR" : "Superintendent/Building contractor",
          "TOWER_ERECTORS" : "Tower Erectors",
          "TUNNEL_WORKERS__SHAFT_OR_SUBWAY_" : "Tunnel Workers (Shaft Or Subway)",
          "UPHOLSTERER" : "Upholsterer",
          "WELDER__IN_CONSTRUCTION_INDUSTRY_" : "Welder (in construction industry)",
          "CONSULTANT_LOBBYIST" : "Consultant/Lobbyist",
          "CONSULTANT_LOBBYIST___IT_COMPUTER_SCIENCE_DEGREE_ONLY" : "Consultant/Lobbyist - IT/computer science degree only",
          "CORPORATE_OFFICER_EXECUTIVE___ADMIN_DUTIES_ONLY__AT_LEAST__100_000_INCOME" : "Corporate Officer/Executive - Admin Duties Only, At Least $100,000 Income",
          "CORPORATE_OFFICER_EXECUTIVE___ALL_OTHERS" : "Corporate Officer/Executive - All Others",
          "DAY_CARE___NOT_IN_HOME_OR_ON_PROPERTY" : "Day Care - Not In Home Or On Property",
          "DAY_CARE___NOT_IN_HOME_OR_ON_PROPERTY__OWNER_DIRECTOR__ADMINISTRATIVE_DUTIES_ONLY_" : "Day Care - Not In Home Or On Property (Owner/Director, Administrative Duties Only)",
          "DAY_CARE__HOME_BASED_____OWNER_MUST_BE_ST_LICENSED__AT_LEAST_2_YRS_IN_BUSINESS_W__TAX_FORMS__MIN_3_CHILD_UNRELATED_TO_PROVIDER_" : "Day Care (Home Based) - (Owner must be St Licensed, At Least 2 Yrs in Business w/ tax forms, Min 3 Child Unrelated to Provider)",
          "NANNY_AU_PAIR" : "Nanny/Au Pair",
          "AUTO_BUS_TRUCK_TAXI_DISPATCHER__OFFICE_DUTIES_ONLY_" : "Auto/Bus/Truck/Taxi Dispatcher (Office Duties Only)",
          "SCUBA_TEACHER_POLICE_SEARCH_DIVER_OTHER_DIVERS" : "Scuba Teacher/Police Search Diver/Other Divers",
          "ARMORED_CAR_DRIVER" : "Armored Car Driver",
          "DELIVERY_OR_ROUTE_DRIVER" : "Delivery Or Route Driver",
          "DRIVING_INSTRUCTOR" : "Driving Instructor",
          "EMERGENCY_VEHICLE__TOW_TRUCK_DRIVER" : "Emergency Vehicle/ Tow Truck Driver",
          "FORK_LIFT_OPERATOR" : "Fork Lift Operator",
          "GARBAGE_SANITATION_TRUCK_DRIVER" : "Garbage/Sanitation Truck Driver",
          "RACING__ALL_TYPES_" : "Racing (All Types)",
          "TAXICAB_BUS_LIMOSINE__ONLY_IF_W_2_EMPLOYEES_" : "Taxicab/Bus/Limosine (only if W-2 employees)",
          "TRACTOR_TRAILER_TRUCK___TWO_OR_MORE_AXLES" : "TRACTOR TRAILER/TRUCK - Two or more axles",
          "UBER__LYFT_DRIVER__LIMO__FT_OR___10_HRS_WEEK" : "UBER/ LYFT DRIVER/ LIMO FT or > 10 hrs week",
          "VALET_CAR_PARK__HOTEL__RESTAURANT__CASINO_" : "Valet Car park (hotel /restaurant/ casino)",
          "DRY_CLEANING_LAUNDRY_OWNER_MANAGER_SUPERVISOR" : "Dry Cleaning/Laundry Owner/Manager/Supervisor",
          "DRY_CLEANING_LAUNDRY_WORKERS" : "Dry Cleaning/Laundry Workers",
          "ECONOMIST" : "Economist",
          "ELECTRICAL_INDUSTRY___FIELD_SUPERVISOR_ESTIMATOR" : "Electrical Industry - Field Supervisor/Estimator",
          "ELECTRICIAN" : "Electrician",
          "METER_INSTALLER" : "Meter Installer",
          "METER_READER_OR_INSPECTOR" : "Meter Reader Or Inspector",
          "OVERHEAD_LINES_CONDUITS_TUNNELS" : "Overhead Lines/Conduits/Tunnels",
          "ELECTRIC_SOLAR_NUCLEAR_OIL_GAS___MANAGER_SUPERVISOR_ENGINEER__OFFICE_DUTIES_ONLY_" : "Electric/Solar/Nuclear/Oil/Gas - Manager/Supervisor/Engineer (Office Duties Only)",
          "ELECTRIC_SOLAR_NUCLEAR_OIL_GAS___OTHER_EMPLOYEES" : "Electric/Solar/Nuclear/Oil/Gas - Other Employees",
          "BIOMEDICAL_ENGINEER" : "Biomedical Engineer",
          "ENGINEER___INSPECTOR_SUPERVISOR__WITH_FIELD_DUTIES_" : "Engineer - Inspector/Supervisor (With Field Duties)",
          "MECHANICAL_ELECTRICAL_STRUCTURAL_RPE___OTHER_PROFESSIONAL_DEGREES" : "Mechanical/Electrical/Structural RPE & Other Professional Degrees",
          "OTHER_ENGINEERS_W__NO_DEGREE_OFFICE_ONLY" : "Other Engineers W/ No Degree Office only",
          "ACTOR_ACTRESS_ENTERTAINER" : "Actor/Actress/Entertainer",
          "ANNOUNCER_COMMENTATOR" : "Announcer/Commentator",
          "CAMERA_OPERATOR_PHOTOGRAPHER" : "Camera Operator/Photographer",
          "COSTUME_MAKEUP__SPECIAL_EFFECTS_MAKEUP" : "Costume Makeup/ Special effects makeup",
          "DIRECTOR" : "Director",
          "DISC_JOCKEY__RADIO_ANNOUNCER" : "Disc Jockey/ radio announcer",
          "DISC_JOCKEY__SELF_EMPLOYED__WEDDINGS__PARTIES_ETC_" : "Disc Jockey/ Self-Employed (weddings/ parties etc)",
          "EVENT_PLANNER__CORPORATE_WEDDING__W_2_OR_SE_W_NET_INCOME____30K_" : "Event Planner (corporate/wedding; W-2 or SE w net income > $30k)",
          "PRODUCER" : "Producer",
          "PRODUCTION_WORKERS__LIGHT_PROPERTY_SOUND_" : "Production Workers (Light/Property/Sound)",
          "REPORTER__WITH_OR_WITHOUT_FIELD_DUTIES_" : "Reporter (With or without Field Duties)",
          "STUDIO_ENGINEER" : "Studio Engineer",
          "TECHNICIAN" : "Technician",
          "EXTERMINATOR_FUMIGATOR" : "Exterminator/Fumigator",
          "ANY_TYPE__OWNER" : "Any type/ owner",
          "AUCTIONEER__RETAIL_OR_WHOLESALE" : "Auctioneer, Retail Or Wholesale",
          "BEEKEEPER__APIARIST_" : "Beekeeper (Apiarist)",
          "BUYER__AGRICULTURAL_AND_LIVESTOCK_PRODUCTS" : "Buyer, Agricultural and Livestock Products",
          "CHICKEN_POULTRY_GROWER_OR_RAISER" : "Chicken/Poultry Grower Or Raiser",
          "CITRUS_FRUIT_GROWER" : "Citrus Fruit Grower",
          "DAIRY_FARM_RANCH_ORCHARD_WINERY_WORKERS" : "Dairy/Farm/Ranch/Orchard/Winery Workers",
          "DAIRY_FARMER" : "Dairy Farmer",
          "FARM_IMPLEMENT_DEALER__OFFICE_DUTIES_ONLY_" : "Farm Implement Dealer (Office Duties Only)",
          "FARMER_TREE_FARMER" : "Farmer/Tree Farmer",
          "FARRIER__HORSESHOER" : "Farrier/ Horseshoer",
          "GRAIN_ELEVATORS_OR_MILLS__NON_OFFICE_WORKERS_" : "Grain Elevators Or Mills (Non-Office Workers)",
          "GRAIN_ELEVATORS_OR_MILLS__OFFICE_WORKERS_" : "Grain Elevators Or Mills (Office Workers)",
          "HORSE_BREAKER" : "Horse Breaker",
          "HORSE_TRAINER_OR_OWNER" : "Horse Trainer Or Owner",
          "KELP_FARMING__ON_OCEAN_" : "Kelp Farming (on ocean)",
          "LIVESTOCK_RAISER_OR_FEEDER_RANCHER" : "Livestock Raiser Or Feeder/Rancher",
          "MANAGER_SUPERINTENDENT" : "Manager/Superintendent",
          "MARIJUANA_FARMER" : "Marijuana Farmer",
          "MILLWRIGHT" : "Millwright",
          "ORCHARDIST" : "Orchardist",
          "TOBACCO_FARMER_OR_GROWER" : "Tobacco Farmer Or Grower",
          "FINANCIAL_PLANNER" : "Financial Planner",
          "FIREARMS_REPAIR" : "Firearms Repair",
          "FIREARMS_TRAINING_BUSINESS_OWNER__NO_COMBAT_STYLE_TRAINING" : "Firearms Training Business Owner, no combat-style training",
          "FIREFIGHTER_EMT_FT_ALL__INCLUDING_DRIVERS" : "Firefighter/EMT FT all, including drivers",
          "CAPTAIN__SPORT_FISHING_BOAT__TOURIST__PLEASURE_" : "Captain, Sport Fishing Boat (Tourist/ PLEASURE)",
          "FISH_HATCHERY_WORKER" : "Fish Hatchery Worker",
          "FISHERMEN_AND_SURFACE_WORKERS" : "Fishermen And Surface Workers",
          "FLORIST___ADMINISTRATIVE_OR_SALES_ONLY__NO_GREENHOUSE_WORK_" : "Florist - Administrative Or Sales Only (No Greenhouse Work)",
          "FLORIST___OTHERS_WITH_GREENHOUSE_WORK" : "Florist - Others With Greenhouse Work",
          "FOREST_RANGER" : "Forest Ranger",
          "PROFESSIONAL_GAMBLER" : "Professional Gambler",
          "GARBAGE_COLLECTOR" : "Garbage Collector",
          "AUTO_GLASS_INSTALLER" : "Auto Glass Installer",
          "GLASS_PRODUCTS_WORKER" : "Glass Products Worker",
          "GLAZIER" : "Glazier",
          "GOLF_COUNTRY_CLUB_GREENSKEEPER_GROUNDSKEEPER" : "Golf/Country Club Greenskeeper/Groundskeeper",
          "GOLF_COUNTRY_CLUB_MANAGER_PROPRIETOR" : "Golf/Country Club Manager/Proprietor",
          "GOLF_COUNTRY_CLUB_PROFESSIONAL__GOLF_OR_TENNIS__FULL_TIME_ONLY_" : "Golf/Country Club Professional, Golf Or Tennis (Full-Time Only)",
          "GOLF_COUNTRY_CLUB_SUPERVISOR_OF_GROUNDS_CREW__LIGHT_PHYSICAL_ACTIVITY_" : "Golf/Country Club Supervisor Of Grounds Crew (Light Physical Activity)",
          "HUNTING_FISHING_GUIDE" : "Hunting/Fishing Guide",
          "MOUNTAIN_CLIMBING_OR_RIVER_GUIDE" : "Mountain Climbing Or River Guide",
          "TOUR_GUIDE__NO_PASSENGER_TRANSPORT_OR_PHYSICAL_DUTIES__BIKING__ETC__" : "Tour Guide (no passenger transport or physical duties (biking, etc))",
          "TOUR_GUIDE_OTHER" : "Tour Guide other",
          "ACUPUNCTURIST" : "Acupuncturist",
          "ANESTHESIOLOGIST" : "Anesthesiologist",
          "AUDIOLOGIST" : "Audiologist",
          "CERTIFIED_NURSE_AIDE__CNA___DOCTOR_S_OFFICE_OR_CLINIC_ONLY" : "Certified Nurse Aide (CNA) Doctor's Office Or Clinic Only",
          "CHIROPRACTOR" : "Chiropractor",
          "DENTAL_ASSISTANT" : "Dental Assistant",
          "DENTAL_HYGIENIST" : "Dental Hygienist",
          "DENTAL_LAB_TECHNICIAN" : "Dental Lab Technician",
          "DENTIST__GENERAL_OR_SPECIALTY" : "Dentist, General or Specialty",
          "DERMATOLOGIST" : "Dermatologist",
          "DIALYSIS__ECG__LABORATORY__ULTRASOUND__X_RAY_TECHINCIANS" : "Dialysis, ECG, Laboratory, Ultrasound, X-Ray Techincians",
          "EMERGENCY_ROOM_PHYSICIAN" : "Emergency Room Physician",
          "FAMILY_PRACTICE_PEDIATRICIAN" : "Family Practice/Pediatrician",
          "HEALTH_CARE_ADMINISTRATOR" : "Health Care Administrator",
          "HOME_HEALTH_CARE_PROVIDER_OTHER_THAN_RN_LPN_LVN_CAN" : "Home Health Care Provider Other Than RN/LPN/LVN/CAN",
          "INTERNAL_MEDICINE" : "Internal Medicine",
          "MASSAGE__CERTIFIED_OR_LICENSED_" : "Massage (Certified Or Licensed)",
          "MEDICAL_ASSISTANT" : "Medical Assistant",
          "NURSE_MIDWIFE" : "Nurse Midwife",
          "NATUROPATH" : "Naturopath",
          "NURSE_ANESTHETIST" : "Nurse Anesthetist",
          "NURSE_IN_PSYCHIATRIC_HOSPITAL_PRISON_JAIL" : "Nurse In Psychiatric Hospital/Prison/Jail",
          "NURSE_PRACTITIONER" : "Nurse Practitioner",
          "NUTRITIONIST_OR_DIETICIAN__NO_FOOD_PREPARATION_" : "Nutritionist Or Dietician (No Food Preparation)",
          "OBSTETRICS_GYNECOLOGY" : "Obstetrics/Gynecology",
          "OCCUPATIONAL_THERAPIST__HOSPITAL__CLINIC__DOCTOR_S_OFFICE_" : "Occupational Therapist (Hospital, Clinic, Doctor's Office)",
          "OCCUPATIONAL_THERAPIST__IN_HOME_" : "Occupational Therapist (In Home)",
          "ONCOLOGIST" : "Oncologist",
          "OPHTHALMOLOGIST" : "Ophthalmologist",
          "OPTICIAN" : "Optician",
          "OPTOMETRIST" : "Optometrist",
          "ORTHOPEDIC_SURGEON" : "Orthopedic Surgeon",
          "OSTEOPATH" : "Osteopath",
          "OTHER_THERAPIST" : "Other Therapist",
          "PAIN_MANAGEMENT" : "Pain Management",
          "PARAMEDICAL_EXAMINER" : "Paramedical Examiner",
          "PARAMEDICAL_EXAMINERS" : "Paramedical examiners",
          "PATHOLOGIST" : "Pathologist",
          "PHARMACY_TECHNICIAN" : "Pharmacy Technician",
          "PHLEBOTOMISTS" : "Phlebotomists",
          "PHYSICAL_THERAPIST__HOSPITAL__CLINIC__DOCTOR_S_OFFICE_" : "Physical Therapist (Hospital, Clinic, Doctor's Office)",
          "PHYSICAL_THERAPIST__IN_HOME_" : "Physical Therapist (In Home)",
          "PHYSICIAN_ASSISTANT" : "Physician Assistant",
          "PODIATRIST" : "Podiatrist",
          "PRIVATE_DUTY_NURSE__OUTSIDE_HOSPITAL_" : "Private Duty Nurse (Outside Hospital)",
          "PSYCHIATRIST" : "Psychiatrist",
          "PSYCHOLOGIST_COUNSELOR__LICENSED_AND_PH_D__" : "Psychologist/Counselor (Licensed And Ph.D.)",
          "PSYCHOLOGIST_COUNSELOR__LICENSED_ONLY_" : "Psychologist/Counselor (Licensed Only)",
          "PULMONOLOGIST" : "Pulmonologist",
          "RADIOLOGIST__INVASIVE" : "Radiologist, Invasive",
          "RADIOLOGIST__NON_INVASIVE" : "Radiologist, Non-invasive",
          "REGISTERED_PHARMACIST" : "Registered Pharmacist",
          "RESPIRATORY_THERAPIST__HOSPITAL__CLINIC__DOCTOR_S_OFFICE_" : "Respiratory Therapist (Hospital, Clinic, Doctor's Office)",
          "RESPIRATORY_THERAPIST__IN_HOME_" : "Respiratory Therapist (In Home)",
          "RN_LPN_LVN__ALL" : "RN/LPN/LVN ALL",
          "SCHOOL_NURSE__FULL_TIME_ONLY_" : "School Nurse (Full-Time Only)",
          "SPECIALTY_NOT_LISTED" : "Specialty Not Listed",
          "SPEECH__REGISTERED_OR_LICENSED___HOSPITAL__CLINIC__DOCTOR_S_OFFICE_" : "Speech (Registered Or Licensed - Hospital, Clinic, Doctor's Office)",
          "SPEECH_THERAPIST__REGISTERED_OR_LICENSED___IN_HOME_" : "Speech Therapist (Registered Or Licensed - In Home)",
          "SURGEON" : "Surgeon",
          "THERAPIST_ASSISTANT__HOSPITAL__CLINIC__DOCTOR_S_OFFICE_" : "Therapist Assistant (Hospital, Clinic, Doctor's Office)",
          "THERAPIST_ASSISTANT__IN_HOME_" : "Therapist Assistant (In Home)",
          "UROLOGIST" : "Urologist",
          "GARDENER_GREENHOUSE_WORKER_NURSERY_WORKER" : "Gardener/Greenhouse Worker/Nursery Worker",
          "HOTEL_CARETAKER_MAINTENANCE" : "Hotel Caretaker/Maintenance",
          "HOTEL_DESK_CLERK" : "Hotel Desk Clerk",
          "HOTEL_MANAGER_OWNER__OFFICE_DUTIES_ONLY_" : "Hotel Manager/Owner (Office Duties Only)",
          "CLAIMS_EXAMINER_UNDERWRITER__OFFICE_DUTIES_ONLY_" : "Claims Examiner/Underwriter (Office Duties Only)",
          "CLAIMS_EXAMINER_UNDERWRITER__WITH_FIELD_DUTIES_" : "Claims Examiner/Underwriter (With Field Duties)",
          "FINANCIAL_ADVISOR_AGENT___2_YEARS_EXPERIENCE" : "Financial Advisor/Agent - 2 Years experience",
          "FINANCIAL_ADVISOR_AGENT___OTHER" : "Financial Advisor/Agent - Other",
          "INSURANCE_GENERAL_AGENT__OWNER_OF_AN_AGENCY_" : "Insurance General Agent (Owner of an Agency)",
          "INSURANCE_OFFICE_MANAGER" : "Insurance Office Manager",
          "INTERIOR_DESIGNER_NO_HANDS_ON_PAINTING__ETC_" : "Interior Designer No hands-on painting, etc.",
          "OTHER_INTERIOR_DESIGNER__WITH_PAINTING__ETC_" : "Other Interior Designer (With Painting, etc)",
          "INTERPRETER_TRANSLATOR" : "Interpreter/Translator",
          "CERTIFIED_GEMOLOGIST_CERTIFIED_GEMOLOGIST_APPRAISER" : "Certified Gemologist/Certified Gemologist Appraiser",
          "GOLDSMITH_SILVERSMITH_DIAMOND_CUTTER" : "Goldsmith/Silversmith/Diamond Cutter",
          "OTHER_JEWERLY_SALES" : "Other Jewerly Sales",
          "LANDSCAPE_ARCHITECT" : "Landscape Architect",
          "LANDSCAPE_CONTRACTOR" : "Landscape Contractor",
          "OTHER_LANDSCAPING_WORKERS_INCLUDING_LAWN_MOWERS" : "Other Landscaping Workers Including Lawn Mowers",
          "TREE_TRIMMER_TREE_SURGEON" : "Tree Trimmer/Tree Surgeon",
          "AIR_MARSHAL" : "Air Marshal",
          "BORDER_PATROL_OFFICER" : "Border Patrol Officer",
          "CITY__TOWN_POLICE__DETECTIVE_INSPECTOR__MARSHALS_SHERIFFS_STATE_HIGHWAY_PATROL__DEPUTIES__METER_PERSON" : "City/ Town Police/ Detective/Inspector/ Marshals/Sheriffs/state highway patrol/ Deputies/ Meter Person",
          "CITY_COUNTY_STATE_POLICE_DISPATCHER__COMMUNICATIONS__NO_WEAPON_" : "City/County/State Police Dispatcher, Communications (no weapon)",
          "CUSTOMS_AND_IMMIGRATION_INSPECTOR__INSIDE_DUTIES_ONLY__NO_WEAPON_" : "Customs and Immigration Inspector (Inside Duties Only, no weapon)",
          "FISH_AND_GAME_WARDEN__NO_WEAPON_" : "Fish And Game Warden (no weapon)",
          "GUARD__SECURITY_OR_BANK__NO_WEAPON_" : "Guard, Security Or Bank (no weapon)",
          "GUARD__SECURITY_OR_BANK__WITH_WEAPON_" : "Guard, Security Or Bank (with weapon)",
          "JUVENILE_DETENTION_FACILITY_WORKERS" : "Juvenile Detention Facility Workers",
          "LAW_ENFORCEMENT_PROCESS_SERVER" : "Law Enforcement Process Server",
          "OTHER_LAW_ENFORCEMENT__OFFICE_ONLY_NO_WEAPON_" : "Other Law Enforcement (office only no weapon)",
          "PRISON_OR_CORRECTIONAL_FACILITY___GUARD_JAILER_MATRON" : "Prison or Correctional Facility - Guard/Jailer/Matron",
          "PRISON_OR_CORRECTIONAL_FACILITY___MEDICAL_PROFESSIONAL__SOCIAL_WORKER_CLERGY" : "Prison or Correctional Facility - Medical professional/ social worker/clergy",
          "PRISON_OR_CORRECTIONAL_FACILITY___WARDEN" : "Prison or Correctional Facility - Warden",
          "PRIVATE_DETECTIVES__PRIVATE_INVESTIGATORS" : "Private Detectives/ Private investigators",
          "TACTICAL_POLICE_TRAINING" : "Tactical/Police training",
          "TSA__CUSTOMS_AGENT__BORDER_PATROL" : "TSA/ customs agent/ Border Patrol",
          "UNDERCOVER_POLICE_NARCOTICS_VICE_OR_UNDERCOVER_DETECTIVES" : "Undercover police/narcotics/vice or undercover detectives",
          "ATTORNEY" : "Attorney",
          "BAILIFF" : "Bailiff",
          "COURT_REPORTER_STENOGRAPHER" : "Court Reporter/Stenographer",
          "JUDGE" : "Judge",
          "LEGAL_ASSISTANT__SECRETARY" : "Legal Assistant/ Secretary",
          "PARALEGAL" : "Paralegal",
          "LIBRARIAN" : "Librarian",
          "BREWERY_DISTILLERY_WINE_PLANT_WORKERS" : "Brewery/Distillery/Wine Plant workers",
          "LIQUOR_STORE_OWNER_MANAGER" : "Liquor Store Owner/Manager",
          "LIQUOR_WHOLESALER" : "Liquor Wholesaler",
          "WINERY_VINEYARD_OWNERS" : "Winery/Vineyard owners",
          "LOCKSMITH_KEYMAKER" : "Locksmith/Keymaker",
          "LUMBER_INDUSTRY___OFFICE_DUTIES_ONLY" : "Lumber Industry - Office Duties Only",
          "OTHER_LUMBER_INDUSTRY" : "Other Lumber Industry",
          "MAID__W_2_ONLY_" : "Maid (W-2 only)",
          "ALCOHOL_BREWERY_DISTILLERY_WINERY_PLANT_WORKERS" : "Alcohol/Brewery/Distillery/Winery Plant Workers",
          "ASSEMBLER_BENCHWORKER_TOOLMAKER" : "Assembler/Benchworker/Toolmaker",
          "AUTOMOBILE_MANUFACTURING" : "Automobile Manufacturing",
          "CHICKEN_OR_BEEF_CLEANER_CUTTER_DRESSER_OR_PROCESSOR" : "Chicken or Beef/Cleaner/Cutter/Dresser Or Processor",
          "CRANE_OPERATOR" : "Crane Operator",
          "CREAMERY_DAIRY_PLANT_WORKERS" : "Creamery/Dairy Plant Workers",
          "DIEMAKER_ENGRAVER" : "Diemaker/Engraver",
          "FACTORY_CANNING_PRESERVING_WORKERS" : "Factory Canning/Preserving Workers",
          "MACHINE_OPERATOR_MACHINIST_MECHANIC_MILLWRIGHT" : "Machine Operator/Machinist/Mechanic/Millwright",
          "MANUFACTURING___ADMINISTRATIVE_SUPERVISORY_DUTIES_ONLY" : "Manufacturing - Administrative/Supervisory Duties Only",
          "MANUFACTURING___FOREMAN_INSPECTOR_SUPERINTENDENT" : "Manufacturing - Foreman/Inspector/Superintendent",
          "MANUFACTURING___INSTALLER_TESTER" : "Manufacturing - Installer/Tester",
          "MANUFACTURING___LAB_TECHNICIAN_OTHER_SKILLED_WORKER" : "Manufacturing - Lab Technician/Other Skilled Worker",
          "PACKINGHOUSE_WORKER" : "Packinghouse Worker",
          "RECEIVING_SHIPPING_CLERK" : "Receiving/Shipping Clerk",
          "REFRIGERATION_PLANT_WORKERS" : "Refrigeration Plant Workers",
          "RENDERING_PLANT_WORKERS" : "Rendering Plant Workers",
          "SUGAR_REFINERY_WORKER" : "Sugar Refinery Worker",
          "OWNERS" : "Owners",
          "WORKERS" : "Workers",
          "CARGO_SHIP__CREW" : "Cargo Ship Crew",
          "CARGO_SHIP__PILOT_OFFICERS" : "Cargo Ship Pilot/Officers",
          "HARBOR_MASTER" : "Harbor Master",
          "HARBOR_PILOT" : "Harbor Pilot",
          "INLAND_VESSEL_PILOT" : "Inland Vessel Pilot",
          "LONGSHOREMAN__DOCKWORKER__STEVEDORE__WHARFWORKER" : "Longshoreman, Dockworker, Stevedore, Wharfworker",
          "PASSENGER_SHIP__CREW" : "Passenger Ship Crew",
          "PASSENGER_SHIP__PILOT_OFFICERS" : "Passenger Ship Pilot/Officers",
          "PASSENGER_SHIP__RADIO_OPERATOR_PURSER_CHIEF_STEWARD" : "Passenger Ship Radio Operator/Purser/Chief Steward",
          "BICYCLE_MESSENGER" : "Bicycle Messenger",
          "OUTSIDE_OR_BETWEEN_OFFICES_MESSENGER" : "Outside Or Between Offices Messenger",
          "MINING___MANAGER_OWNER" : "Mining - Manager/Owner",
          "MINING___OUTSIDE_FOREMAN__SURFACE_ONLY_" : "Mining - Outside Foreman (Surface Only)",
          "OTHER_MINING" : "Other Mining",
          "FUNERAL_DIRECTOR" : "Funeral Director",
          "MORTICIAN___NO_EMBALMING" : "Mortician - No Embalming",
          "MORTICIAN___WITH_EMBALMING" : "Mortician - With Embalming",
          "MOVER____FURNITURE_AND_HOUSEHOLD_GOODS" : "Mover -  Furniture and Household Goods",
          "MOVING_AND_STORAGE___ESTIMATOR_FOREMAN__NO_MANUAL_LABOR_" : "Moving and Storage - Estimator/Foreman (no manual labor)",
          "MOVING_AND_STORAGE___OWNER_MANAGER__NO_MANUAL_LABOR_" : "Moving and Storage - Owner/Manager (No Manual Labor)",
          "ALL_OTHER_MUSIC" : "All Other Music",
          "MUSICIAN__FULL_TIME_ORCHESTRA_STUDIO_COMPOSER_ARRANGER_" : "Musician (Full-Time Orchestra/Studio Composer/Arranger)",
          "MUSICIAN_SINGER__NIGHT_CLUB_RESTAURANT_LOUNGE_TAVERN_" : "Musician/Singer (Night Club/Restaurant/Lounge/Tavern)",
          "PIANO_TUNER_TEACHER" : "Piano Tuner/Teacher",
          "OFFICE_ADMINISTRATIVE_ASSISTANT" : "Office Administrative Assistant",
          "OFFICE_ADMINISTRATIVE_DUTIES_ONLY" : "Office Administrative Duties Only",
          "RECRUITER_TALENT_ACQUISITION" : "Recruiter/Talent Acquisition",
          "PAWN_BROKER" : "Pawn Broker",
          "OTHER_PETROLEUM_INDUSTRY__INCLUDING_OFFSHORE_WORKERS_AND_TECHNICIANS" : "Other Petroleum Industry (including offshore workers and technicians",
          "PETROLEUM_INDUSTRY___FOREMAN" : "Petroleum Industry - Foreman",
          "PETROLEUM_INDUSTRY___MANAGER_SUPERINTENDENT" : "Petroleum Industry - Manager/Superintendent",
          "PETROLEUM_INDUSTRY___MECHANIC" : "Petroleum Industry - Mechanic",
          "CAMERA_OPERATOR__MOTION_PICTURE_TELEVISION" : "Camera Operator, Motion Picture/Television",
          "COMMERCIAL_PHOTOGRAPHER__NON_STUDIO__SPORTING_EVENTS__CORP_FUNCTIONS__CONCERTS__FILM_ON_LOCATION_" : "Commercial Photographer, Non-Studio (Sporting Events, Corp Functions, Concerts, Film on Location)",
          "NON_HAZARDOUS_PHOTOGRAPHER__WEDDINGS_FAMILY_PORTRAITS__ETC__" : "Non-hazardous Photographer (Weddings/Family portraits, etc.)",
          "PHOTOGRAPHER___DRONE_OPERATOR__OFFICE_ONLY_" : "Photographer - Drone Operator (Office Only)",
          "PHOTOGRAPHER___DRONE_OPERATOR__WORKING_OUTSIDE_ON_GROUND_OR_FLAT_ROOF_ONLY_" : "Photographer - Drone Operator (working outside on ground or flat roof only)",
          "PIPEFITTER_STEAMFITTER" : "Pipefitter/Steamfitter",
          "PLUMBER" : "Plumber",
          "POSTAL_INSPECTOR__OFFICE_ONLY_" : "Postal Inspector (Office Only)",
          "POSTAL_WORKER___DRIVER_LETTER_CARRIER_MAIL_HANDLER_CLERK" : "Postal Worker - Driver/Letter Carrier/Mail Handler/Clerk",
          "COMPOSITOR_LITHOGRAPHER_PRESSMAN_TYPESETTER__ENGRAVER__PHOTOENGRAVER__MACHINE_OPERATOR__MAINENANCE_MECHANIC" : "Compositor/Lithographer/Pressman/Typesetter/ engraver/ photoengraver/ Machine operator/ mainenance Mechanic",
          "EDITOR_PUBLISHER_PROOFREADER" : "Editor/Publisher/Proofreader",
          "FOREMAN_OR_GRAPHIC_LITHOGRAPHIC_ARTIST_COPYWRITER_PHOTOGRAPHER" : "Foreman or Graphic/Lithographic artist/Copywriter/Photographer",
          "PRIVATE_INVESTIGATOR___NO_WEAPON__OFFICE_ONLY" : "Private Investigator - No weapon, office only",
          "PROPERTY_MANAGER___WITH_MAINTENANCE_WORK" : "Property Manager - With Maintenance Work",
          "PROPERTY_MANAGER___NO_MAINTENANCE_WORK" : "Property Manager - No Maintenance Work",
          "RAILROAD_TRACK_AND_SECTION_WORKERS" : "Railroad Track And Section Workers",
          "RAILROAD_TRAIN_CREW" : "Railroad Train Crew",
          "RAILROAD_YARD_WORKERS" : "Railroad Yard Workers",
          "OTHER_RAILROAD" : "Other Railroad",
          "ESCROW_TITLE_CLERKS" : "Escrow/Title Clerks",
          "HOME_INSPECTOR" : "Home Inspector",
          "REAL_ESTATE_ABSTRACTOR_ABSTRACT_CLERK" : "Real Estate Abstractor/Abstract Clerk",
          "REAL_ESTATE_AGENT_BROKER__OTHERS_" : "Real Estate Agent/Broker (Others)",
          "REAL_ESTATE_AGENT_BROKER_2_YRS_EXPERIENCE" : "Real Estate Agent/Broker 2 yrs experience",
          "REAL_ESTATE_APPRAISER" : "Real Estate Appraiser",
          "FOODTRUCK_OPERATOR" : "Foodtruck Operator",
          "RESTAURANT_BAR___BUSBOY_BUSGIRL" : "Restaurant/Bar - Busboy/Busgirl",
          "RESTAURANT_BAR___CHEF" : "Restaurant/Bar - Chef",
          "RESTAURANT_BAR___COOK" : "Restaurant/Bar - Cook",
          "RESTAURANT_BAR___DISHWASHER" : "Restaurant/Bar - Dishwasher",
          "RESTAURANT_BAR___HOST_HOSTESS_CASHIER" : "Restaurant/Bar - Host/Hostess/Cashier",
          "RESTAURANT_BAR___OWNER_OPERATOR_MANAGER__NO_BARTENDING_DUTIES_" : "Restaurant/Bar - Owner/Operator/Manager (No Bartending Duties)",
          "RESTAURANT_BAR___WAITER_WAITRESS" : "Restaurant/Bar - Waiter/Waitress",
          "CONVENIENCE_STORE___OWNER_MANAGER_SUPERVISOR" : "Convenience Store - Owner/Manager/Supervisor",
          "GROCERY_STORE_MAINTENANCE_CLEAN_UP_WORKERS" : "Grocery Store Maintenance/Clean up Workers",
          "GROCERY_STORE_MANAGER" : "Grocery Store Manager",
          "GROCERY_STORE_STOCK_CLERK_DELI_PRODUCE_BUTCHER_BAKERY" : "Grocery Store Stock Clerk/Deli/Produce/Butcher/Bakery",
          "OTHER_CONVENIENCE_STORE_EMPLOYEES" : "Other Convenience Store Employees",
          "OTHER_RETAIL_SALES_EMPLOYEES" : "Other Retail Sales Employees",
          "RETAIL_SALES___OWNER_MANAGER_BUYER_PURCHASING_AGENT" : "Retail Sales - Owner/Manager/Buyer/Purchasing Agent",
          "RETAIL_SALES___SALESPERSON_SALES_CLERK_RECEIVING_CLERK" : "Retail Sales - Salesperson/Sales Clerk/Receiving Clerk",
          "RETIRED_PERSON" : "Retired Person",
          "RODEO_PERFORMER" : "Rodeo Performer",
          "MULTI_LEVEL_MARKETING__IN_HOME_JEWELRY__MAKEUP_CLOTHING_COOKWARE_SALES____FT" : "Multi-level marketing (in-home jewelry /makeup/clothing/cookware sales) - FT",
          "SALES_AGENT_REP___2_YRS_EXPERIENCE" : "Sales Agent/Rep - 2 yrs experience",
          "SALES_AGENT_REP___OTHER" : "Sales Agent/Rep - other",
          "SCIENTIST_NO_PHD__NO_FIELD_DUTIES" : "Scientist no PhD, no field duties",
          "SCIENTIST_WITH_FIELD_DUTIES" : "Scientist With field duties",
          "SCIENTIST_WITH_PHD__NO_FIELD_DUTIES" : "Scientist with PhD, no field duties",
          "SEPTIC_AND_SEWAGE_INSTALLATION" : "Septic and Sewage Installation",
          "SEPTIC_AND_SEWAGE_SERVICING" : "Septic and Sewage Servicing",
          "AUTOMOBILE_BODY_REPAIR_WORKER_WELDER" : "Automobile Body Repair Worker/Welder",
          "AUTOMOBILE_MECHANIC" : "Automobile Mechanic",
          "AUTOMOBILE_SERVICE_MANAGER__SUPERVISORY_ONLY_" : "Automobile Service Manager (Supervisory Only)",
          "CABLE_SATELLITE_TELEVISION_EQUIP_REPAIRER_INSTALLER_SERVICER__NO_LINE_WORK__POLE_CLIMBING__OR_DIGGING_" : "Cable/Satellite Television Equip Repairer/Installer/Servicer (No Line Work, Pole Climbing, Or Digging)",
          "CABLE_SATELLITE_TELEVISION_LINEMAN_POLE_CLIMBER" : "Cable/Satellite Television Lineman/Pole Climber",
          "CLOCK_WATCH_REPAIRER" : "Clock/Watch Repairer",
          "COMPUTER_INSTALLER" : "Computer Installer",
          "COMPUTER_SERVICER_REPAIRER" : "Computer Servicer/Repairer",
          "ELEVATOR_MECHANIC" : "Elevator Mechanic",
          "HEATING__VENTILATION__AND_AIR_CONDITIONING_SERVICE_REPAIR_INSTALLATION" : "Heating, Ventilation, And Air Conditioning Service/Repair/Installation",
          "HOUSEHOLD_APPLIANCES_SERVICE_REPAIR_INSTALLATION" : "Household Appliances Service/Repair/Installation",
          "MECHANIC__AIRCRAFT_BOAT_TRUCK_SMALL_ENGINE_" : "Mechanic (Aircraft/Boat/Truck/Small Engine)",
          "MUSICAL_INSTRUMENT_REPAIRER" : "Musical Instrument Repairer",
          "OFFICE_MACHINES_SERVICE_REPAIR_INSTALLATION" : "Office Machines Service/Repair/Installation",
          "SECURITY_SYSTEMS_SERVICE_REPAIR_INSTALLATION_NO_LINE_WORK__POLE_CLIMBING_OR_DIGGING_" : "Security Systems Service/Repair/Installation(No Line Work, Pole Climbing Or Digging)",
          "SERVICE_STATION___OWNER_MANAGER_CASHIER_MECHANIC" : "Service Station - Owner/Manager/Cashier/Mechanic",
          "SHOE_REPAIRER" : "Shoe Repairer",
          "TELEPHONE_EQUIP_REPAIRER_INSTALLER_SERVICER__NO_LINE_WORK__POLE_CLIMBING__OR_DIGGING_" : "Telephone Equip Repairer/Installer/Servicer (No Line Work, Pole Climbing, Or Digging)",
          "TELEPHONE_LINEMAN_POLE_CLIMBER" : "Telephone Lineman/Pole Climber",
          "TELEPHONE_TOWER_SERVICE_INSTALLATION" : "Telephone Tower Service/Installation",
          "VENDING_MACHINE_SERVICE_REPAIR_INSTALLATION" : "Vending Machine Service/Repair/Installation",
          "WELDER" : "Welder",
          "SOCIAL_WORKER_WITH_FIELD_DUTIES" : "Social Worker with Field Duties",
          "SOCIAL_WORKER_WITH_OFFICE_DUTIES_ONLY" : "Social Worker with Office Duties Only",
          "ACCOUNTANTS" : "Accountants",
          "AUDIOLOGISTS" : "Audiologists",
          "CHIROPRACTORS" : "Chiropractors",
          "DENTISTS" : "Dentists",
          "ENGINEER_ARCHITECTS" : "Engineer, Architects",
          "ATTORNEY_LAWYER" : "Attorney Lawyer",
          "OPTOMETRISTS" : "Optometrists",
          "PHARMACISTS" : "Pharmacists",
          "PHYSICIAN_ASSISTANTS" : "Physician Assistants",
          "PHYSICIANS" : "Physicians",
          "PODIATRISTS" : "Podiatrists",
          "VETERINARIANS_SMALL_ANIMAL" : "Veterinarians - Small Animal",
          "VETERINARIANS_LARGE_ANIMAL" : "Veterinarians - Large Animal",
          "STUNTMAN" : "Stuntman",
          "SURVEYOR_WITH_FIELD_DUTIES" : "Surveyor with Field Duties",
          "SURVEYOR_WITH_OFFICE_DUTIES_ONLY" : "Surveyor with Office Duties Only",
          "TATOO_ARTIST_BODY_PIERCING" : "Tatoo Artist/Body Piercing",
          "TAXIDERMIST" : "Taxidermist",
          "AEROBICS_YOGA_INSTRUCTOR_PERSONAL_TRAINER" : "Aerobics/Yoga Instructor/Personal Trainer",
          "COLLEGE_UNIVERSITY___DEAN_PROFESSOR_REGISTRAR" : "College/University - Dean/Professor/Registrar",
          "DANCING_INSTRUCTOR" : "Dancing Instructor",
          "K_12_ADMINISTRATOR_GUIDANCE_COUNSELOR_SPECIAL_EDUCATION_DRIVER_EDUCATION" : "K-12 Administrator/Guidance Counselor/Special Education/Driver Education",
          "K_12_ATHLETIC_DIRECTOR" : "K-12 Athletic Director",
          "MARTIAL_ARTS_INSTRUCTOR" : "Martial Arts Instructor",
          "PRINCIPAL_SUPERINTENDENT" : "Principal/Superintendent",
          "SKI_INSTRUCTOR" : "Ski Instructor",
          "TEACHER__FULL_TIME_CLASSROOM_ONLY__NOT_IN_HOME__DEGREE_REQUIRED_" : "Teacher (Full-Time Classroom Only, Not In Home, Degree Required)",
          "TEACHER__PHYS_ED_SHOP_OTHERS_WITH_DUTIES_OUTSIDE_OF_THE_CLASSROOM_" : "Teacher (Phys Ed/Shop/Others With Duties Outside Of The Classroom)",
          "VOCATIONAL_TEACHER_PROFESSOR" : "Vocational Teacher/Professor",
          "TEMPORARY_SEASONAL_WORKER" : "Temporary/Seasonal Worker",
          "TRAVEL_BUREAU_WORKER_TRAVEL_AGENT" : "Travel Bureau Worker/Travel Agent",
          "VETERINARIAN___DVM__LARGE_ANIMALS_" : "Veterinarian - DVM (Large Animals)",
          "VETERINARIAN___DVM__SMALL_ANIMAL_" : "Veterinarian - DVM (Small Animal)",
          "VETERINARIAN_ASSISTANT__LARGE_ANIMAL_" : "Veterinarian Assistant (Large Animal)",
          "VETERINARIAN_ASSISTANT__SMALL_ANIMAL_" : "Veterinarian Assistant (Small Animal)",
          "ALL_OTHER_WAREHOUSE_WORKERS" : "All Other Warehouse Workers",
          "WAREHOUSE_CHECKER_CRATER_FOREMAN_PACKER" : "Warehouse Checker/Crater/Foreman/Packer",
          "AUTHOR_NOVELIST_WRITER_PROOFREADER__SALARIED_ONLY_" : "Author/Novelist/Writer/Proofreader (Salaried only)",
          "COLUMNIST" : "Columnist",
          "FREELANCE_WRITER_AUTHOR_NOVELIST" : "Freelance writer/Author/Novelist",
          "JOURNALIST_ON_STAFF_OF_NEWSPAPER_PERIODICAL" : "Journalist On Staff Of Newspaper/Periodical",
          "SCRIPTWRITER__SALARIED_ONLY_" : "Scriptwriter (Salaried only)",
          "TECHNICAL_WRITER__SALARIED_ONLY_" : "Technical Writer (Salaried only)"
        }
      },
      "incomeErQualBaseTbl" : {
        "columns" : [ "annualEarnedIncome", "base" ],
        "rows" : [ [ "15000", "500" ], [ "17000", "500" ], [ "19000", "500" ], [ "21000", "600" ], [ "23000", "700" ], [ "25000", "800" ], [ "27000", "800" ], [ "29000", "800" ], [ "31000", "1000" ], [ "33000", "1000" ], [ "35000", "1100" ], [ "37000", "1200" ], [ "39000", "1200" ], [ "41000", "1300" ], [ "43000", "1400" ], [ "45000", "1500" ], [ "47000", "1500" ], [ "50000", "1800" ], [ "52000", "2000" ], [ "54000", "2000" ], [ "56000", "2100" ], [ "58000", "2100" ], [ "60000", "2500" ], [ "62000", "2500" ], [ "64000", "2700" ], [ "66000", "2800" ], [ "68000", "2800" ], [ "70000", "3200" ], [ "72000", "3200" ], [ "75000", "3500" ], [ "80000", "3800" ], [ "85000", "4300" ], [ "90000", "4500" ], [ "95000", "4900" ], [ "100000", "5200" ], [ "105000", "5300" ], [ "110000", "5600" ], [ "115000", "5800" ], [ "120000", "6700" ], [ "125000", "6700" ], [ "130000", "7200" ], [ "135000", "7300" ], [ "140000", "8200" ], [ "145000", "8200" ], [ "150000", "8400" ], [ "155000", "8400" ], [ "160000", "9200" ], [ "165000", "9200" ], [ "170000", "9500" ], [ "175000", "9500" ], [ "180000", "10300" ], [ "185000", "10300" ], [ "190000", "10500" ], [ "195000", "10500" ], [ "200000", "11300" ], [ "210000", "11600" ], [ "220000", "11900" ], [ "230000", "12900" ], [ "240000", "13200" ], [ "250000", "14100" ], [ "260000", "14200" ], [ "270000", "14300" ], [ "280000", "15000" ], [ "290000", "15100" ], [ "300000", "15700" ], [ "325000", "16300" ], [ "350000", "17500" ], [ "375000", "18100" ], [ "400000", "19300" ], [ "425000", "19400" ], [ "450000", "19600" ], [ "475000", "19800" ], [ "500000", "19900" ], [ "525000", "20000" ], [ "550000", "20000" ], [ "575000", "20000" ], [ "600000", "20000" ], [ "625000", "20000" ], [ "650000", "20000" ], [ "675000", "20000" ], [ "700000", "20000" ], [ "725000", "20000" ], [ "750000", "20000" ], [ "775000", "20000" ], [ "800000", "20000" ], [ "825000", "20000" ], [ "850000", "20000" ], [ "875000", "20000" ], [ "900000", "20000" ], [ "925000", "20000" ], [ "950000", "20000" ], [ "975000", "20000" ], [ "1000000", "20000" ], [ "1050000", "20000" ], [ "1100000", "20000" ], [ "1150000", "20000" ], [ "1200000", "20000" ] ],
        "displayValues" : {
          "500" : "500",
          "600" : "600",
          "700" : "700",
          "800" : "800",
          "1000" : "1000",
          "1100" : "1100",
          "1200" : "1200",
          "1300" : "1300",
          "1400" : "1400",
          "1500" : "1500",
          "1800" : "1800",
          "2000" : "2000",
          "2100" : "2100",
          "2500" : "2500",
          "2700" : "2700",
          "2800" : "2800",
          "3200" : "3200",
          "3500" : "3500",
          "3800" : "3800",
          "4300" : "4300",
          "4500" : "4500",
          "4900" : "4900",
          "5200" : "5200",
          "5300" : "5300",
          "5600" : "5600",
          "5800" : "5800",
          "6700" : "6700",
          "7200" : "7200",
          "7300" : "7300",
          "8200" : "8200",
          "8400" : "8400",
          "9200" : "9200",
          "9500" : "9500",
          "10300" : "10300",
          "10500" : "10500",
          "11300" : "11300",
          "11600" : "11600",
          "11900" : "11900",
          "12900" : "12900",
          "13200" : "13200",
          "14100" : "14100",
          "14200" : "14200",
          "14300" : "14300",
          "15000" : "15000",
          "15100" : "15100",
          "15700" : "15700",
          "16300" : "16300",
          "17500" : "17500",
          "18100" : "18100",
          "19300" : "19300",
          "19400" : "19400",
          "19600" : "19600",
          "19800" : "19800",
          "19900" : "19900",
          "20000" : "20000"
        }
      },
      "elimPrdTbl" : {
        "columns" : [ "specialRestrictionEmployee", "issueState", "benefitPeriod", "eliminationPeriod" ],
        "rows" : [ [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AK", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AK", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AK", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AK", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AK", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AK", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AK", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AK", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AK", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "AK", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "AK", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "AK", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "AK", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "AK", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "AK", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "AK", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "AK", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "AK", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "AK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "AK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "AK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "AK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "AK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "AK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "AK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "AK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "AK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "AK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "AK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "AK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "AK", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "AK", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "AK", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "AK", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "AK", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "AK", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "AK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "AK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "AK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "AK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "AK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "AK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "AK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "AK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "AK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "AK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "AL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "AL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "AL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "AL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "AL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "AL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "AL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "AL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "AL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "AL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "AL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "AL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "AL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "AL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "AL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "AL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "AL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "AL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "AL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "AL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "AL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "AL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "AL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "AL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "AL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "AL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "AL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "AL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "AL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "AL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "AL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "AL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "AL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "AL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "AL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "AL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "AL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "AR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "AR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "AR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "AR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "AR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "AR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "AR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "AR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "AR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "AR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "AR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "AR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "AR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "AR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "AR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "AR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "AR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "AR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "AR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "AR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "AR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "AR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "AR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "AR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "AR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "AR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "AR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "AR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "AR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "AR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "AR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "AR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "AR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "AR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "AR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "AR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "AR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AZ", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AZ", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AZ", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AZ", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AZ", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AZ", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AZ", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AZ", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AZ", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AZ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AZ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AZ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AZ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AZ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AZ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AZ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AZ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AZ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AZ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AZ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "AZ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "AZ", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "AZ", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "AZ", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "AZ", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "AZ", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "AZ", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "AZ", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "AZ", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "AZ", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "AZ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "AZ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "AZ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "AZ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "AZ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "AZ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "AZ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "AZ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "AZ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "AZ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "AZ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "AZ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "AZ", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "AZ", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "AZ", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "AZ", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "AZ", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "AZ", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "AZ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "AZ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "AZ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "AZ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "AZ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "AZ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "AZ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "AZ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "AZ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "AZ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "CA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "CA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "CA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "CA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "CA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "CA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "CA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "CA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "CA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "CA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "CA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "CA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "CA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "CA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "CA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "CA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "CA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "CA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "CA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "CA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "CA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STATE_DI_ELIGIBILITY", "CA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "CA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "CA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "CA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "CA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STATE_DI_ELIGIBILITY", "CA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STATE_DI_ELIGIBILITY", "CA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STATE_DI_ELIGIBILITY", "CA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "CA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STATE_DI_ELIGIBILITY", "CA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STATE_DI_ELIGIBILITY", "CA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CO", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CO", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CO", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CO", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CO", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CO", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CO", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CO", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CO", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "CO", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "CO", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "CO", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "CO", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "CO", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "CO", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "CO", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "CO", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "CO", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "CO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "CO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "CO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "CO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "CO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "CO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "CO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "CO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "CO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "CO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "CO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "CO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "CO", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "CO", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "CO", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "CO", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "CO", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "CO", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "CO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "CO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "CO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "CO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "CO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "CO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "CO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "CO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "CO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "CO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "CT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "CT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "CT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "CT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "CT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "CT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "CT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "CT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "CT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "CT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "CT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "CT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "CT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "CT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "CT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "CT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "CT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "CT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "CT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "CT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "CT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "CT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "CT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "CT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "CT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "CT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "CT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "CT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "CT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "CT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "CT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "CT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "CT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "CT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "CT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "CT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "CT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "CT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "DC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "DC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "DC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "DC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "DC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "DC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "DC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "DC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "DC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "DC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "DC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "DC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "DC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "DC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "DC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "DC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "DC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "DC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "DC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "DC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "DC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "DC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "DC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "DC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "DC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "DC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "DC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "DC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "DC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "DC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "DC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "DC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "DC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "DC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "DC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "DC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "DC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DE", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DE", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DE", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DE", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DE", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DE", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DE", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DE", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DE", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "DE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "DE", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "DE", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "DE", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "DE", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "DE", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "DE", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "DE", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "DE", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "DE", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "DE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "DE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "DE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "DE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "DE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "DE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "DE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "DE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "DE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "DE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "DE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "DE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "DE", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "DE", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "DE", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "DE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "DE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "DE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "DE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "DE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "DE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "DE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "DE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "DE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "DE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "FL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "FL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "FL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "FL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "FL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "FL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "FL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "FL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "FL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "FL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "FL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "FL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "FL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "FL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "FL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "FL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "FL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "FL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "FL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "FL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "FL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "FL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "FL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "FL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "FL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "FL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "FL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "FL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "FL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "FL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "FL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "FL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "FL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "FL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "FL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "FL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "FL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "FL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "FL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "FL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "FL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "FL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "FL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "FL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "FL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "FL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "FL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "FL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "FL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "FL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "FL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "FL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "FL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "FL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "FL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "FL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "FL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "FL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "GA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "GA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "GA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "GA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "GA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "GA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "GA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "GA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "GA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "GA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "GA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "GA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "GA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "GA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "GA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "GA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "GA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "GA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "GA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "GA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "GA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "GA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "GA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "GA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "GA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "GA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "GA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "GA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "GA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "GA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "GA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "GA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "GA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "GA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "GA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "GA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "GA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "GA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "GA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "GA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "GA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "GA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "GA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "GA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "GA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "GA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "GA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "GA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "GA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "GA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "GA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "GA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "GA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "GA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "GA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "GA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "GA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "GA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "HI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "HI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "HI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "HI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "HI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "HI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "HI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "HI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "HI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "HI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "HI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "HI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "HI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "HI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "HI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "HI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "HI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "HI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "HI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "HI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "HI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "HI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "HI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "HI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "HI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "HI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "HI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "HI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "HI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "HI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "HI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "HI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "HI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "HI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "HI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "HI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "HI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "HI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "HI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "HI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "HI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "HI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STATE_DI_ELIGIBILITY", "HI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "HI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "HI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "HI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "HI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STATE_DI_ELIGIBILITY", "HI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STATE_DI_ELIGIBILITY", "HI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STATE_DI_ELIGIBILITY", "HI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "HI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STATE_DI_ELIGIBILITY", "HI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STATE_DI_ELIGIBILITY", "HI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "HI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "HI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "HI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "HI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "HI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "HI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "HI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "HI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "HI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "HI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "HI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "HI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "HI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "HI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "HI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "HI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "IA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "IA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "IA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "IA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "IA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "IA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "IA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "IA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "IA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "IA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "IA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "IA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "IA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "IA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "IA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "IA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "IA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "IA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "IA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "IA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "IA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "IA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "IA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "IA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "IA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "IA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "IA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "IA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "IA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "IA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "IA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "IA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "IA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "IA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "IA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "IA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "IA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ID", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ID", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ID", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ID", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ID", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ID", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ID", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ID", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ID", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ID", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ID", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ID", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ID", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ID", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ID", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ID", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ID", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ID", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ID", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ID", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ID", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "ID", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "ID", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "ID", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "ID", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "ID", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "ID", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "ID", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "ID", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "ID", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "ID", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "ID", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "ID", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "ID", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "ID", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "ID", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "ID", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "ID", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "ID", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "ID", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "ID", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "ID", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "ID", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "ID", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "ID", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "ID", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "ID", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "ID", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "ID", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "ID", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "ID", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "ID", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "ID", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "ID", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "ID", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "ID", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "ID", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "ID", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "IL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "IL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "IL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "IL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "IL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "IL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "IL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "IL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "IL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "IL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "IL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "IL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "IL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "IL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "IL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "IL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "IL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "IL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "IL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "IL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "IL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "IL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "IL", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "IL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "IL", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "IL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "IL", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "IL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "IL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "IL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "IL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "IL", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "IL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "IL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "IL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "IL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "IL", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "IN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "IN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "IN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "IN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "IN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "IN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "IN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "IN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "IN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "IN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "IN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "IN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "IN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "IN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "IN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "IN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "IN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "IN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "IN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "IN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "IN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "IN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "IN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "IN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "IN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "IN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "IN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "IN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "IN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "IN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "IN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "IN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "IN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "IN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "IN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "IN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "IN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "IN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KS", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KS", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KS", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KS", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KS", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KS", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KS", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KS", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KS", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "KS", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "KS", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "KS", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "KS", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "KS", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "KS", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "KS", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "KS", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "KS", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "KS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "KS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "KS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "KS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "KS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "KS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "KS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "KS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "KS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "KS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "KS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "KS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "KS", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "KS", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "KS", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "KS", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "KS", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "KS", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "KS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "KS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "KS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "KS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "KS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "KS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "KS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "KS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "KS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "KS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "KY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "KY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "KY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "KY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "KY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "KY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "KY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "KY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "KY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "KY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "KY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "KY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "KY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "KY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "KY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "KY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "KY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "KY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "KY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "KY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "KY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "KY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "KY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "KY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "KY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "KY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "KY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "KY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "KY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "KY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "KY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "KY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "KY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "KY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "KY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "KY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "KY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "KY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "LA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "LA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "LA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "LA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "LA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "LA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "LA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "LA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "LA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "LA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "LA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "LA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "LA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "LA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "LA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "LA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "LA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "LA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "LA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "LA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "LA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "LA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "LA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "LA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "LA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "LA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "LA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "LA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "LA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "LA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "LA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "LA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "LA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "LA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "LA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "LA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "LA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "LA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "LA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "LA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "LA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "LA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "LA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "LA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "LA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "LA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "LA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "LA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "LA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "LA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "LA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "LA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "LA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "LA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "LA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "LA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "LA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "LA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "MA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "MA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "MA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "MA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "MA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "MA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "MA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "MA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "MA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "MA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "MA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "MA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MD", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MD", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MD", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MD", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MD", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MD", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MD", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MD", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MD", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "MD", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MD", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MD", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MD", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MD", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MD", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MD", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MD", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MD", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "MD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "MD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "MD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "MD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "MD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "MD", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MD", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MD", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MD", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MD", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MD", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "MD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "MD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "MD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "MD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "MD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ME", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ME", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ME", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ME", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ME", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ME", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ME", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ME", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ME", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ME", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ME", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ME", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ME", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ME", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ME", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ME", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ME", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ME", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ME", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ME", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ME", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "ME", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "ME", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "ME", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "ME", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "ME", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "ME", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "ME", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "ME", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "ME", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "ME", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "ME", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "ME", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "ME", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "ME", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "ME", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "ME", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "ME", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "ME", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "ME", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "ME", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "ME", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "ME", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "ME", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "ME", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "ME", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "ME", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "ME", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "ME", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "ME", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "ME", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "ME", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "ME", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "ME", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "ME", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "ME", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "ME", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "ME", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "MI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "MI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "MI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "MI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "MI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "MI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "MI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "MI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "MI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "MI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "MI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "MI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "MN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "MN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "MN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "MN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "MN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "MN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "MN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "MN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "MN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "MN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "MN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "MN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MO", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MO", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MO", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MO", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MO", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MO", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MO", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MO", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MO", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "MO", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MO", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MO", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MO", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MO", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MO", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MO", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MO", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MO", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "MO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "MO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "MO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "MO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "MO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "MO", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MO", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MO", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MO", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MO", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MO", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "MO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "MO", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "MO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "MO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "MO", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MS", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MS", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MS", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MS", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MS", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MS", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MS", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MS", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MS", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "MS", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MS", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MS", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MS", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MS", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MS", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MS", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MS", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MS", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "MS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "MS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "MS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "MS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "MS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "MS", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MS", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MS", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MS", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MS", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MS", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "MS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "MS", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "MS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "MS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "MS", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "MT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "MT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "MT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "MT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "MT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "MT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "MT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "MT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "MT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "MT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "MT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "MT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "MT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "MT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "MT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "MT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "MT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "MT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "NC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "NC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "NC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "NC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "NC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "NC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "NC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "NC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "NC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "NC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "NC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "NC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ND", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ND", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ND", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ND", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ND", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ND", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ND", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ND", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ND", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ND", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ND", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ND", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ND", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ND", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ND", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ND", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ND", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ND", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ND", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ND", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "ND", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "ND", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "ND", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "ND", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "ND", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "ND", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "ND", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "ND", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "ND", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "ND", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "ND", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "ND", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "ND", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "ND", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "ND", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "ND", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "ND", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "ND", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "ND", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "ND", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "ND", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "ND", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "ND", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "ND", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "ND", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "ND", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "ND", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "ND", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "ND", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "ND", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "ND", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "ND", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "ND", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "ND", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "ND", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "ND", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "ND", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "ND", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NE", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NE", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NE", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NE", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NE", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NE", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NE", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NE", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NE", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "NE", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NE", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NE", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NE", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NE", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NE", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NE", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NE", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NE", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "NE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "NE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "NE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "NE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "NE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "NE", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NE", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NE", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NE", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NE", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NE", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "NE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "NE", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "NE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "NE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "NE", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NH", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NH", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NH", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NH", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NH", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NH", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NH", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NH", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NH", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "NH", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NH", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NH", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NH", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NH", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NH", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NH", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NH", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NH", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "NH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "NH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "NH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "NH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "NH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "NH", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NH", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NH", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NH", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NH", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NH", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "NH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "NH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "NH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "NH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "NH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NJ", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NJ", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NJ", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NJ", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NJ", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NJ", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NJ", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NJ", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NJ", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NJ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NJ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NJ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NJ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NJ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NJ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NJ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NJ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NJ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NJ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NJ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NJ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "NJ", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NJ", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NJ", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NJ", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NJ", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NJ", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NJ", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NJ", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NJ", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NJ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NJ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NJ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NJ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "NJ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "NJ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "NJ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NJ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NJ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NJ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "NJ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "NJ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STATE_DI_ELIGIBILITY", "NJ", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "NJ", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "NJ", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "NJ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "NJ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STATE_DI_ELIGIBILITY", "NJ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STATE_DI_ELIGIBILITY", "NJ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STATE_DI_ELIGIBILITY", "NJ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "NJ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STATE_DI_ELIGIBILITY", "NJ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STATE_DI_ELIGIBILITY", "NJ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "NJ", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NJ", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NJ", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NJ", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NJ", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NJ", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NJ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NJ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NJ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "NJ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "NJ", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "NJ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NJ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NJ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "NJ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "NJ", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NM", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NM", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NM", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NM", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NM", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NM", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NM", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NM", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NM", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NM", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NM", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NM", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NM", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NM", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NM", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NM", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NM", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NM", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NM", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NM", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NM", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "NM", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NM", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NM", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NM", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NM", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NM", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NM", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NM", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NM", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NM", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NM", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NM", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NM", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "NM", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "NM", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "NM", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NM", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NM", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NM", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "NM", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "NM", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "NM", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NM", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NM", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NM", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NM", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NM", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NM", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NM", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NM", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "NM", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "NM", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "NM", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NM", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NM", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "NM", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "NM", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NV", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NV", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NV", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NV", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NV", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NV", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NV", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NV", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NV", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "NV", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NV", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NV", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NV", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NV", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NV", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NV", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NV", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NV", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "NV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "NV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "NV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "NV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "NV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "NV", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NV", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NV", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NV", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NV", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NV", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "NV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "NV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "NV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "NV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "NV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "NY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "NY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "NY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "NY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "NY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "NY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "NY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "NY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "NY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "NY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STATE_DI_ELIGIBILITY", "NY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "NY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "NY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "NY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "NY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STATE_DI_ELIGIBILITY", "NY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STATE_DI_ELIGIBILITY", "NY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STATE_DI_ELIGIBILITY", "NY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "NY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STATE_DI_ELIGIBILITY", "NY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STATE_DI_ELIGIBILITY", "NY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "NY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "NY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "NY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "NY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "NY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "NY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "NY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "NY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OH", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OH", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OH", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OH", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OH", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OH", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OH", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OH", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OH", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "OH", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "OH", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "OH", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "OH", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "OH", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "OH", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "OH", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "OH", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "OH", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "OH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "OH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "OH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "OH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "OH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "OH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "OH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "OH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "OH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "OH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "OH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "OH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "OH", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "OH", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "OH", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "OH", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "OH", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "OH", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "OH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "OH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "OH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "OH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "OH", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "OH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "OH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "OH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "OH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "OH", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OK", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OK", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OK", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OK", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OK", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OK", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OK", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OK", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OK", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "OK", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "OK", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "OK", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "OK", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "OK", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "OK", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "OK", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "OK", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "OK", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "OK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "OK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "OK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "OK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "OK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "OK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "OK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "OK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "OK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "OK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "OK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "OK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "OK", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "OK", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "OK", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "OK", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "OK", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "OK", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "OK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "OK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "OK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "OK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "OK", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "OK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "OK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "OK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "OK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "OK", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "OR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "OR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "OR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "OR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "OR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "OR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "OR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "OR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "OR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "OR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "OR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "OR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "OR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "OR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "OR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "OR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "OR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "OR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "OR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "OR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "OR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "OR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "OR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "OR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "OR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "OR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "OR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "OR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "OR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "OR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "OR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "OR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "OR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "OR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "OR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "OR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "OR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "OR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "PA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "PA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "PA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "PA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "PA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "PA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "PA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "PA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "PA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "PA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "PA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "PA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "PA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "PA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "PA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "PA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "PA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "PA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "PA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "PA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "PA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "PA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "PA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "PA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "PA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "PA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "PA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "PA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "PA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "PA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "PA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "PA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "PA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "PA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "PA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "PA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "PA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "PR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "PR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "PR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "PR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "PR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "PR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "PR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "PR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "PR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "PR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "PR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "PR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "PR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "PR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "PR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "PR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "PR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "PR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "PR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "PR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "PR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "PR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STATE_DI_ELIGIBILITY", "PR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "PR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "PR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "PR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "PR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STATE_DI_ELIGIBILITY", "PR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STATE_DI_ELIGIBILITY", "PR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STATE_DI_ELIGIBILITY", "PR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "PR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STATE_DI_ELIGIBILITY", "PR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STATE_DI_ELIGIBILITY", "PR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "PR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "PR", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "PR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "PR", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "PR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "PR", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "PR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "PR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "PR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "PR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "PR", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "PR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "PR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "PR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "PR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "PR", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "RI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "RI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "RI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "RI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "RI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "RI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "RI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "RI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "RI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "RI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "RI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "RI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "RI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "RI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "RI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "RI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "RI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "RI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "RI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "RI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "RI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "RI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "RI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "RI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "RI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "RI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "RI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "RI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "RI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "RI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "RI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "RI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "RI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "RI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "RI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "RI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "RI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "RI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "RI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "RI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "RI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "RI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STATE_DI_ELIGIBILITY", "RI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "RI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "RI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "RI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "RI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STATE_DI_ELIGIBILITY", "RI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STATE_DI_ELIGIBILITY", "RI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STATE_DI_ELIGIBILITY", "RI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STATE_DI_ELIGIBILITY", "RI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STATE_DI_ELIGIBILITY", "RI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STATE_DI_ELIGIBILITY", "RI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "RI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "RI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "RI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "RI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "RI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "RI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "RI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "RI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "RI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "RI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "RI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "RI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "RI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "RI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "RI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "RI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "SC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "SC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "SC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "SC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "SC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "SC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "SC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "SC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "SC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "SC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "SC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "SC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "SC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "SC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "SC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "SC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "SC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "SC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "SC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "SC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "SC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "SC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "SC", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "SC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "SC", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "SC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "SC", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "SC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "SC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "SC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "SC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "SC", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "SC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "SC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "SC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "SC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "SC", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SD", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SD", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SD", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SD", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SD", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SD", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SD", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SD", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SD", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "SD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "SD", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "SD", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "SD", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "SD", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "SD", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "SD", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "SD", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "SD", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "SD", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "SD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "SD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "SD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "SD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "SD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "SD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "SD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "SD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "SD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "SD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "SD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "SD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "SD", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "SD", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "SD", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "SD", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "SD", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "SD", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "SD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "SD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "SD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "SD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "SD", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "SD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "SD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "SD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "SD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "SD", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "TN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "TN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "TN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "TN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "TN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "TN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "TN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "TN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "TN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "TN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "TN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "TN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "TN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "TN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "TN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "TN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "TN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "TN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "TN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "TN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "TN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "TN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "TN", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "TN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "TN", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "TN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "TN", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "TN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "TN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "TN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "TN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "TN", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "TN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "TN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "TN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "TN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "TN", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TX", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TX", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TX", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TX", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TX", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TX", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TX", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TX", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TX", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TX", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TX", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TX", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TX", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TX", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TX", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TX", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TX", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TX", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TX", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TX", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "TX", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "TX", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "TX", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "TX", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "TX", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "TX", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "TX", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "TX", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "TX", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "TX", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "TX", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "TX", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "TX", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "TX", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "TX", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "TX", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "TX", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "TX", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "TX", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "TX", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "TX", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "TX", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "TX", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "TX", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "TX", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "TX", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "TX", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "TX", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "TX", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "TX", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "TX", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "TX", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "TX", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "TX", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "TX", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "TX", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "TX", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "TX", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "UT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "UT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "UT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "UT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "UT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "UT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "UT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "UT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "UT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "UT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "UT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "UT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "UT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "UT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "UT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "UT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "UT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "UT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "UT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "UT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "UT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "UT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "UT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "UT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "UT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "UT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "UT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "UT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "UT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "UT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "UT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "UT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "UT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "UT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "UT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "UT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "UT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "UT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "UT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "UT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "UT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "UT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "UT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "UT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "UT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "UT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "UT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "UT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "UT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "UT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "UT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "UT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "UT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "UT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "UT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "UT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "UT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "UT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "VA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "VA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "VA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "VA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "VA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "VA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "VA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "VA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "VA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "VA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "VA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "VA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "VA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "VA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "VA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "VA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "VA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "VA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "VA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "VA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "VA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "VA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "VA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "VA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "VA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "VA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "VA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "VA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "VA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "VA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "VA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "VA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "VA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "VA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "VA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "VA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "VA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "VI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "VI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "VI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "VI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "VI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "VI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "VI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "VI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "VI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "VI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "VI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "VI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "VI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "VI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "VI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "VI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "VI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "VI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "VI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "VI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "VI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "VI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "VI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "VI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "VI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "VI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "VI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "VI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "VI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "VI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "VI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "VI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "VI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "VI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "VI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "VI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "VI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "VT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "VT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "VT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "VT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "VT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "VT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "VT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "VT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "VT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "VT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "VT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "VT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "VT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "VT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "VT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "VT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "VT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "VT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "VT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "VT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "VT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "VT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "VT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "VT", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "VT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "VT", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "VT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "VT", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "VT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "VT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "VT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "VT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "VT", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "VT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "VT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "VT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "VT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "VT", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "WA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "WA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "WA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "WA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "WA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "WA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "WA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "WA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "WA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "WA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "WA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "WA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "WA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "WA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "WA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "WA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "WA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "WA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "WA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "WA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "WA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "WA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "WA", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "WA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "WA", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "WA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "WA", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "WA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "WA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "WA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "WA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "WA", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "WA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "WA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "WA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "WA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "WA", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "WI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "WI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "WI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "WI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "WI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "WI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "WI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "WI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "WI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "WI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "WI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "WI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "WI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "WI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "WI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "WI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "WI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "WI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "WI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "WI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "WI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "WI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "WI", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "WI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "WI", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "WI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "WI", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "WI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "WI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "WI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "WI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "WI", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "WI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "WI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "WI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "WI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "WI", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WV", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WV", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WV", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WV", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WV", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WV", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WV", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WV", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WV", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "WV", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "WV", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "WV", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "WV", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "WV", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "WV", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "WV", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "WV", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "WV", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "WV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "WV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "WV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "WV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "WV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "WV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "WV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "WV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "WV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "WV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "WV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "WV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "WV", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "WV", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "WV", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "WV", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "WV", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "WV", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "WV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "WV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "WV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "WV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "WV", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "WV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "WV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "WV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "WV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "WV", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "WY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "WY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "WY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "WY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "WY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "WY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "WY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "WY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "WY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "WY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "WY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "WY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "WY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "WY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "WY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "WY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "NONE", "WY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_30_DAYS" ], [ "NONE", "WY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "NONE", "WY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "NONE", "WY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "NONE", "WY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "NONE", "WY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "WY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "WY", "BENEFIT_PERIOD_6MO", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "WY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "WY", "BENEFIT_PERIOD_1YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "WY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "WY", "BENEFIT_PERIOD_2YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "WY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "WY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "WY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "WY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "WY", "BENEFIT_PERIOD_5YR", "ELIMINATION_PERIOD_730_DAYS" ], [ "STUDENT", "WY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_60_DAYS" ], [ "STUDENT", "WY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_90_DAYS" ], [ "STUDENT", "WY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_180_DAYS" ], [ "STUDENT", "WY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_365_DAYS" ], [ "STUDENT", "WY", "BENEFIT_PERIOD_10YR", "ELIMINATION_PERIOD_730_DAYS" ] ],
        "displayValues" : {
          "ELIMINATION_PERIOD_30_DAYS" : "30",
          "ELIMINATION_PERIOD_60_DAYS" : "60",
          "ELIMINATION_PERIOD_90_DAYS" : "90",
          "ELIMINATION_PERIOD_180_DAYS" : "180",
          "ELIMINATION_PERIOD_730_DAYS" : "730",
          "ELIMINATION_PERIOD_365_DAYS" : "365"
        }
      },
      "incomeErSeQualBaseTbl" : {
        "columns" : [ "annualEarnedIncome", "base" ],
        "rows" : [ [ "15000", "500" ], [ "17000", "500" ], [ "19000", "500" ], [ "21000", "600" ], [ "23000", "700" ], [ "25000", "800" ], [ "27000", "800" ], [ "29000", "800" ], [ "31000", "1000" ], [ "33000", "1200" ], [ "35000", "1300" ], [ "37000", "1400" ], [ "39000", "1500" ], [ "41000", "1500" ], [ "43000", "2000" ], [ "45000", "2000" ], [ "47000", "2100" ], [ "50000", "2500" ], [ "52000", "2500" ], [ "54000", "2700" ], [ "56000", "2800" ], [ "58000", "3200" ], [ "60000", "3200" ], [ "62000", "3200" ], [ "64000", "3500" ], [ "66000", "3500" ], [ "68000", "3800" ], [ "70000", "3800" ], [ "72000", "4300" ], [ "75000", "4500" ], [ "80000", "4900" ], [ "85000", "5200" ], [ "90000", "5300" ], [ "95000", "5600" ], [ "100000", "6700" ], [ "105000", "6700" ], [ "110000", "7200" ], [ "115000", "7300" ], [ "120000", "8200" ], [ "125000", "8400" ], [ "130000", "8400" ], [ "135000", "9200" ], [ "140000", "9200" ], [ "145000", "9500" ], [ "150000", "10300" ], [ "155000", "10300" ], [ "160000", "10500" ], [ "165000", "10500" ], [ "170000", "11300" ], [ "175000", "11500" ], [ "180000", "11600" ], [ "185000", "11900" ], [ "190000", "11900" ], [ "195000", "12500" ], [ "200000", "13200" ], [ "210000", "13600" ], [ "220000", "13900" ], [ "230000", "14300" ], [ "240000", "15000" ], [ "250000", "15700" ], [ "260000", "15700" ], [ "270000", "15700" ], [ "280000", "16300" ], [ "290000", "16300" ], [ "300000", "17500" ], [ "325000", "18100" ], [ "350000", "19300" ], [ "375000", "19600" ], [ "400000", "19800" ], [ "425000", "19900" ], [ "450000", "20000" ], [ "475000", "20000" ], [ "500000", "20000" ], [ "525000", "20000" ], [ "550000", "20000" ], [ "575000", "20000" ], [ "600000", "20000" ], [ "625000", "20000" ], [ "650000", "20000" ], [ "675000", "20000" ], [ "700000", "20000" ], [ "725000", "20000" ], [ "750000", "20000" ], [ "775000", "20000" ], [ "800000", "20000" ], [ "825000", "20000" ], [ "850000", "20000" ], [ "875000", "20000" ], [ "900000", "20000" ], [ "925000", "20000" ], [ "950000", "20000" ], [ "975000", "20000" ], [ "1000000", "20000" ], [ "1050000", "20000" ], [ "1100000", "20000" ], [ "1150000", "20000" ], [ "1200000", "20000" ] ],
        "displayValues" : {
          "500" : "500",
          "600" : "600",
          "700" : "700",
          "800" : "800",
          "1000" : "1000",
          "1200" : "1200",
          "1300" : "1300",
          "1400" : "1400",
          "1500" : "1500",
          "2000" : "2000",
          "2100" : "2100",
          "2500" : "2500",
          "2700" : "2700",
          "2800" : "2800",
          "3200" : "3200",
          "3500" : "3500",
          "3800" : "3800",
          "4300" : "4300",
          "4500" : "4500",
          "4900" : "4900",
          "5200" : "5200",
          "5300" : "5300",
          "5600" : "5600",
          "6700" : "6700",
          "7200" : "7200",
          "7300" : "7300",
          "8200" : "8200",
          "8400" : "8400",
          "9200" : "9200",
          "9500" : "9500",
          "10300" : "10300",
          "10500" : "10500",
          "11300" : "11300",
          "11500" : "11500",
          "11600" : "11600",
          "11900" : "11900",
          "12500" : "12500",
          "13200" : "13200",
          "13600" : "13600",
          "13900" : "13900",
          "14300" : "14300",
          "15000" : "15000",
          "15700" : "15700",
          "16300" : "16300",
          "17500" : "17500",
          "18100" : "18100",
          "19300" : "19300",
          "19600" : "19600",
          "19800" : "19800",
          "19900" : "19900",
          "20000" : "20000"
        }
      },
      "benefitPrdTbl" : {
        "columns" : [ "benefitPeriod" ],
        "rows" : [ [ "BENEFIT_PERIOD_6MO" ], [ "BENEFIT_PERIOD_1YR" ], [ "BENEFIT_PERIOD_2YR" ], [ "BENEFIT_PERIOD_5YR" ], [ "BENEFIT_PERIOD_10YR" ] ],
        "displayValues" : {
          "BENEFIT_PERIOD_6MO" : "6MO",
          "BENEFIT_PERIOD_1YR" : "1YR",
          "BENEFIT_PERIOD_2YR" : "2YR",
          "BENEFIT_PERIOD_5YR" : "5YR",
          "BENEFIT_PERIOD_10YR" : "10YR"
        }
      },
      "incomeGrpBuyErSe" : {
        "columns" : [ "annualEarnedIncome", "total" ],
        "rows" : [ [ "15000", "1100" ], [ "17000", "1200" ], [ "19000", "1300" ], [ "21000", "1500" ], [ "23000", "1500" ], [ "25000", "1900" ], [ "27000", "1900" ], [ "29000", "1900" ], [ "31000", "2300" ], [ "33000", "2600" ], [ "35000", "3000" ], [ "37000", "3000" ], [ "39000", "3100" ], [ "41000", "3100" ], [ "43000", "3700" ], [ "45000", "3700" ], [ "47000", "3900" ], [ "50000", "4400" ], [ "52000", "4400" ], [ "54000", "4400" ], [ "56000", "4500" ], [ "58000", "5100" ], [ "60000", "5100" ], [ "62000", "5100" ], [ "64000", "5200" ], [ "66000", "5200" ], [ "68000", "5800" ], [ "70000", "5800" ], [ "72000", "5900" ], [ "75000", "6400" ], [ "80000", "6600" ], [ "85000", "7100" ], [ "90000", "7300" ], [ "95000", "7800" ], [ "100000", "8500" ], [ "105000", "8700" ], [ "110000", "9200" ], [ "115000", "9400" ], [ "120000", "10000" ], [ "125000", "10700" ], [ "130000", "10900" ], [ "135000", "11300" ], [ "140000", "11500" ], [ "145000", "12000" ], [ "150000", "12700" ], [ "155000", "12800" ], [ "160000", "13300" ], [ "165000", "13500" ], [ "170000", "14000" ], [ "175000", "14200" ], [ "180000", "14700" ], [ "185000", "14800" ], [ "190000", "15300" ], [ "195000", "15500" ], [ "200000", "16000" ], [ "210000", "16700" ], [ "220000", "17400" ], [ "230000", "18100" ], [ "240000", "18800" ], [ "250000", "19600" ], [ "260000", "20200" ], [ "270000", "20800" ], [ "280000", "21600" ], [ "290000", "22300" ], [ "300000", "22800" ], [ "325000", "24300" ], [ "350000", "25900" ], [ "375000", "27300" ], [ "400000", "28800" ], [ "425000", "30000" ], [ "450000", "30800" ], [ "475000", "31400" ], [ "500000", "32000" ], [ "525000", "32800" ], [ "550000", "33600" ], [ "575000", "34400" ], [ "600000", "35000" ], [ "625000", "35000" ], [ "650000", "35000" ], [ "675000", "35000" ], [ "700000", "35000" ], [ "725000", "35000" ], [ "750000", "35000" ], [ "775000", "35000" ], [ "800000", "35000" ], [ "825000", "35000" ], [ "850000", "35000" ], [ "875000", "35000" ], [ "900000", "35000" ], [ "925000", "35000" ], [ "950000", "35000" ], [ "975000", "35000" ], [ "1000000", "35000" ], [ "1050000", "35000" ], [ "1100000", "35000" ], [ "1150000", "35000" ], [ "1200000", "35000" ] ],
        "displayValues" : {
          "1100" : "1100",
          "1200" : "1200",
          "1300" : "1300",
          "1500" : "1500",
          "1900" : "1900",
          "2300" : "2300",
          "2600" : "2600",
          "3000" : "3000",
          "3100" : "3100",
          "3700" : "3700",
          "3900" : "3900",
          "4400" : "4400",
          "4500" : "4500",
          "5100" : "5100",
          "5200" : "5200",
          "5800" : "5800",
          "5900" : "5900",
          "6400" : "6400",
          "6600" : "6600",
          "7100" : "7100",
          "7300" : "7300",
          "7800" : "7800",
          "8500" : "8500",
          "8700" : "8700",
          "9200" : "9200",
          "9400" : "9400",
          "10000" : "10000",
          "10700" : "10700",
          "10900" : "10900",
          "11300" : "11300",
          "11500" : "11500",
          "12000" : "12000",
          "12700" : "12700",
          "12800" : "12800",
          "13300" : "13300",
          "13500" : "13500",
          "14000" : "14000",
          "14200" : "14200",
          "14700" : "14700",
          "14800" : "14800",
          "15300" : "15300",
          "15500" : "15500",
          "16000" : "16000",
          "16700" : "16700",
          "17400" : "17400",
          "18100" : "18100",
          "18800" : "18800",
          "19600" : "19600",
          "20200" : "20200",
          "20800" : "20800",
          "21600" : "21600",
          "22300" : "22300",
          "22800" : "22800",
          "24300" : "24300",
          "25900" : "25900",
          "27300" : "27300",
          "28800" : "28800",
          "30000" : "30000",
          "30800" : "30800",
          "31400" : "31400",
          "32000" : "32000",
          "32800" : "32800",
          "33600" : "33600",
          "34400" : "34400",
          "35000" : "35000"
        }
      },
      "incomeGrpBuyEr" : {
        "columns" : [ "annualEarnedIncome", "total" ],
        "rows" : [ [ "15000", "1100" ], [ "17000", "1200" ], [ "19000", "1300" ], [ "21000", "1500" ], [ "23000", "1500" ], [ "25000", "1900" ], [ "27000", "1900" ], [ "29000", "1900" ], [ "31000", "2300" ], [ "33000", "2300" ], [ "35000", "2400" ], [ "37000", "2600" ], [ "39000", "2600" ], [ "41000", "3000" ], [ "43000", "3000" ], [ "45000", "3100" ], [ "47000", "3100" ], [ "50000", "3700" ], [ "52000", "3700" ], [ "54000", "3700" ], [ "56000", "3900" ], [ "58000", "3900" ], [ "60000", "4400" ], [ "62000", "4400" ], [ "64000", "4400" ], [ "66000", "4500" ], [ "68000", "4500" ], [ "70000", "5100" ], [ "72000", "5100" ], [ "75000", "5200" ], [ "80000", "5800" ], [ "85000", "5900" ], [ "90000", "6400" ], [ "95000", "6600" ], [ "100000", "7100" ], [ "105000", "7300" ], [ "110000", "7800" ], [ "115000", "8000" ], [ "120000", "8500" ], [ "125000", "8700" ], [ "130000", "9200" ], [ "135000", "9400" ], [ "140000", "10000" ], [ "145000", "10100" ], [ "150000", "10700" ], [ "155000", "10900" ], [ "160000", "11300" ], [ "165000", "11500" ], [ "170000", "12000" ], [ "175000", "12200" ], [ "180000", "12700" ], [ "185000", "12800" ], [ "190000", "13300" ], [ "195000", "13500" ], [ "200000", "14000" ], [ "210000", "14700" ], [ "220000", "15400" ], [ "230000", "16100" ], [ "240000", "16800" ], [ "250000", "17600" ], [ "260000", "18200" ], [ "270000", "18900" ], [ "280000", "19600" ], [ "290000", "20300" ], [ "300000", "20800" ], [ "325000", "22300" ], [ "350000", "23900" ], [ "375000", "25300" ], [ "400000", "26800" ], [ "425000", "28000" ], [ "450000", "28800" ], [ "475000", "29400" ], [ "500000", "30000" ], [ "525000", "30800" ], [ "550000", "31600" ], [ "575000", "32400" ], [ "600000", "33000" ], [ "625000", "34000" ], [ "650000", "35000" ], [ "675000", "35000" ], [ "700000", "35000" ], [ "725000", "35000" ], [ "750000", "35000" ], [ "775000", "35000" ], [ "800000", "35000" ], [ "825000", "35000" ], [ "850000", "35000" ], [ "875000", "35000" ], [ "900000", "35000" ], [ "925000", "35000" ], [ "950000", "35000" ], [ "975000", "35000" ], [ "1000000", "35000" ], [ "1050000", "35000" ], [ "1100000", "35000" ], [ "1150000", "35000" ], [ "1200000", "35000" ] ],
        "displayValues" : {
          "1100" : "1100",
          "1200" : "1200",
          "1300" : "1300",
          "1500" : "1500",
          "1900" : "1900",
          "2300" : "2300",
          "2400" : "2400",
          "2600" : "2600",
          "3000" : "3000",
          "3100" : "3100",
          "3700" : "3700",
          "3900" : "3900",
          "4400" : "4400",
          "4500" : "4500",
          "5100" : "5100",
          "5200" : "5200",
          "5800" : "5800",
          "5900" : "5900",
          "6400" : "6400",
          "6600" : "6600",
          "7100" : "7100",
          "7300" : "7300",
          "7800" : "7800",
          "8000" : "8000",
          "8500" : "8500",
          "8700" : "8700",
          "9200" : "9200",
          "9400" : "9400",
          "10000" : "10000",
          "10100" : "10100",
          "10700" : "10700",
          "10900" : "10900",
          "11300" : "11300",
          "11500" : "11500",
          "12000" : "12000",
          "12200" : "12200",
          "12700" : "12700",
          "12800" : "12800",
          "13300" : "13300",
          "13500" : "13500",
          "14000" : "14000",
          "14700" : "14700",
          "15400" : "15400",
          "16100" : "16100",
          "16800" : "16800",
          "17600" : "17600",
          "18200" : "18200",
          "18900" : "18900",
          "19600" : "19600",
          "20300" : "20300",
          "20800" : "20800",
          "22300" : "22300",
          "23900" : "23900",
          "25300" : "25300",
          "26800" : "26800",
          "28000" : "28000",
          "28800" : "28800",
          "29400" : "29400",
          "30000" : "30000",
          "30800" : "30800",
          "31600" : "31600",
          "32400" : "32400",
          "33000" : "33000",
          "34000" : "34000",
          "35000" : "35000"
        }
      },
      "issueLimitTbl" : {
        "columns" : [ "occupationClass", "issueLimit" ],
        "rows" : [ [ "OCCUPATION_CLASS_1A", "5000" ], [ "OCCUPATION_CLASS_2A", "5000" ], [ "OCCUPATION_CLASS_3A", "5000" ], [ "OCCUPATION_CLASS_4A", "5000" ], [ "OCCUPATION_CLASS_5A", "5000" ], [ "OCCUPATION_CLASS_6A", "5000" ], [ "OCCUPATION_CLASS_2M", "5000" ], [ "OCCUPATION_CLASS_3M", "5000" ], [ "OCCUPATION_CLASS_4M", "5000" ], [ "OCCUPATION_CLASS_5M", "5000" ], [ "OCCUPATION_CLASS_N", "5000" ] ],
        "displayValues" : {
          "5000" : "5000"
        }
      },
      "incomeSeQualSisTbl" : {
        "columns" : [ "annualEarnedIncome", "sis" ],
        "rows" : [ [ "15000", "700" ], [ "17000", "800" ], [ "19000", "900" ], [ "21000", "1000" ], [ "23000", "1000" ], [ "25000", "1100" ], [ "27000", "1100" ], [ "29000", "1100" ], [ "31000", "1300" ], [ "33000", "1400" ], [ "35000", "1600" ], [ "37000", "1600" ], [ "39000", "1600" ], [ "41000", "1600" ], [ "43000", "1800" ], [ "45000", "1800" ], [ "47000", "1800" ], [ "50000", "1900" ], [ "52000", "2000" ], [ "54000", "2000" ], [ "56000", "2000" ], [ "58000", "2100" ], [ "60000", "2100" ], [ "62000", "2100" ], [ "64000", "2200" ], [ "66000", "2200" ], [ "68000", "2300" ], [ "70000", "2300" ], [ "72000", "2400" ], [ "75000", "2500" ], [ "80000", "2600" ], [ "85000", "2600" ], [ "90000", "2600" ], [ "95000", "2600" ], [ "100000", "2600" ], [ "105000", "2600" ], [ "110000", "2600" ], [ "115000", "2600" ], [ "120000", "2600" ], [ "125000", "2600" ], [ "130000", "2600" ], [ "135000", "2600" ], [ "140000", "2600" ], [ "145000", "2600" ], [ "150000", "2600" ], [ "155000", "2600" ], [ "160000", "2600" ], [ "165000", "2600" ], [ "170000", "2600" ], [ "175000", "2600" ], [ "180000", "2600" ], [ "185000", "2600" ], [ "190000", "2600" ], [ "195000", "2600" ], [ "200000", "2600" ], [ "210000", "2600" ], [ "220000", "2600" ], [ "230000", "2600" ], [ "240000", "2600" ], [ "250000", "2600" ], [ "260000", "2600" ], [ "270000", "2600" ], [ "280000", "2600" ], [ "290000", "2600" ], [ "300000", "2600" ], [ "325000", "2600" ], [ "350000", "2600" ], [ "375000", "2600" ], [ "400000", "2600" ], [ "425000", "2600" ], [ "450000", "2600" ], [ "475000", "2600" ], [ "500000", "2600" ], [ "525000", "2600" ], [ "550000", "2600" ], [ "575000", "2600" ], [ "600000", "2600" ], [ "625000", "2600" ], [ "650000", "2600" ], [ "675000", "2600" ], [ "700000", "2600" ], [ "725000", "2600" ], [ "750000", "2600" ], [ "775000", "2600" ], [ "800000", "2600" ], [ "825000", "2600" ], [ "850000", "2600" ], [ "875000", "2600" ], [ "900000", "2600" ], [ "925000", "2600" ], [ "950000", "2600" ], [ "975000", "2600" ], [ "1000000", "2600" ], [ "1050000", "2600" ], [ "1100000", "2600" ], [ "1150000", "2600" ], [ "1200000", "2600" ] ],
        "displayValues" : {
          "700" : "700",
          "800" : "800",
          "900" : "900",
          "1000" : "1000",
          "1100" : "1100",
          "1300" : "1300",
          "1400" : "1400",
          "1600" : "1600",
          "1800" : "1800",
          "1900" : "1900",
          "2000" : "2000",
          "2100" : "2100",
          "2200" : "2200",
          "2300" : "2300",
          "2400" : "2400",
          "2500" : "2500",
          "2600" : "2600"
        }
      },
      "incomeErQualSisTbl" : {
        "columns" : [ "annualEarnedIncome", "sis" ],
        "rows" : [ [ "15000", "700" ], [ "17000", "800" ], [ "19000", "800" ], [ "21000", "1000" ], [ "23000", "1000" ], [ "25000", "1100" ], [ "27000", "1100" ], [ "29000", "1100" ], [ "31000", "1300" ], [ "33000", "1300" ], [ "35000", "1400" ], [ "37000", "1400" ], [ "39000", "1400" ], [ "41000", "1600" ], [ "43000", "1600" ], [ "45000", "1600" ], [ "47000", "1600" ], [ "50000", "1800" ], [ "52000", "1800" ], [ "54000", "1900" ], [ "56000", "1900" ], [ "58000", "1900" ], [ "60000", "2100" ], [ "62000", "2100" ], [ "64000", "2100" ], [ "66000", "2100" ], [ "68000", "2100" ], [ "70000", "2200" ], [ "72000", "2200" ], [ "75000", "2300" ], [ "80000", "2500" ], [ "85000", "2500" ], [ "90000", "2500" ], [ "95000", "2600" ], [ "100000", "2600" ], [ "105000", "2600" ], [ "110000", "2600" ], [ "115000", "2600" ], [ "120000", "2600" ], [ "125000", "2600" ], [ "130000", "2600" ], [ "135000", "2600" ], [ "140000", "2600" ], [ "145000", "2600" ], [ "150000", "2600" ], [ "155000", "2600" ], [ "160000", "2600" ], [ "165000", "2600" ], [ "170000", "2600" ], [ "175000", "2600" ], [ "180000", "2600" ], [ "185000", "2600" ], [ "190000", "2600" ], [ "195000", "2600" ], [ "200000", "2600" ], [ "210000", "2600" ], [ "220000", "2600" ], [ "230000", "2600" ], [ "240000", "2600" ], [ "250000", "2600" ], [ "260000", "2600" ], [ "270000", "2600" ], [ "280000", "2600" ], [ "290000", "2600" ], [ "300000", "2600" ], [ "325000", "2600" ], [ "350000", "2600" ], [ "375000", "2600" ], [ "400000", "2600" ], [ "425000", "2600" ], [ "450000", "2600" ], [ "475000", "2600" ], [ "500000", "2600" ], [ "525000", "2600" ], [ "550000", "2600" ], [ "575000", "2600" ], [ "600000", "2600" ], [ "625000", "2600" ], [ "650000", "2600" ], [ "675000", "2600" ], [ "700000", "2600" ], [ "725000", "2600" ], [ "750000", "2600" ], [ "775000", "2600" ], [ "800000", "2600" ], [ "825000", "2600" ], [ "850000", "2600" ], [ "875000", "2600" ], [ "900000", "2600" ], [ "925000", "2600" ], [ "950000", "2600" ], [ "975000", "2600" ], [ "1000000", "2600" ], [ "1050000", "2600" ], [ "1100000", "2600" ], [ "1150000", "2600" ], [ "1200000", "2600" ] ],
        "displayValues" : {
          "700" : "700",
          "800" : "800",
          "1000" : "1000",
          "1100" : "1100",
          "1300" : "1300",
          "1400" : "1400",
          "1600" : "1600",
          "1800" : "1800",
          "1900" : "1900",
          "2100" : "2100",
          "2200" : "2200",
          "2300" : "2300",
          "2500" : "2500",
          "2600" : "2600"
        }
      },
      "incomeGrpBuyEeSe" : {
        "columns" : [ "annualEarnedIncome", "total" ],
        "rows" : [ [ "15000", "1000" ], [ "17000", "1100" ], [ "19000", "1200" ], [ "21000", "1300" ], [ "23000", "1300" ], [ "25000", "1600" ], [ "27000", "1600" ], [ "29000", "1600" ], [ "31000", "1900" ], [ "33000", "2200" ], [ "35000", "2500" ], [ "37000", "2500" ], [ "39000", "2600" ], [ "41000", "2600" ], [ "43000", "3100" ], [ "45000", "3100" ], [ "47000", "3200" ], [ "50000", "3600" ], [ "52000", "3600" ], [ "54000", "3600" ], [ "56000", "3700" ], [ "58000", "4200" ], [ "60000", "4200" ], [ "62000", "4200" ], [ "64000", "4400" ], [ "66000", "4400" ], [ "68000", "4600" ], [ "70000", "4600" ], [ "72000", "4700" ], [ "75000", "5100" ], [ "80000", "5200" ], [ "85000", "5700" ], [ "90000", "5800" ], [ "95000", "6300" ], [ "100000", "6800" ], [ "105000", "7000" ], [ "110000", "7300" ], [ "115000", "7500" ], [ "120000", "8000" ], [ "125000", "8500" ], [ "130000", "8600" ], [ "135000", "9000" ], [ "140000", "9100" ], [ "145000", "9500" ], [ "150000", "10000" ], [ "155000", "10200" ], [ "160000", "10500" ], [ "165000", "10600" ], [ "170000", "11000" ], [ "175000", "11600" ], [ "180000", "11600" ], [ "185000", "12100" ], [ "190000", "12100" ], [ "195000", "12600" ], [ "200000", "13000" ], [ "210000", "13600" ], [ "220000", "14100" ], [ "230000", "14600" ], [ "240000", "15100" ], [ "250000", "15600" ], [ "260000", "16200" ], [ "270000", "16300" ], [ "280000", "17200" ], [ "290000", "17500" ], [ "300000", "18300" ], [ "325000", "19500" ], [ "350000", "20900" ], [ "375000", "22100" ], [ "400000", "23500" ], [ "425000", "24700" ], [ "450000", "25900" ], [ "475000", "27000" ], [ "500000", "28600" ], [ "525000", "29600" ], [ "550000", "30800" ], [ "575000", "31700" ], [ "600000", "32000" ], [ "625000", "32600" ], [ "650000", "33400" ], [ "675000", "34200" ], [ "700000", "35000" ], [ "725000", "35000" ], [ "750000", "35000" ], [ "775000", "35000" ], [ "800000", "35000" ], [ "825000", "35000" ], [ "850000", "35000" ], [ "875000", "35000" ], [ "900000", "35000" ], [ "925000", "35000" ], [ "950000", "35000" ], [ "975000", "35000" ], [ "1000000", "35000" ], [ "1050000", "35000" ], [ "1100000", "35000" ], [ "1150000", "35000" ], [ "1200000", "35000" ] ],
        "displayValues" : {
          "1000" : "1000",
          "1100" : "1100",
          "1200" : "1200",
          "1300" : "1300",
          "1600" : "1600",
          "1900" : "1900",
          "2200" : "2200",
          "2500" : "2500",
          "2600" : "2600",
          "3100" : "3100",
          "3200" : "3200",
          "3600" : "3600",
          "3700" : "3700",
          "4200" : "4200",
          "4400" : "4400",
          "4600" : "4600",
          "4700" : "4700",
          "5100" : "5100",
          "5200" : "5200",
          "5700" : "5700",
          "5800" : "5800",
          "6300" : "6300",
          "6800" : "6800",
          "7000" : "7000",
          "7300" : "7300",
          "7500" : "7500",
          "8000" : "8000",
          "8500" : "8500",
          "8600" : "8600",
          "9000" : "9000",
          "9100" : "9100",
          "9500" : "9500",
          "10000" : "10000",
          "10200" : "10200",
          "10500" : "10500",
          "10600" : "10600",
          "11000" : "11000",
          "11600" : "11600",
          "12100" : "12100",
          "12600" : "12600",
          "13000" : "13000",
          "13600" : "13600",
          "14100" : "14100",
          "14600" : "14600",
          "15100" : "15100",
          "15600" : "15600",
          "16200" : "16200",
          "16300" : "16300",
          "17200" : "17200",
          "17500" : "17500",
          "18300" : "18300",
          "19500" : "19500",
          "20900" : "20900",
          "22100" : "22100",
          "23500" : "23500",
          "24700" : "24700",
          "25900" : "25900",
          "27000" : "27000",
          "28600" : "28600",
          "29600" : "29600",
          "30800" : "30800",
          "31700" : "31700",
          "32000" : "32000",
          "32600" : "32600",
          "33400" : "33400",
          "34200" : "34200",
          "35000" : "35000"
        }
      },
      "SID" : {
        "columns" : [ "issueState", "phoneNumber" ],
        "rows" : [ [ "AK", "1-907-269-7900" ], [ "AL", "1-334-269-3550" ], [ "AR", "1-501-371-2600" ], [ "AZ", "1-602-364-2499" ], [ "BV", "1-284-468-3701" ], [ "CA", "1-916-492-3500" ], [ "CO", "1-303-894-7499" ], [ "CT", "1-860-297-3800" ], [ "DC", "1-202-727-8000" ], [ "DE", "1-302-674-7300" ], [ "FL", "1-850-413-5914" ], [ "GA", "1-404-656-2056" ], [ "HI", "1-808-586-2790" ], [ "IA", "1-515-281-5705" ], [ "ID", "1-208-334-4250" ], [ "IL", "1-217-782-4515" ], [ "IN", "1-317-232-2385" ], [ "KS", "1-785-296-3071" ], [ "KY", "1-502-564-3630" ], [ "LA", "1-800-259-5300" ], [ "MA", "1-617-521-7794" ], [ "MD", "1-410-468-2090" ], [ "ME", "1-207-624-8475" ], [ "MI", "1-877-999-6442" ], [ "MN", "1-651-539-1500" ], [ "MO", "1-573-751-3365" ], [ "MS", "1-800-562-2957" ], [ "MT", "1-406-444-2040" ], [ "NC", "1-855-408-1212" ], [ "ND", "1-701-328-2440" ], [ "NE", "1-402-471-2201" ], [ "NH", "1-603-271-2261" ], [ "NJ", "1-609-292-7272" ], [ "NM", "1-505-827-4601" ], [ "NV", "1-775-687-0700" ], [ "NY", "1-518-474-4567" ], [ "OH", "1-614-644-2658" ], [ "OK", "1-405-521-2828" ], [ "OR", "1-503-947-7984" ], [ "PA", "1-717-787-2317" ], [ "PR", "1-787-304-8686" ], [ "RI", "1-401-462-9520" ], [ "SC", "1-803-737-6180" ], [ "SD", "1-605-773-3563" ], [ "TN", "1-615-741-2241" ], [ "TX", "1-800-252-3439" ], [ "UT", "1-801-538-3066" ], [ "VA", "1-804-371-9741" ], [ "VI", "1-340-774-7166" ], [ "VT", "1-802-828-3301" ], [ "WA", "1-360-725-7000" ], [ "WI", "1-608-266-3585" ], [ "WV", "1-304-558-3354" ], [ "WY", "1-307-777-7401" ] ],
        "displayValues" : {
          "1-907-269-7900" : "1-907-269-7900",
          "1-334-269-3550" : "1-334-269-3550",
          "1-501-371-2600" : "1-501-371-2600",
          "1-602-364-2499" : "1-602-364-2499",
          "1-284-468-3701" : "1-284-468-3701",
          "1-916-492-3500" : "1-916-492-3500",
          "1-303-894-7499" : "1-303-894-7499",
          "1-860-297-3800" : "1-860-297-3800",
          "1-202-727-8000" : "1-202-727-8000",
          "1-302-674-7300" : "1-302-674-7300",
          "1-850-413-5914" : "1-850-413-5914",
          "1-404-656-2056" : "1-404-656-2056",
          "1-808-586-2790" : "1-808-586-2790",
          "1-515-281-5705" : "1-515-281-5705",
          "1-208-334-4250" : "1-208-334-4250",
          "1-217-782-4515" : "1-217-782-4515",
          "1-317-232-2385" : "1-317-232-2385",
          "1-785-296-3071" : "1-785-296-3071",
          "1-502-564-3630" : "1-502-564-3630",
          "1-800-259-5300" : "1-800-259-5300",
          "1-617-521-7794" : "1-617-521-7794",
          "1-410-468-2090" : "1-410-468-2090",
          "1-207-624-8475" : "1-207-624-8475",
          "1-877-999-6442" : "1-877-999-6442",
          "1-651-539-1500" : "1-651-539-1500",
          "1-573-751-3365" : "1-573-751-3365",
          "1-800-562-2957" : "1-800-562-2957",
          "1-406-444-2040" : "1-406-444-2040",
          "1-855-408-1212" : "1-855-408-1212",
          "1-701-328-2440" : "1-701-328-2440",
          "1-402-471-2201" : "1-402-471-2201",
          "1-603-271-2261" : "1-603-271-2261",
          "1-609-292-7272" : "1-609-292-7272",
          "1-505-827-4601" : "1-505-827-4601",
          "1-775-687-0700" : "1-775-687-0700",
          "1-518-474-4567" : "1-518-474-4567",
          "1-614-644-2658" : "1-614-644-2658",
          "1-405-521-2828" : "1-405-521-2828",
          "1-503-947-7984" : "1-503-947-7984",
          "1-717-787-2317" : "1-717-787-2317",
          "1-787-304-8686" : "1-787-304-8686",
          "1-401-462-9520" : "1-401-462-9520",
          "1-803-737-6180" : "1-803-737-6180",
          "1-605-773-3563" : "1-605-773-3563",
          "1-615-741-2241" : "1-615-741-2241",
          "1-800-252-3439" : "1-800-252-3439",
          "1-801-538-3066" : "1-801-538-3066",
          "1-804-371-9741" : "1-804-371-9741",
          "1-340-774-7166" : "1-340-774-7166",
          "1-802-828-3301" : "1-802-828-3301",
          "1-360-725-7000" : "1-360-725-7000",
          "1-608-266-3585" : "1-608-266-3585",
          "1-304-558-3354" : "1-304-558-3354",
          "1-307-777-7401" : "1-307-777-7401"
        }
      },
      "premAllowDiscTbl" : {
        "columns" : [ "specialRestrictionEmployee", "premiumAllowancesDiscounts", "premiumAllowancesDiscountsValues" ],
        "rows" : [ [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "Association Discount", "15" ], [ "STATE_DI_ELIGIBILITY", "Association Discount", "15" ], [ "CALSTRS_OR_CALPERS_ELIGIBILITY", "Association Discount", "15" ], [ "NONE", "Association Discount", "15" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "Self Employed Discount", "15" ], [ "STATE_DI_ELIGIBILITY", "Self Employed Discount", "15" ], [ "CALSTRS_OR_CALPERS_ELIGIBILITY", "Self Employed Discount", "15" ], [ "NONE", "Self Employed Discount", "15" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "Common Employer Discount", "15" ], [ "STATE_DI_ELIGIBILITY", "Common Employer Discount", "15" ], [ "CALSTRS_OR_CALPERS_ELIGIBILITY", "Common Employer Discount", "15" ], [ "NONE", "Common Employer Discount", "15" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "Existing Customer Discount", "10" ], [ "STATE_DI_ELIGIBILITY", "Existing Customer Discount", "10" ], [ "CALSTRS_OR_CALPERS_ELIGIBILITY", "Existing Customer Discount", "10" ], [ "NONE", "Existing Customer Discount", "10" ], [ "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL", "Two Person Household Discount", "10" ], [ "STATE_DI_ELIGIBILITY", "Two Person Household Discount", "10" ], [ "CALSTRS_OR_CALPERS_ELIGIBILITY", "Two Person Household Discount", "10" ], [ "NONE", "Two Person Household Discount", "10" ] ],
        "displayValues" : {
          "15" : "15",
          "10" : "10"
        }
      },
      "occSpecClassTbl" : {
        "columns" : [ "occupationSpecialty", "occupationClass" ],
        "rows" : [ [ "OCC_CLASS_6A", "OCCUPATION_CLASS_6A" ], [ "OCC_CLASS_5A", "OCCUPATION_CLASS_5A" ], [ "OCC_CLASS_4A", "OCCUPATION_CLASS_4A" ], [ "OCC_CLASS_3A", "OCCUPATION_CLASS_3A" ], [ "OCC_CLASS_2A", "OCCUPATION_CLASS_2A" ], [ "OCC_CLASS_1A", "OCCUPATION_CLASS_1A" ], [ "OCC_CLASS_5M", "OCCUPATION_CLASS_5M" ], [ "OCC_CLASS_4M", "OCCUPATION_CLASS_4M" ], [ "OCC_CLASS_3M", "OCCUPATION_CLASS_3M" ], [ "OCC_CLASS_2M", "OCCUPATION_CLASS_2M" ], [ "ACCOUNTANT__4_YEAR_ACCOUNTING_DEGREE__AUDITOR_OR_CPA", "OCCUPATION_CLASS_6A" ], [ "ACCOUNTANTS", "OCCUPATION_CLASS_6A" ], [ "ACTIVE_DUTY_MILITARY", "OCCUPATION_CLASS_N" ], [ "ACTOR_ACTRESS_ENTERTAINER", "OCCUPATION_CLASS_N" ], [ "ACTUARY", "OCCUPATION_CLASS_6A" ], [ "ACUPUNCTURIST", "OCCUPATION_CLASS_2A" ], [ "ADVERTISING_MARKETING___ACCOUNT_EXECUTIVE_ACCOUNT_MANAGER", "OCCUPATION_CLASS_5A" ], [ "ADVERTISING_MARKETING___COPYWRITER", "OCCUPATION_CLASS_4A" ], [ "ADVERTISING_MARKETING___FREELANCE__W__DOCUMENTED_INCOME", "OCCUPATION_CLASS_3A" ], [ "AEROBICS_YOGA_INSTRUCTOR_PERSONAL_TRAINER", "OCCUPATION_CLASS_1A" ], [ "AIR_MARSHAL", "OCCUPATION_CLASS_N" ], [ "AIR_TRAFFIC_CONTROL_SPECIALIST", "OCCUPATION_CLASS_N" ], [ "ALCOHOL_BREWERY_DISTILLERY_WINERY_PLANT_WORKERS", "OCCUPATION_CLASS_1A" ], [ "ALL_OTHER_MUSIC", "OCCUPATION_CLASS_N" ], [ "ALL_OTHER_WAREHOUSE_WORKERS", "OCCUPATION_CLASS_1A" ], [ "ANESTHESIOLOGIST", "OCCUPATION_CLASS_3M" ], [ "ANIMAL_HANDLERS__ZOO_", "OCCUPATION_CLASS_N" ], [ "ANNOUNCER_COMMENTATOR", "OCCUPATION_CLASS_3A" ], [ "ANY_TYPE__OWNER", "OCCUPATION_CLASS_3A" ], [ "ARCHITECT___ALL_OTHERS__90__OFFICE_AND_CONSULTING_", "OCCUPATION_CLASS_5A" ], [ "ARCHITECT___BACHELOR_S_DEGREE", "OCCUPATION_CLASS_6A" ], [ "ARMORED_CAR_DRIVER", "OCCUPATION_CLASS_1A" ], [ "ART_DEALER_GALLERY_OWNER_CURATOR_AT_LEAST__45_000_INCOME_EACH_OF_LAST_TWO_YEARS", "OCCUPATION_CLASS_4A" ], [ "ASBESTOS_REMOVAL_WORKERS", "OCCUPATION_CLASS_N" ], [ "ASSEMBLER_BENCHWORKER_TOOLMAKER", "OCCUPATION_CLASS_1A" ], [ "ASTROLOGER", "OCCUPATION_CLASS_N" ], [ "ATTORNEY", "OCCUPATION_CLASS_6A" ], [ "ATTORNEY_LAWYER", "OCCUPATION_CLASS_6A" ], [ "AUCTIONEER__RETAIL_OR_WHOLESALE", "OCCUPATION_CLASS_2A" ], [ "AUDIOLOGIST", "OCCUPATION_CLASS_4A" ], [ "AUDIOLOGISTS", "OCCUPATION_CLASS_4A" ], [ "AUTHOR_NOVELIST_WRITER_PROOFREADER__SALARIED_ONLY_", "OCCUPATION_CLASS_4A" ], [ "AUTO_BUS_TRUCK_TAXI_DISPATCHER__OFFICE_DUTIES_ONLY_", "OCCUPATION_CLASS_3A" ], [ "AUTO_DEALERSHIP___GENERAL_MANAGER_FINANCE_MANAGER_BUSINESS_MANAGER", "OCCUPATION_CLASS_5A" ], [ "AUTO_DEALERSHIP___OWNER__ADMINISTRATIVE_DUTIES_ONLY", "OCCUPATION_CLASS_5A" ], [ "AUTO_DEALERSHIP___SALESPERSON_SALES_MANAGER", "OCCUPATION_CLASS_4A" ], [ "AUTO_DEALERSIP___WASHER_POLISHER", "OCCUPATION_CLASS_1A" ], [ "AUTO_GLASS_INSTALLER", "OCCUPATION_CLASS_2A" ], [ "AUTO_SALVAGE_WORKERS", "OCCUPATION_CLASS_N" ], [ "AUTOMOBILE_BODY_REPAIR_WORKER_WELDER", "OCCUPATION_CLASS_2A" ], [ "AUTOMOBILE_MANUFACTURING", "OCCUPATION_CLASS_1A" ], [ "AUTOMOBILE_MECHANIC", "OCCUPATION_CLASS_2A" ], [ "AUTOMOBILE_SERVICE_MANAGER__SUPERVISORY_ONLY_", "OCCUPATION_CLASS_4A" ], [ "BAILBONDSMAN", "OCCUPATION_CLASS_N" ], [ "BAILBONDSMAN___OFFICE_DUTIES_ONLY__NO_FIREARM", "OCCUPATION_CLASS_2A" ], [ "BAILBONDSMAN___OFFICE_DUTIES_ONLY__WITH_FIREARM", "OCCUPATION_CLASS_1A" ], [ "BAILIFF", "OCCUPATION_CLASS_1A" ], [ "BAKER", "OCCUPATION_CLASS_2A" ], [ "BAKERY___SUPERVISORY___ADMINISTRATIVE_DUTIES_ONLY__OWNER", "OCCUPATION_CLASS_3A" ], [ "BAKERY_DELIVERY", "OCCUPATION_CLASS_1A" ], [ "BANK_CASHIER_TELLER", "OCCUPATION_CLASS_3A" ], [ "BANKING_OFFICER__EXECUTIVE__BANK_EXAMINER", "OCCUPATION_CLASS_6A" ], [ "BARBER", "OCCUPATION_CLASS_2A" ], [ "BARTENDER__FT_OR_PT_", "OCCUPATION_CLASS_N" ], [ "BEEKEEPER__APIARIST_", "OCCUPATION_CLASS_2A" ], [ "BICYCLE_MESSENGER", "OCCUPATION_CLASS_N" ], [ "BIOMEDICAL_ENGINEER", "OCCUPATION_CLASS_4A" ], [ "BORDER_PATROL_OFFICER", "OCCUPATION_CLASS_N" ], [ "BREWERY_DISTILLERY_WINE_PLANT_WORKERS", "OCCUPATION_CLASS_1A" ], [ "BRIDGE_PAINTER", "OCCUPATION_CLASS_N" ], [ "BRIDGE_STRUCTURAL_STEEL_WORKERS_WELDERS", "OCCUPATION_CLASS_N" ], [ "BUTCHER", "OCCUPATION_CLASS_2A" ], [ "BUTLER_PERSONAL_ASSISTANT__W_2_ONLY_", "OCCUPATION_CLASS_2A" ], [ "BUYER__AGRICULTURAL_AND_LIVESTOCK_PRODUCTS", "OCCUPATION_CLASS_2A" ], [ "CABLE_SATELLITE_TELEVISION_EQUIP_REPAIRER_INSTALLER_SERVICER__NO_LINE_WORK__POLE_CLIMBING__OR_DIGGING_", "OCCUPATION_CLASS_3A" ], [ "CABLE_SATELLITE_TELEVISION_LINEMAN_POLE_CLIMBER", "OCCUPATION_CLASS_N" ], [ "CALL_CENTER_WORKERS", "OCCUPATION_CLASS_3A" ], [ "CAMERA_OPERATOR__MOTION_PICTURE_TELEVISION", "OCCUPATION_CLASS_2A" ], [ "CAMERA_OPERATOR_PHOTOGRAPHER", "OCCUPATION_CLASS_2A" ], [ "CAPTAIN__SPORT_FISHING_BOAT__TOURIST__PLEASURE_", "OCCUPATION_CLASS_1A" ], [ "CARGO_SHIP__CREW", "OCCUPATION_CLASS_N" ], [ "CARGO_SHIP__PILOT_OFFICERS", "OCCUPATION_CLASS_N" ], [ "CARPENTRY__WOODWORKER_CABINET_MAKER", "OCCUPATION_CLASS_2A" ], [ "CARPET_CLEANER_OR_INSTALLER", "OCCUPATION_CLASS_2A" ], [ "CARTOGRAPHER", "OCCUPATION_CLASS_3A" ], [ "CARTOONIST_ILLUSTRATOR__SALARIED_OR_SE_W___35K_NET_", "OCCUPATION_CLASS_3A" ], [ "CASINO___OTHERS", "OCCUPATION_CLASS_N" ], [ "CASINO_CASHIER__NOT_ON_FLOOR_", "OCCUPATION_CLASS_2A" ], [ "CASINO_DEALERS_PIT_BOSS_WORKERS_ON_FLOOR__MINIMUM_ONE_YEAR_WITH_EMPLOYER_", "OCCUPATION_CLASS_1A" ], [ "CASINO_MANAGER_SUPERVISOR_OPERATOR__NO_FLOOR_DUTIES_", "OCCUPATION_CLASS_4A" ], [ "CASINO_SECURITY__FIREARM", "OCCUPATION_CLASS_N" ], [ "CASINO_SECURITY__NO_FIREARM", "OCCUPATION_CLASS_1A" ], [ "CATERER", "OCCUPATION_CLASS_3A" ], [ "CERTIFIED_GEMOLOGIST_CERTIFIED_GEMOLOGIST_APPRAISER", "OCCUPATION_CLASS_4A" ], [ "CERTIFIED_NURSE_AIDE__CNA___DOCTOR_S_OFFICE_OR_CLINIC_ONLY", "OCCUPATION_CLASS_1A" ], [ "CHEMICAL_INDUSTRY___ALL_OTHER_WORKERS__ACIDS__ALKALIS__CARCINOGENS__OR_EXPLOSIVES_", "OCCUPATION_CLASS_N" ], [ "CHEMICAL_INDUSTRY___LAB_TECHNICIAN__NO_ACIDS__ALKALIS__CARCINOGENS__OR_EXPLOSIVES_", "OCCUPATION_CLASS_3A" ], [ "CHEMICAL_INDUSTRY___MACHINE_OPERATOR__FLOOR_WORKER__NO_ACIDS__ALKALIS__CARCINOGENS__OR_EXPLOSIVES_", "OCCUPATION_CLASS_1A" ], [ "CHEMICAL_INDUSTRY___SKILLED_WORKER__NO_ACIDS__ALKALIS__CARCINOGENS__OR_EXPLOSIVES_", "OCCUPATION_CLASS_3A" ], [ "CHEMICAL_INDUSTRY___TESTER__NO_ACIDS__ALKALIS__CARCINOGENS__OR_EXPLOSIVES_", "OCCUPATION_CLASS_1A" ], [ "CHICKEN_OR_BEEF_CLEANER_CUTTER_DRESSER_OR_PROCESSOR", "OCCUPATION_CLASS_N" ], [ "CHICKEN_POULTRY_GROWER_OR_RAISER", "OCCUPATION_CLASS_2A" ], [ "CHIMNEYSWEEP", "OCCUPATION_CLASS_1A" ], [ "CHIROPRACTOR", "OCCUPATION_CLASS_1A" ], [ "CHIROPRACTORS", "OCCUPATION_CLASS_1A" ], [ "CIRCUS_CARNIVAL_WORKERS", "OCCUPATION_CLASS_N" ], [ "CITRUS_FRUIT_GROWER", "OCCUPATION_CLASS_2A" ], [ "CITY__TOWN_POLICE__DETECTIVE_INSPECTOR__MARSHALS_SHERIFFS_STATE_HIGHWAY_PATROL__DEPUTIES__METER_PERSON", "OCCUPATION_CLASS_N" ], [ "CITY_COUNTY_STATE_POLICE_DISPATCHER__COMMUNICATIONS__NO_WEAPON_", "OCCUPATION_CLASS_3A" ], [ "CIVIC_CENTERS_CONVENTION_CENTERS_ARENAS___ADMINISTRATOR_MANAGER", "OCCUPATION_CLASS_4A" ], [ "CIVIC_CENTERS_CONVENTION_CENTERS_ARENAS___CLERICAL_OFFICE_PERSONNEL", "OCCUPATION_CLASS_4A" ], [ "CIVIC_CENTERS_CONVENTION_CENTERS_ARENAS___CONCESSION_WORKERS", "OCCUPATION_CLASS_1A" ], [ "CIVIC_CENTERS_CONVENTION_CENTERS_ARENAS___PRODUCTION_WORKERS__LIGHTS__PROPERTY__SOUND_", "OCCUPATION_CLASS_2A" ], [ "CLAIMS_EXAMINER_UNDERWRITER__OFFICE_DUTIES_ONLY_", "OCCUPATION_CLASS_6A" ], [ "CLAIMS_EXAMINER_UNDERWRITER__WITH_FIELD_DUTIES_", "OCCUPATION_CLASS_4A" ], [ "CLEANERS___SUPERVISORY_ADMINISTRATIVE_DUTIES_ONLY", "OCCUPATION_CLASS_3A" ], [ "CLERICAL___GENERAL", "OCCUPATION_CLASS_3A" ], [ "CLERICAL___INVENTORY_CONTROL", "OCCUPATION_CLASS_2A" ], [ "CLERICAL___QUALITY_CONTROL", "OCCUPATION_CLASS_3A" ], [ "CLOCK_WATCH_REPAIRER", "OCCUPATION_CLASS_2A" ], [ "CLOTH_CLOTHING_FASHION_DESIGNER", "OCCUPATION_CLASS_3A" ], [ "COLLEGE_UNIVERSITY___DEAN_PROFESSOR_REGISTRAR", "OCCUPATION_CLASS_6A" ], [ "COLLEGIATE_ATHLETIC_DIRECTOR", "OCCUPATION_CLASS_4A" ], [ "COLUMNIST", "OCCUPATION_CLASS_4A" ], [ "COMMERCIAL_ARTIST_GRAPHIC_ARTIST_COMMERCIAL_DESIGNER__SALARIED__OR_SE_W___35K_NET_", "OCCUPATION_CLASS_3A" ], [ "COMMERCIAL_PHOTOGRAPHER__NON_STUDIO__SPORTING_EVENTS__CORP_FUNCTIONS__CONCERTS__FILM_ON_LOCATION_", "OCCUPATION_CLASS_2A" ], [ "COMMODITIES_FUTURES_OPTIONS_FLOOR_TRADER", "OCCUPATION_CLASS_N" ], [ "COMMODITIES_FUTURES_OPTIONS_OTHER_BROKER", "OCCUPATION_CLASS_4A" ], [ "COMPOSITOR_LITHOGRAPHER_PRESSMAN_TYPESETTER__ENGRAVER__PHOTOENGRAVER__MACHINE_OPERATOR__MAINENANCE_MECHANIC", "OCCUPATION_CLASS_1A" ], [ "COMPUTER_INSTALLER", "OCCUPATION_CLASS_3A" ], [ "COMPUTER_SERVICER_REPAIRER", "OCCUPATION_CLASS_3A" ], [ "CONSTRUCTION_JOB_SUPERVISOR_FOREMAN", "OCCUPATION_CLASS_3A" ], [ "CONSULTANT_LOBBYIST", "OCCUPATION_CLASS_5A" ], [ "CONSULTANT_LOBBYIST___IT_COMPUTER_SCIENCE_DEGREE_ONLY", "OCCUPATION_CLASS_6A" ], [ "CONVENIENCE_STORE___OWNER_MANAGER_SUPERVISOR", "OCCUPATION_CLASS_2A" ], [ "CORPORATE_OFFICER_EXECUTIVE___ADMIN_DUTIES_ONLY__AT_LEAST__100_000_INCOME", "OCCUPATION_CLASS_6A" ], [ "CORPORATE_OFFICER_EXECUTIVE___ALL_OTHERS", "OCCUPATION_CLASS_5A" ], [ "COSMETOLOGIST_HAIRSTYLIST__W_2_OR_RENTING_BOOTH_", "OCCUPATION_CLASS_2A" ], [ "COSTUME_MAKEUP__SPECIAL_EFFECTS_MAKEUP", "OCCUPATION_CLASS_2A" ], [ "COURT_REPORTER_STENOGRAPHER", "OCCUPATION_CLASS_1A" ], [ "CRANE_OPERATOR", "OCCUPATION_CLASS_1A" ], [ "CREAMERY_DAIRY_PLANT_WORKERS", "OCCUPATION_CLASS_1A" ], [ "CROP_DUSTER_OTHER_PILOTS", "OCCUPATION_CLASS_N" ], [ "CUSTODIANS_JANITORS_OTHER_CLEAN_UP_WORKERS", "OCCUPATION_CLASS_1A" ], [ "CUSTOMS_AND_IMMIGRATION_INSPECTOR__INSIDE_DUTIES_ONLY__NO_WEAPON_", "OCCUPATION_CLASS_4A" ], [ "DAIRY_FARM_RANCH_ORCHARD_WINERY_WORKERS", "OCCUPATION_CLASS_1A" ], [ "DAIRY_FARMER", "OCCUPATION_CLASS_2A" ], [ "DANCING_INSTRUCTOR", "OCCUPATION_CLASS_1A" ], [ "DATA_ENTRY", "OCCUPATION_CLASS_3A" ], [ "DAY_CARE___NOT_IN_HOME_OR_ON_PROPERTY", "OCCUPATION_CLASS_2A" ], [ "DAY_CARE___NOT_IN_HOME_OR_ON_PROPERTY__OWNER_DIRECTOR__ADMINISTRATIVE_DUTIES_ONLY_", "OCCUPATION_CLASS_4A" ], [ "DAY_CARE__HOME_BASED_____OWNER_MUST_BE_ST_LICENSED__AT_LEAST_2_YRS_IN_BUSINESS_W__TAX_FORMS__MIN_3_CHILD_UNRELATED_TO_PROVIDER_", "OCCUPATION_CLASS_2A" ], [ "DELIVERY_OR_ROUTE_DRIVER", "OCCUPATION_CLASS_1A" ], [ "DENTAL_ASSISTANT", "OCCUPATION_CLASS_2A" ], [ "DENTAL_HYGIENIST", "OCCUPATION_CLASS_2A" ], [ "DENTAL_LAB_TECHNICIAN", "OCCUPATION_CLASS_2A" ], [ "DENTIST__GENERAL_OR_SPECIALTY", "OCCUPATION_CLASS_3M" ], [ "DENTISTS", "OCCUPATION_CLASS_3M" ], [ "DERMATOLOGIST", "OCCUPATION_CLASS_4M" ], [ "DIALYSIS__ECG__LABORATORY__ULTRASOUND__X_RAY_TECHINCIANS", "OCCUPATION_CLASS_4A" ], [ "DIEMAKER_ENGRAVER", "OCCUPATION_CLASS_1A" ], [ "DIRECTOR", "OCCUPATION_CLASS_4A" ], [ "DISC_JOCKEY__RADIO_ANNOUNCER", "OCCUPATION_CLASS_3A" ], [ "DISC_JOCKEY__SELF_EMPLOYED__WEDDINGS__PARTIES_ETC_", "OCCUPATION_CLASS_2A" ], [ "DOG_CAT_BREEDER", "OCCUPATION_CLASS_N" ], [ "DOG_TRAINER_W__DOCUMENTED_INCOME", "OCCUPATION_CLASS_1A" ], [ "DOGWALKER_SITTER___IN_HOUSE", "OCCUPATION_CLASS_N" ], [ "DRIVING_INSTRUCTOR", "OCCUPATION_CLASS_1A" ], [ "DRY_CLEANING_LAUNDRY_OWNER_MANAGER_SUPERVISOR", "OCCUPATION_CLASS_4A" ], [ "DRY_CLEANING_LAUNDRY_WORKERS", "OCCUPATION_CLASS_2A" ], [ "DRY_WALL_WORKER_PLASTERER", "OCCUPATION_CLASS_2A" ], [ "ECONOMIST", "OCCUPATION_CLASS_6A" ], [ "EDITOR_PUBLISHER_PROOFREADER", "OCCUPATION_CLASS_5A" ], [ "ELECTRIC_SOLAR_NUCLEAR_OIL_GAS___MANAGER_SUPERVISOR_ENGINEER__OFFICE_DUTIES_ONLY_", "OCCUPATION_CLASS_4A" ], [ "ELECTRIC_SOLAR_NUCLEAR_OIL_GAS___OTHER_EMPLOYEES", "OCCUPATION_CLASS_1A" ], [ "ELECTRICAL_INDUSTRY___FIELD_SUPERVISOR_ESTIMATOR", "OCCUPATION_CLASS_3A" ], [ "ELECTRICIAN", "OCCUPATION_CLASS_2A" ], [ "ELEVATOR_MECHANIC", "OCCUPATION_CLASS_1A" ], [ "EMERGENCY_ROOM_PHYSICIAN", "OCCUPATION_CLASS_3M" ], [ "EMERGENCY_VEHICLE__TOW_TRUCK_DRIVER", "OCCUPATION_CLASS_1A" ], [ "ENGINEER___INSPECTOR_SUPERVISOR__WITH_FIELD_DUTIES_", "OCCUPATION_CLASS_4A" ], [ "ENGINEER_ARCHITECTS", "OCCUPATION_CLASS_6A" ], [ "ESCROW_TITLE_CLERKS", "OCCUPATION_CLASS_5A" ], [ "ESTHETICIAN__ELECTROLOGIST_MANICURIST_MAKEUP_ARTIST", "OCCUPATION_CLASS_2A" ], [ "EVENT_PLANNER__CORPORATE_WEDDING__W_2_OR_SE_W_NET_INCOME____30K_", "OCCUPATION_CLASS_4A" ], [ "EXPLOSIVE_HANDLER_BLASTER", "OCCUPATION_CLASS_N" ], [ "EXTERMINATOR_FUMIGATOR", "OCCUPATION_CLASS_1A" ], [ "FACTORY_CANNING_PRESERVING_WORKERS", "OCCUPATION_CLASS_1A" ], [ "FAMILY_PRACTICE_PEDIATRICIAN", "OCCUPATION_CLASS_5M" ], [ "FARM_IMPLEMENT_DEALER__OFFICE_DUTIES_ONLY_", "OCCUPATION_CLASS_3A" ], [ "FARMER_TREE_FARMER", "OCCUPATION_CLASS_2A" ], [ "FARRIER__HORSESHOER", "OCCUPATION_CLASS_1A" ], [ "FASHION_MODEL", "OCCUPATION_CLASS_N" ], [ "FINANCIAL_ADVISOR_AGENT___2_YEARS_EXPERIENCE", "OCCUPATION_CLASS_5A" ], [ "FINANCIAL_ADVISOR_AGENT___OTHER", "OCCUPATION_CLASS_4A" ], [ "FINANCIAL_PLANNER", "OCCUPATION_CLASS_5A" ], [ "FIREARMS_REPAIR", "OCCUPATION_CLASS_1A" ], [ "FIREARMS_TRAINING_BUSINESS_OWNER__NO_COMBAT_STYLE_TRAINING", "OCCUPATION_CLASS_1A" ], [ "FIREFIGHTER_EMT_FT_ALL__INCLUDING_DRIVERS", "OCCUPATION_CLASS_1A" ], [ "FISH_AND_GAME_WARDEN__NO_WEAPON_", "OCCUPATION_CLASS_1A" ], [ "FISH_HATCHERY_WORKER", "OCCUPATION_CLASS_1A" ], [ "FISHERMEN_AND_SURFACE_WORKERS", "OCCUPATION_CLASS_N" ], [ "FLAT_ROOF_WORKERS_ONLY", "OCCUPATION_CLASS_1A" ], [ "FLIGHT_ATTENDANT_STEWARD_STEWARDESS", "OCCUPATION_CLASS_N" ], [ "FLOOR_COVERING_LAYER_LINOLEUM___CARPET_WORKER", "OCCUPATION_CLASS_2A" ], [ "FLORIST___ADMINISTRATIVE_OR_SALES_ONLY__NO_GREENHOUSE_WORK_", "OCCUPATION_CLASS_3A" ], [ "FLORIST___OTHERS_WITH_GREENHOUSE_WORK", "OCCUPATION_CLASS_2A" ], [ "FOODTRUCK_OPERATOR", "OCCUPATION_CLASS_1A" ], [ "FOREMAN_OR_GRAPHIC_LITHOGRAPHIC_ARTIST_COPYWRITER_PHOTOGRAPHER", "OCCUPATION_CLASS_3A" ], [ "FOREST_RANGER", "OCCUPATION_CLASS_2A" ], [ "FORK_LIFT_OPERATOR", "OCCUPATION_CLASS_1A" ], [ "FOUNDRY", "OCCUPATION_CLASS_N" ], [ "FOUNDRY", "OCCUPATION_CLASS_N" ], [ "FREELANCE_WRITER_AUTHOR_NOVELIST", "OCCUPATION_CLASS_N" ], [ "FREIGHT_OR_BAGGAGE_HANDLER_BELLHOP_PORTER", "OCCUPATION_CLASS_1A" ], [ "FULL_TIME", "OCCUPATION_CLASS_N" ], [ "FUNERAL_DIRECTOR", "OCCUPATION_CLASS_4A" ], [ "GARBAGE_COLLECTOR", "OCCUPATION_CLASS_1A" ], [ "GARBAGE_SANITATION_TRUCK_DRIVER", "OCCUPATION_CLASS_1A" ], [ "GARDENER_GREENHOUSE_WORKER_NURSERY_WORKER", "OCCUPATION_CLASS_1A" ], [ "GENERAL_LABORER_CLEAN_UP__DEMOLITION_WORKER", "OCCUPATION_CLASS_1A" ], [ "GLASS_PRODUCTS_WORKER", "OCCUPATION_CLASS_1A" ], [ "GLAZIER", "OCCUPATION_CLASS_1A" ], [ "GOLDSMITH_SILVERSMITH_DIAMOND_CUTTER", "OCCUPATION_CLASS_2A" ], [ "GOLF_COUNTRY_CLUB_GREENSKEEPER_GROUNDSKEEPER", "OCCUPATION_CLASS_1A" ], [ "GOLF_COUNTRY_CLUB_MANAGER_PROPRIETOR", "OCCUPATION_CLASS_4A" ], [ "GOLF_COUNTRY_CLUB_PROFESSIONAL__GOLF_OR_TENNIS__FULL_TIME_ONLY_", "OCCUPATION_CLASS_2A" ], [ "GOLF_COUNTRY_CLUB_SUPERVISOR_OF_GROUNDS_CREW__LIGHT_PHYSICAL_ACTIVITY_", "OCCUPATION_CLASS_2A" ], [ "GRAIN_ELEVATORS_OR_MILLS__NON_OFFICE_WORKERS_", "OCCUPATION_CLASS_N" ], [ "GRAIN_ELEVATORS_OR_MILLS__OFFICE_WORKERS_", "OCCUPATION_CLASS_2A" ], [ "GROCERY_STORE_MAINTENANCE_CLEAN_UP_WORKERS", "OCCUPATION_CLASS_1A" ], [ "GROCERY_STORE_MANAGER", "OCCUPATION_CLASS_4A" ], [ "GROCERY_STORE_STOCK_CLERK_DELI_PRODUCE_BUTCHER_BAKERY", "OCCUPATION_CLASS_2A" ], [ "GUARD__SECURITY_OR_BANK__NO_WEAPON_", "OCCUPATION_CLASS_1A" ], [ "GUARD__SECURITY_OR_BANK__WITH_WEAPON_", "OCCUPATION_CLASS_N" ], [ "HANDYMAN_WITH_DEMOLITION__ROOFING__LADDERS", "OCCUPATION_CLASS_1A" ], [ "HANDYMAN_WITHOUT_DEMOLITION__ROOFING__LADDERS", "OCCUPATION_CLASS_2A" ], [ "HARBOR_MASTER", "OCCUPATION_CLASS_N" ], [ "HARBOR_PILOT", "OCCUPATION_CLASS_1A" ], [ "HEALTH_CARE_ADMINISTRATOR", "OCCUPATION_CLASS_3A" ], [ "HEATING__VENTILATION__AND_AIR_CONDITIONING_SERVICE_REPAIR_INSTALLATION", "OCCUPATION_CLASS_2A" ], [ "HEAVY_EQUIPMENT_OPERATOR__GRADER_BULLDOZER_EARTH_MOVER_CRANE_", "OCCUPATION_CLASS_1A" ], [ "HIGHWAY__ROAD_OR_STREET_CONSTRUCTION_WORKER_LABORER", "OCCUPATION_CLASS_1A" ], [ "HOME_HEALTH_CARE_PROVIDER_OTHER_THAN_RN_LPN_LVN_CAN", "OCCUPATION_CLASS_N" ], [ "HOME_INSPECTOR", "OCCUPATION_CLASS_2A" ], [ "HORSE_BREAKER", "OCCUPATION_CLASS_N" ], [ "HORSE_TRAINER_OR_OWNER", "OCCUPATION_CLASS_N" ], [ "HOTEL_CARETAKER_MAINTENANCE", "OCCUPATION_CLASS_1A" ], [ "HOTEL_DESK_CLERK", "OCCUPATION_CLASS_3A" ], [ "HOTEL_MANAGER_OWNER__OFFICE_DUTIES_ONLY_", "OCCUPATION_CLASS_4A" ], [ "HOUSEHOLD_APPLIANCES_SERVICE_REPAIR_INSTALLATION", "OCCUPATION_CLASS_2A" ], [ "HUNTING_FISHING_GUIDE", "OCCUPATION_CLASS_N" ], [ "INLAND_VESSEL_PILOT", "OCCUPATION_CLASS_N" ], [ "INSULATION_WORKER", "OCCUPATION_CLASS_1A" ], [ "INSURANCE_GENERAL_AGENT__OWNER_OF_AN_AGENCY_", "OCCUPATION_CLASS_5A" ], [ "INSURANCE_OFFICE_MANAGER", "OCCUPATION_CLASS_4A" ], [ "INTERIOR_DESIGNER_NO_HANDS_ON_PAINTING__ETC_", "OCCUPATION_CLASS_3A" ], [ "INTERNAL_MEDICINE", "OCCUPATION_CLASS_5M" ], [ "INTERPRETER_TRANSLATOR", "OCCUPATION_CLASS_4A" ], [ "IT___ADMINISTRATOR__CAPACITY_MANAGEMENT_SPECIALIST", "OCCUPATION_CLASS_5A" ], [ "IT___ENGINEER_ARCHITECT__PROGRAMMER__SYSTEM_ANALYST__WEB_DEVELOPER", "OCCUPATION_CLASS_6A" ], [ "IT___HELP_DESK_WORKER__TECHNICAL_SUPPORT_STAFF", "OCCUPATION_CLASS_4A" ], [ "JOURNALIST_ON_STAFF_OF_NEWSPAPER_PERIODICAL", "OCCUPATION_CLASS_4A" ], [ "JUDGE", "OCCUPATION_CLASS_6A" ], [ "JUVENILE_DETENTION_FACILITY_WORKERS", "OCCUPATION_CLASS_N" ], [ "K_12_ADMINISTRATOR_GUIDANCE_COUNSELOR_SPECIAL_EDUCATION_DRIVER_EDUCATION", "OCCUPATION_CLASS_4A" ], [ "K_12_ATHLETIC_DIRECTOR", "OCCUPATION_CLASS_4A" ], [ "KELP_FARMING__ON_OCEAN_", "OCCUPATION_CLASS_N" ], [ "KENNEL_DAY_CARE_OPERATOR__NOT_IN_HOME_", "OCCUPATION_CLASS_1A" ], [ "LANDSCAPE_ARCHITECT", "OCCUPATION_CLASS_4A" ], [ "LANDSCAPE_CONTRACTOR", "OCCUPATION_CLASS_4A" ], [ "LAW_ENFORCEMENT_PROCESS_SERVER", "OCCUPATION_CLASS_N" ], [ "LEGAL_ASSISTANT__SECRETARY", "OCCUPATION_CLASS_5A" ], [ "LIBRARIAN", "OCCUPATION_CLASS_5A" ], [ "LIQUOR_STORE_OWNER_MANAGER", "OCCUPATION_CLASS_2A" ], [ "LIQUOR_WHOLESALER", "OCCUPATION_CLASS_4A" ], [ "LIVESTOCK_RAISER_OR_FEEDER_RANCHER", "OCCUPATION_CLASS_2A" ], [ "LOCKSMITH_KEYMAKER", "OCCUPATION_CLASS_3A" ], [ "LONGSHOREMAN__DOCKWORKER__STEVEDORE__WHARFWORKER", "OCCUPATION_CLASS_N" ], [ "LUMBER_INDUSTRY___OFFICE_DUTIES_ONLY", "OCCUPATION_CLASS_4A" ], [ "MACHINE_OPERATOR_MACHINIST_MECHANIC_MILLWRIGHT", "OCCUPATION_CLASS_1A" ], [ "MAID__W_2_ONLY_", "OCCUPATION_CLASS_1A" ], [ "MANAGER_SUPERINTENDENT", "OCCUPATION_CLASS_2A" ], [ "MANUFACTURING___ADMINISTRATIVE_SUPERVISORY_DUTIES_ONLY", "OCCUPATION_CLASS_4A" ], [ "MANUFACTURING___FOREMAN_INSPECTOR_SUPERINTENDENT", "OCCUPATION_CLASS_4A" ], [ "MANUFACTURING___INSTALLER_TESTER", "OCCUPATION_CLASS_1A" ], [ "MANUFACTURING___LAB_TECHNICIAN_OTHER_SKILLED_WORKER", "OCCUPATION_CLASS_3A" ], [ "MARIJUANA_FARMER", "OCCUPATION_CLASS_N" ], [ "MARTIAL_ARTS_INSTRUCTOR", "OCCUPATION_CLASS_N" ], [ "MASON_BRICKWORKER_CEMENT_WORKER_TILESETTER", "OCCUPATION_CLASS_1A" ], [ "MASSAGE__CERTIFIED_OR_LICENSED_", "OCCUPATION_CLASS_1A" ], [ "MECHANIC__AIRCRAFT_BOAT_TRUCK_SMALL_ENGINE_", "OCCUPATION_CLASS_2A" ], [ "MECHANICAL_ELECTRICAL_STRUCTURAL_RPE___OTHER_PROFESSIONAL_DEGREES", "OCCUPATION_CLASS_6A" ], [ "MEDICAL_ASSISTANT", "OCCUPATION_CLASS_2A" ], [ "METER_INSTALLER", "OCCUPATION_CLASS_1A" ], [ "METER_READER_OR_INSPECTOR", "OCCUPATION_CLASS_1A" ], [ "MILLWRIGHT", "OCCUPATION_CLASS_1A" ], [ "MINING___MANAGER_OWNER", "OCCUPATION_CLASS_4A" ], [ "MINING___OUTSIDE_FOREMAN__SURFACE_ONLY_", "OCCUPATION_CLASS_2A" ], [ "MINISTER_RABBI_PASTOR", "OCCUPATION_CLASS_4A" ], [ "MISSIONARY__SALARIED_AND___90_DAYS__YR_OUT_OF_US_", "OCCUPATION_CLASS_4A" ], [ "MONUMENT_WORKER_STONE_CARVER", "OCCUPATION_CLASS_1A" ], [ "MORTICIAN___NO_EMBALMING", "OCCUPATION_CLASS_4A" ], [ "MORTICIAN___WITH_EMBALMING", "OCCUPATION_CLASS_3A" ], [ "MOUNTAIN_CLIMBING_OR_RIVER_GUIDE", "OCCUPATION_CLASS_N" ], [ "MOVER____FURNITURE_AND_HOUSEHOLD_GOODS", "OCCUPATION_CLASS_N" ], [ "MOVING_AND_STORAGE___ESTIMATOR_FOREMAN__NO_MANUAL_LABOR_", "OCCUPATION_CLASS_4A" ], [ "MOVING_AND_STORAGE___OWNER_MANAGER__NO_MANUAL_LABOR_", "OCCUPATION_CLASS_5A" ], [ "MULTI_LEVEL_MARKETING__IN_HOME_JEWELRY__MAKEUP_CLOTHING_COOKWARE_SALES____FT", "OCCUPATION_CLASS_N" ], [ "MUSICAL_INSTRUMENT_REPAIRER", "OCCUPATION_CLASS_2A" ], [ "MUSICIAN__FULL_TIME_ORCHESTRA_STUDIO_COMPOSER_ARRANGER_", "OCCUPATION_CLASS_2A" ], [ "MUSICIAN_SINGER__NIGHT_CLUB_RESTAURANT_LOUNGE_TAVERN_", "OCCUPATION_CLASS_N" ], [ "NANNY_AU_PAIR", "OCCUPATION_CLASS_N" ], [ "NATUROPATH", "OCCUPATION_CLASS_2M" ], [ "NON_HAZARDOUS_PHOTOGRAPHER__WEDDINGS_FAMILY_PORTRAITS__ETC__", "OCCUPATION_CLASS_4A" ], [ "NURSE_ANESTHETIST", "OCCUPATION_CLASS_3A" ], [ "NURSE_MIDWIFE", "OCCUPATION_CLASS_2A" ], [ "NURSE_IN_PSYCHIATRIC_HOSPITAL_PRISON_JAIL", "OCCUPATION_CLASS_N" ], [ "NURSE_PRACTITIONER", "OCCUPATION_CLASS_4A" ], [ "NUTRITIONIST_OR_DIETICIAN__NO_FOOD_PREPARATION_", "OCCUPATION_CLASS_4A" ], [ "OBSTETRICS_GYNECOLOGY", "OCCUPATION_CLASS_3M" ], [ "OCCUPATIONAL_THERAPIST__HOSPITAL__CLINIC__DOCTOR_S_OFFICE_", "OCCUPATION_CLASS_4A" ], [ "OCCUPATIONAL_THERAPIST__IN_HOME_", "OCCUPATION_CLASS_3A" ], [ "OFFICE_ADMINISTRATIVE_ASSISTANT", "OCCUPATION_CLASS_5A" ], [ "OFFICE_ADMINISTRATIVE_DUTIES_ONLY", "OCCUPATION_CLASS_5A" ], [ "OFFICE_MACHINES_SERVICE_REPAIR_INSTALLATION", "OCCUPATION_CLASS_2A" ], [ "ONCOLOGIST", "OCCUPATION_CLASS_4M" ], [ "OPHTHALMOLOGIST", "OCCUPATION_CLASS_3M" ], [ "OPTICIAN", "OCCUPATION_CLASS_3A" ], [ "OPTOMETRIST", "OCCUPATION_CLASS_6A" ], [ "OPTOMETRISTS", "OCCUPATION_CLASS_6A" ], [ "ORCHARDIST", "OCCUPATION_CLASS_2A" ], [ "ORTHOPEDIC_SURGEON", "OCCUPATION_CLASS_3M" ], [ "OSTEOPATH", "OCCUPATION_CLASS_3M" ], [ "OTHER_ACCOUNTANT_BOOKKEEPER", "OCCUPATION_CLASS_5A" ], [ "OTHER_BROKER___2_YEARS_EXPERIENCE", "OCCUPATION_CLASS_4A" ], [ "OTHER_BROKER___LESS_THAN_2_YEARS_EXPERIENCE", "OCCUPATION_CLASS_N" ], [ "OTHER_CONVENIENCE_STORE_EMPLOYEES", "OCCUPATION_CLASS_N" ], [ "OTHER_ENGINEERS_W__NO_DEGREE_OFFICE_ONLY", "OCCUPATION_CLASS_5A" ], [ "OTHER_INTERIOR_DESIGNER__WITH_PAINTING__ETC_", "OCCUPATION_CLASS_2A" ], [ "OTHER_JEWERLY_SALES", "OCCUPATION_CLASS_3A" ], [ "OTHER_LANDSCAPING_WORKERS_INCLUDING_LAWN_MOWERS", "OCCUPATION_CLASS_1A" ], [ "OTHER_LAW_ENFORCEMENT__OFFICE_ONLY_NO_WEAPON_", "OCCUPATION_CLASS_1A" ], [ "OTHER_LUMBER_INDUSTRY", "OCCUPATION_CLASS_N" ], [ "OTHER_MINING", "OCCUPATION_CLASS_N" ], [ "OTHER_ON_GROUND_AVIATION_PERSONNEL", "OCCUPATION_CLASS_2A" ], [ "OTHER_PETROLEUM_INDUSTRY__INCLUDING_OFFSHORE_WORKERS_AND_TECHNICIANS", "OCCUPATION_CLASS_N" ], [ "OTHER_RAILROAD", "OCCUPATION_CLASS_N" ], [ "OTHER_RETAIL_SALES_EMPLOYEES", "OCCUPATION_CLASS_2A" ], [ "OTHER_THERAPIST", "OCCUPATION_CLASS_N" ], [ "OTHER_ZOO_WORKERS", "OCCUPATION_CLASS_1A" ], [ "OUTSIDE_OR_BETWEEN_OFFICES_MESSENGER", "OCCUPATION_CLASS_1A" ], [ "OVERHEAD_LINES_CONDUITS_TUNNELS", "OCCUPATION_CLASS_N" ], [ "OWNERS", "OCCUPATION_CLASS_N" ], [ "PACKINGHOUSE_WORKER", "OCCUPATION_CLASS_N" ], [ "PAIN_MANAGEMENT", "OCCUPATION_CLASS_3M" ], [ "PAINTER__EXTERIOR_NON_RESIDENTIAL__WORKING_GREATER_THAN_2_STORIES", "OCCUPATION_CLASS_N" ], [ "PAINTER__EXTERIOR_NON_RESIDENTIAL__WORKING_LESS_THAN_2_STORIES", "OCCUPATION_CLASS_1A" ], [ "PAINTER__INTERIOR_", "OCCUPATION_CLASS_2A" ], [ "PAPERHANGER", "OCCUPATION_CLASS_2A" ], [ "PARALEGAL", "OCCUPATION_CLASS_5A" ], [ "PARAMEDICAL_EXAMINER", "OCCUPATION_CLASS_3A" ], [ "PARAMEDICAL_EXAMINERS", "OCCUPATION_CLASS_2A" ], [ "PARTS_OR_STOCK_CLERK", "OCCUPATION_CLASS_2A" ], [ "PASSENGER_SHIP__CREW", "OCCUPATION_CLASS_N" ], [ "PASSENGER_SHIP__PILOT_OFFICERS", "OCCUPATION_CLASS_N" ], [ "PASSENGER_SHIP__RADIO_OPERATOR_PURSER_CHIEF_STEWARD", "OCCUPATION_CLASS_N" ], [ "PATHOLOGIST", "OCCUPATION_CLASS_4M" ], [ "PAWN_BROKER", "OCCUPATION_CLASS_N" ], [ "PERSONAL_BANKER__MORTGAGE_LOAN_OFFICER__LOAN_ORIGINATOR_CREDIT_ANALYST", "OCCUPATION_CLASS_4A" ], [ "PET_GROOMER_PET_SHOP_WORKER__MOBILE_GROOMER", "OCCUPATION_CLASS_1A" ], [ "PETROLEUM_INDUSTRY___FOREMAN", "OCCUPATION_CLASS_1A" ], [ "PETROLEUM_INDUSTRY___MANAGER_SUPERINTENDENT", "OCCUPATION_CLASS_1A" ], [ "PETROLEUM_INDUSTRY___MECHANIC", "OCCUPATION_CLASS_1A" ], [ "PHARMACISTS", "OCCUPATION_CLASS_6A" ], [ "PHARMACY_TECHNICIAN", "OCCUPATION_CLASS_4A" ], [ "PHLEBOTOMISTS", "OCCUPATION_CLASS_2A" ], [ "PHOTOGRAPHER___DRONE_OPERATOR__OFFICE_ONLY_", "OCCUPATION_CLASS_4A" ], [ "PHOTOGRAPHER___DRONE_OPERATOR__WORKING_OUTSIDE_ON_GROUND_OR_FLAT_ROOF_ONLY_", "OCCUPATION_CLASS_1A" ], [ "PHYSICAL_THERAPIST__HOSPITAL__CLINIC__DOCTOR_S_OFFICE_", "OCCUPATION_CLASS_4A" ], [ "PHYSICAL_THERAPIST__IN_HOME_", "OCCUPATION_CLASS_3A" ], [ "PHYSICIAN_ASSISTANT", "OCCUPATION_CLASS_4A" ], [ "PHYSICIAN_ASSISTANTS", "OCCUPATION_CLASS_4A" ], [ "PHYSICIANS", "OCCUPATION_CLASS_5M" ], [ "PIANO_TUNER_TEACHER", "OCCUPATION_CLASS_3A" ], [ "PICTURE_FRAMER", "OCCUPATION_CLASS_2A" ], [ "PILOT_OFFICER__COMMERCIAL_SCHEDULED_AIRLINE", "OCCUPATION_CLASS_N" ], [ "PILOT_OFFICER__CORPORATION_OR_EXECUTIVE_CARRIERS", "OCCUPATION_CLASS_N" ], [ "PILOT_OFFICER__NONSCHEDULED_AIRLINE_CHARTER", "OCCUPATION_CLASS_N" ], [ "PIPEFITTER_STEAMFITTER", "OCCUPATION_CLASS_1A" ], [ "PLUMBER", "OCCUPATION_CLASS_2A" ], [ "PODIATRIST", "OCCUPATION_CLASS_2M" ], [ "PODIATRISTS", "OCCUPATION_CLASS_2M" ], [ "POOL_CLEANER__INSTALLER", "OCCUPATION_CLASS_1A" ], [ "POSTAL_INSPECTOR__OFFICE_ONLY_", "OCCUPATION_CLASS_2A" ], [ "POSTAL_WORKER___DRIVER_LETTER_CARRIER_MAIL_HANDLER_CLERK", "OCCUPATION_CLASS_1A" ], [ "PRINCIPAL_SUPERINTENDENT", "OCCUPATION_CLASS_6A" ], [ "PRISON_OR_CORRECTIONAL_FACILITY___GUARD_JAILER_MATRON", "OCCUPATION_CLASS_N" ], [ "PRISON_OR_CORRECTIONAL_FACILITY___MEDICAL_PROFESSIONAL__SOCIAL_WORKER_CLERGY", "OCCUPATION_CLASS_N" ], [ "PRISON_OR_CORRECTIONAL_FACILITY___WARDEN", "OCCUPATION_CLASS_3A" ], [ "PRIVATE_DETECTIVES__PRIVATE_INVESTIGATORS", "OCCUPATION_CLASS_N" ], [ "PRIVATE_DUTY_NURSE__OUTSIDE_HOSPITAL_", "OCCUPATION_CLASS_N" ], [ "PRIVATE_INVESTIGATOR___NO_WEAPON__OFFICE_ONLY", "OCCUPATION_CLASS_1A" ], [ "PRODUCER", "OCCUPATION_CLASS_4A" ], [ "PRODUCTION_WORKERS__LIGHT_PROPERTY_SOUND_", "OCCUPATION_CLASS_1A" ], [ "PROFESSION_OR_COLLEGIATE_FT_REFEREE__IF_PT__ISSUE_1_OCC_CLASS_LOWER_THAN_FT_OCC_", "OCCUPATION_CLASS_N" ], [ "PROFESSIONAL_ATHLETE_JOCKEY", "OCCUPATION_CLASS_N" ], [ "PROFESSIONAL_GAMBLER", "OCCUPATION_CLASS_N" ], [ "PROFESSIONAL_OR_COLLEGIATE_ATHLETIC_TRAINER", "OCCUPATION_CLASS_1A" ], [ "PROFESSIONAL_OR_COLLEGIATE_COACH", "OCCUPATION_CLASS_3A" ], [ "PROPERTY_MANAGER___NO_MAINTENANCE_WORK", "OCCUPATION_CLASS_4A" ], [ "PROPERTY_MANAGER___WITH_MAINTENANCE_WORK", "OCCUPATION_CLASS_1A" ], [ "PSYCHIATRIST", "OCCUPATION_CLASS_4M" ], [ "PSYCHOLOGIST_COUNSELOR__LICENSED_AND_PH_D__", "OCCUPATION_CLASS_4M" ], [ "PSYCHOLOGIST_COUNSELOR__LICENSED_ONLY_", "OCCUPATION_CLASS_4M" ], [ "PULMONOLOGIST", "OCCUPATION_CLASS_4M" ], [ "RACING__ALL_TYPES_", "OCCUPATION_CLASS_N" ], [ "RADIOLOGIST__INVASIVE", "OCCUPATION_CLASS_3M" ], [ "RADIOLOGIST__NON_INVASIVE", "OCCUPATION_CLASS_4M" ], [ "RAILROAD_TRACK_AND_SECTION_WORKERS", "OCCUPATION_CLASS_N" ], [ "RAILROAD_TRAIN_CREW", "OCCUPATION_CLASS_N" ], [ "RAILROAD_YARD_WORKERS", "OCCUPATION_CLASS_N" ], [ "REAL_ESTATE_ABSTRACTOR_ABSTRACT_CLERK", "OCCUPATION_CLASS_4A" ], [ "REAL_ESTATE_AGENT_BROKER__OTHERS_", "OCCUPATION_CLASS_4A" ], [ "REAL_ESTATE_AGENT_BROKER_2_YRS_EXPERIENCE", "OCCUPATION_CLASS_5A" ], [ "REAL_ESTATE_APPRAISER", "OCCUPATION_CLASS_3A" ], [ "RECEIVING_SHIPPING_CLERK", "OCCUPATION_CLASS_3A" ], [ "RECRUITER_TALENT_ACQUISITION", "OCCUPATION_CLASS_5A" ], [ "REFRIGERATION_PLANT_WORKERS", "OCCUPATION_CLASS_1A" ], [ "REGISTERED_PHARMACIST", "OCCUPATION_CLASS_6A" ], [ "RENDERING_PLANT_WORKERS", "OCCUPATION_CLASS_N" ], [ "REPORTER__WITH_OR_WITHOUT_FIELD_DUTIES_", "OCCUPATION_CLASS_2A" ], [ "RESPIRATORY_THERAPIST__HOSPITAL__CLINIC__DOCTOR_S_OFFICE_", "OCCUPATION_CLASS_4A" ], [ "RESPIRATORY_THERAPIST__IN_HOME_", "OCCUPATION_CLASS_3A" ], [ "RESTAURANT_BAR___BUSBOY_BUSGIRL", "OCCUPATION_CLASS_N" ], [ "RESTAURANT_BAR___CHEF", "OCCUPATION_CLASS_3A" ], [ "RESTAURANT_BAR___COOK", "OCCUPATION_CLASS_2A" ], [ "RESTAURANT_BAR___DISHWASHER", "OCCUPATION_CLASS_1A" ], [ "RESTAURANT_BAR___HOST_HOSTESS_CASHIER", "OCCUPATION_CLASS_2A" ], [ "RESTAURANT_BAR___OWNER_OPERATOR_MANAGER__NO_BARTENDING_DUTIES_", "OCCUPATION_CLASS_3A" ], [ "RESTAURANT_BAR___WAITER_WAITRESS", "OCCUPATION_CLASS_1A" ], [ "RETAIL_SALES___OWNER_MANAGER_BUYER_PURCHASING_AGENT", "OCCUPATION_CLASS_4A" ], [ "RETAIL_SALES___SALESPERSON_SALES_CLERK_RECEIVING_CLERK", "OCCUPATION_CLASS_3A" ], [ "RETIRED_PERSON", "OCCUPATION_CLASS_N" ], [ "RN_LPN_LVN__ALL", "OCCUPATION_CLASS_2A" ], [ "RODEO_PERFORMER", "OCCUPATION_CLASS_N" ], [ "ROOFER__ANY_WORK_ON_PITCHED_ROOFS", "OCCUPATION_CLASS_N" ], [ "ROOFING_CONTRACTOR___NO_LABOR", "OCCUPATION_CLASS_4A" ], [ "SALES_AGENT_REP___2_YRS_EXPERIENCE", "OCCUPATION_CLASS_5A" ], [ "SALES_AGENT_REP___OTHER", "OCCUPATION_CLASS_4A" ], [ "SANDBLASTER", "OCCUPATION_CLASS_1A" ], [ "SCHOOL_NURSE__FULL_TIME_ONLY_", "OCCUPATION_CLASS_2A" ], [ "SCIENTIST_NO_PHD__NO_FIELD_DUTIES", "OCCUPATION_CLASS_5A" ], [ "SCIENTIST_WITH_FIELD_DUTIES", "OCCUPATION_CLASS_3A" ], [ "SCIENTIST_WITH_PHD__NO_FIELD_DUTIES", "OCCUPATION_CLASS_6A" ], [ "SCRIPTWRITER__SALARIED_ONLY_", "OCCUPATION_CLASS_4A" ], [ "SCUBA_TEACHER_POLICE_SEARCH_DIVER_OTHER_DIVERS", "OCCUPATION_CLASS_N" ], [ "SECURITY_SYSTEMS_SERVICE_REPAIR_INSTALLATION_NO_LINE_WORK__POLE_CLIMBING_OR_DIGGING_", "OCCUPATION_CLASS_3A" ], [ "SEPTIC_AND_SEWAGE_INSTALLATION", "OCCUPATION_CLASS_1A" ], [ "SEPTIC_AND_SEWAGE_SERVICING", "OCCUPATION_CLASS_1A" ], [ "SERVICE_STATION___OWNER_MANAGER_CASHIER_MECHANIC", "OCCUPATION_CLASS_2A" ], [ "SEWER_CONSTRUCTION__EXCEPT_TUNNEL_", "OCCUPATION_CLASS_1A" ], [ "SHEET_METAL_WORKER", "OCCUPATION_CLASS_1A" ], [ "SHEET_METAL_WORKER", "OCCUPATION_CLASS_N" ], [ "SHIPPING_AND_RECEIVING__NO_FREIGHT_HANDLING_", "OCCUPATION_CLASS_3A" ], [ "SHOE_REPAIRER", "OCCUPATION_CLASS_2A" ], [ "SKI_INSTRUCTOR", "OCCUPATION_CLASS_N" ], [ "SOCIAL_WORKER_WITH_FIELD_DUTIES", "OCCUPATION_CLASS_3A" ], [ "SOCIAL_WORKER_WITH_OFFICE_DUTIES_ONLY", "OCCUPATION_CLASS_4A" ], [ "SPECIALTY_NOT_LISTED", "OCCUPATION_CLASS_4M" ], [ "SPEECH__REGISTERED_OR_LICENSED___HOSPITAL__CLINIC__DOCTOR_S_OFFICE_", "OCCUPATION_CLASS_4A" ], [ "SPEECH_THERAPIST__REGISTERED_OR_LICENSED___IN_HOME_", "OCCUPATION_CLASS_3A" ], [ "STEEPLEJACK", "OCCUPATION_CLASS_N" ], [ "STOCKS_BONDS_BROKER___2_YEARS_EXPERIENCE", "OCCUPATION_CLASS_5A" ], [ "STOCKS_BONDS_FLOOR_TRADER_DAYTRADER", "OCCUPATION_CLASS_N" ], [ "STOCKS_BONDS_OTHER_BROKER", "OCCUPATION_CLASS_2A" ], [ "STUDIO_ENGINEER", "OCCUPATION_CLASS_4A" ], [ "STUNTMAN", "OCCUPATION_CLASS_N" ], [ "SUGAR_REFINERY_WORKER", "OCCUPATION_CLASS_1A" ], [ "SUPERINTENDENT_BUILDING_CONTRACTOR", "OCCUPATION_CLASS_4A" ], [ "SURGEON", "OCCUPATION_CLASS_3M" ], [ "SURVEYOR_WITH_FIELD_DUTIES", "OCCUPATION_CLASS_3A" ], [ "SURVEYOR_WITH_OFFICE_DUTIES_ONLY", "OCCUPATION_CLASS_4A" ], [ "TACTICAL_POLICE_TRAINING", "OCCUPATION_CLASS_N" ], [ "TAILOR_DRESSMAKER_SEAMSTRESS", "OCCUPATION_CLASS_2A" ], [ "TATOO_ARTIST_BODY_PIERCING", "OCCUPATION_CLASS_N" ], [ "TAXICAB_BUS_LIMOSINE__ONLY_IF_W_2_EMPLOYEES_", "OCCUPATION_CLASS_1A" ], [ "TAXIDERMIST", "OCCUPATION_CLASS_3A" ], [ "TEACHER__FULL_TIME_CLASSROOM_ONLY__NOT_IN_HOME__DEGREE_REQUIRED_", "OCCUPATION_CLASS_4A" ], [ "TEACHER__PHYS_ED_SHOP_OTHERS_WITH_DUTIES_OUTSIDE_OF_THE_CLASSROOM_", "OCCUPATION_CLASS_3A" ], [ "TECHNICAL_WRITER__SALARIED_ONLY_", "OCCUPATION_CLASS_4A" ], [ "TECHNICIAN", "OCCUPATION_CLASS_3A" ], [ "TELEPHONE_EQUIP_REPAIRER_INSTALLER_SERVICER__NO_LINE_WORK__POLE_CLIMBING__OR_DIGGING_", "OCCUPATION_CLASS_3A" ], [ "TELEPHONE_LINEMAN_POLE_CLIMBER", "OCCUPATION_CLASS_N" ], [ "TELEPHONE_TOWER_SERVICE_INSTALLATION", "OCCUPATION_CLASS_N" ], [ "TEMPORARY_SEASONAL_WORKER", "OCCUPATION_CLASS_N" ], [ "THERAPIST_ASSISTANT__HOSPITAL__CLINIC__DOCTOR_S_OFFICE_", "OCCUPATION_CLASS_3A" ], [ "THERAPIST_ASSISTANT__IN_HOME_", "OCCUPATION_CLASS_2A" ], [ "TICKET_AGENT_ADMINISTRATIVE_PERSONNEL", "OCCUPATION_CLASS_4A" ], [ "TOBACCO_FARMER_OR_GROWER", "OCCUPATION_CLASS_2A" ], [ "TOUR_GUIDE__NO_PASSENGER_TRANSPORT_OR_PHYSICAL_DUTIES__BIKING__ETC__", "OCCUPATION_CLASS_2A" ], [ "TOUR_GUIDE_OTHER", "OCCUPATION_CLASS_1A" ], [ "TOWER_ERECTORS", "OCCUPATION_CLASS_N" ], [ "TRACTOR_TRAILER_TRUCK___TWO_OR_MORE_AXLES", "OCCUPATION_CLASS_1A" ], [ "TRAVEL_BUREAU_WORKER_TRAVEL_AGENT", "OCCUPATION_CLASS_5A" ], [ "TREE_TRIMMER_TREE_SURGEON", "OCCUPATION_CLASS_N" ], [ "TSA__CUSTOMS_AGENT__BORDER_PATROL", "OCCUPATION_CLASS_N" ], [ "TUNNEL_WORKERS__SHAFT_OR_SUBWAY_", "OCCUPATION_CLASS_N" ], [ "UBER__LYFT_DRIVER__LIMO__FT_OR___10_HRS_WEEK", "OCCUPATION_CLASS_N" ], [ "UNDER_18_NON_PROFESSIONAL_COACH", "OCCUPATION_CLASS_2A" ], [ "UNDER_18_NON_PROFESSIONAL_FT_REFEREE__IF_PT__ISSUE_1_OCC_CLASS_LOWER_THAN_FT_OCC_", "OCCUPATION_CLASS_1A" ], [ "UNDERCOVER_POLICE_NARCOTICS_VICE_OR_UNDERCOVER_DETECTIVES", "OCCUPATION_CLASS_N" ], [ "UPHOLSTERER", "OCCUPATION_CLASS_1A" ], [ "UROLOGIST", "OCCUPATION_CLASS_4M" ], [ "VALET_CAR_PARK__HOTEL__RESTAURANT__CASINO_", "OCCUPATION_CLASS_1A" ], [ "VENDING_MACHINE_SERVICE_REPAIR_INSTALLATION", "OCCUPATION_CLASS_2A" ], [ "VETERINARIAN___DVM__LARGE_ANIMALS_", "OCCUPATION_CLASS_3A" ], [ "VETERINARIAN___DVM__SMALL_ANIMAL_", "OCCUPATION_CLASS_6A" ], [ "VETERINARIAN_ASSISTANT__LARGE_ANIMAL_", "OCCUPATION_CLASS_2A" ], [ "VETERINARIAN_ASSISTANT__SMALL_ANIMAL_", "OCCUPATION_CLASS_4A" ], [ "VETERINARIANS_LARGE_ANIMAL", "OCCUPATION_CLASS_3A" ], [ "VETERINARIANS_SMALL_ANIMAL", "OCCUPATION_CLASS_6A" ], [ "VOCATIONAL_TEACHER_PROFESSOR", "OCCUPATION_CLASS_4A" ], [ "WAREHOUSE_CHECKER_CRATER_FOREMAN_PACKER", "OCCUPATION_CLASS_2A" ], [ "WELDER", "OCCUPATION_CLASS_1A" ], [ "WELDER__IN_CONSTRUCTION_INDUSTRY_", "OCCUPATION_CLASS_N" ], [ "WINDOW_CLEANER__2_STORIES_OR_LESS_", "OCCUPATION_CLASS_1A" ], [ "WINDOW_CLEANER__MORE_THAN_2_STORIES_", "OCCUPATION_CLASS_N" ], [ "WINERY_VINEYARD_OWNERS", "OCCUPATION_CLASS_2A" ], [ "WORKERS", "OCCUPATION_CLASS_N" ] ],
        "displayValues" : {
          "OCCUPATION_CLASS_6A" : "6A",
          "OCCUPATION_CLASS_5A" : "5A",
          "OCCUPATION_CLASS_4A" : "4A",
          "OCCUPATION_CLASS_3A" : "3A",
          "OCCUPATION_CLASS_2A" : "2A",
          "OCCUPATION_CLASS_1A" : "1A",
          "OCCUPATION_CLASS_5M" : "5M",
          "OCCUPATION_CLASS_4M" : "4M",
          "OCCUPATION_CLASS_3M" : "3M",
          "OCCUPATION_CLASS_2M" : "2M",
          "OCCUPATION_CLASS_N" : "N"
        }
      },
      "sdiValuesTbl" : {
        "columns" : [ "annualEarnedIncome", "issueState", "sdiAmount" ],
        "rows" : [ [ "15000", "CA", "700" ], [ "15000", "HI", "700" ], [ "15000", "NJ", "800" ], [ "15000", "RI", "700" ], [ "17000", "CA", "800" ], [ "17000", "HI", "800" ], [ "17000", "NJ", "900" ], [ "17000", "RI", "800" ], [ "19000", "CA", "900" ], [ "19000", "HI", "900" ], [ "19000", "NJ", "1000" ], [ "19000", "RI", "900" ], [ "21000", "CA", "1000" ], [ "21000", "HI", "1000" ], [ "21000", "NJ", "1100" ], [ "21000", "RI", "1000" ], [ "23000", "CA", "1100" ], [ "23000", "HI", "1100" ], [ "23000", "NJ", "1200" ], [ "23000", "RI", "1100" ], [ "25000", "CA", "1200" ], [ "25000", "HI", "1200" ], [ "25000", "NJ", "1300" ], [ "25000", "RI", "1200" ], [ "27000", "CA", "1200" ], [ "27000", "HI", "1300" ], [ "27000", "NJ", "1400" ], [ "27000", "RI", "1300" ], [ "29000", "CA", "1300" ], [ "29000", "HI", "1400" ], [ "29000", "NJ", "1500" ], [ "29000", "RI", "1400" ], [ "31000", "CA", "1400" ], [ "31000", "HI", "1400" ], [ "31000", "NJ", "1700" ], [ "31000", "RI", "1500" ], [ "33000", "CA", "1500" ], [ "33000", "HI", "1500" ], [ "33000", "NJ", "1800" ], [ "33000", "RI", "1600" ], [ "35000", "CA", "1600" ], [ "35000", "HI", "1600" ], [ "35000", "NJ", "1900" ], [ "35000", "RI", "1700" ], [ "37000", "CA", "1700" ], [ "37000", "HI", "1700" ], [ "37000", "NJ", "2000" ], [ "37000", "RI", "1800" ], [ "39000", "CA", "1800" ], [ "39000", "HI", "1800" ], [ "39000", "NJ", "2100" ], [ "39000", "RI", "1900" ], [ "41000", "CA", "1900" ], [ "41000", "HI", "1900" ], [ "41000", "NJ", "2200" ], [ "41000", "RI", "2000" ], [ "43000", "CA", "2000" ], [ "43000", "HI", "2000" ], [ "43000", "NJ", "2300" ], [ "43000", "RI", "2100" ], [ "45000", "CA", "2100" ], [ "45000", "HI", "2100" ], [ "45000", "NJ", "2400" ], [ "45000", "RI", "2200" ], [ "47000", "CA", "2200" ], [ "47000", "HI", "2200" ], [ "47000", "NJ", "2500" ], [ "47000", "RI", "2300" ], [ "50000", "CA", "2300" ], [ "50000", "HI", "2400" ], [ "50000", "NJ", "2700" ], [ "50000", "RI", "2500" ], [ "52000", "CA", "2300" ], [ "52000", "HI", "2500" ], [ "52000", "NJ", "2800" ], [ "52000", "RI", "2600" ], [ "54000", "CA", "2400" ], [ "54000", "HI", "2600" ], [ "54000", "NJ", "2800" ], [ "54000", "RI", "2700" ], [ "56000", "CA", "2500" ], [ "56000", "HI", "2700" ], [ "56000", "NJ", "2800" ], [ "56000", "RI", "2800" ], [ "58000", "CA", "2600" ], [ "58000", "HI", "2800" ], [ "58000", "NJ", "2800" ], [ "58000", "RI", "2900" ], [ "60000", "CA", "2700" ], [ "60000", "HI", "2800" ], [ "60000", "NJ", "2800" ], [ "60000", "RI", "3000" ], [ "62000", "CA", "2800" ], [ "62000", "HI", "2800" ], [ "62000", "NJ", "2800" ], [ "62000", "RI", "3100" ], [ "64000", "CA", "2900" ], [ "64000", "HI", "2800" ], [ "64000", "NJ", "2800" ], [ "64000", "RI", "3200" ], [ "66000", "CA", "3000" ], [ "66000", "HI", "2800" ], [ "66000", "NJ", "2800" ], [ "66000", "RI", "3300" ], [ "68000", "CA", "3100" ], [ "68000", "HI", "2800" ], [ "68000", "NJ", "2800" ], [ "68000", "RI", "3400" ], [ "70000", "CA", "3200" ], [ "70000", "HI", "2800" ], [ "70000", "NJ", "2800" ], [ "70000", "RI", "3500" ], [ "72000", "CA", "3300" ], [ "72000", "HI", "2800" ], [ "72000", "NJ", "2800" ], [ "72000", "RI", "3600" ], [ "75000", "CA", "3400" ], [ "75000", "HI", "2800" ], [ "75000", "NJ", "2800" ], [ "75000", "RI", "3700" ], [ "80000", "CA", "3700" ], [ "80000", "HI", "2800" ], [ "80000", "NJ", "2800" ], [ "80000", "RI", "3800" ], [ "85000", "CA", "3900" ], [ "85000", "HI", "2800" ], [ "85000", "NJ", "2800" ], [ "85000", "RI", "3800" ], [ "90000", "CA", "4100" ], [ "90000", "HI", "2800" ], [ "90000", "NJ", "2800" ], [ "90000", "RI", "3800" ], [ "95000", "CA", "4300" ], [ "95000", "HI", "2800" ], [ "95000", "NJ", "2800" ], [ "95000", "RI", "3800" ], [ "100000", "CA", "4600" ], [ "100000", "HI", "2800" ], [ "100000", "NJ", "2800" ], [ "100000", "RI", "3800" ], [ "105000", "CA", "4800" ], [ "105000", "HI", "2800" ], [ "105000", "NJ", "2800" ], [ "105000", "RI", "3800" ], [ "110000", "CA", "5000" ], [ "110000", "HI", "2800" ], [ "110000", "NJ", "2800" ], [ "110000", "RI", "3800" ], [ "115000", "CA", "5300" ], [ "115000", "HI", "2800" ], [ "115000", "NJ", "2800" ], [ "115000", "RI", "3800" ], [ "120000", "CA", "5400" ], [ "120000", "HI", "2800" ], [ "120000", "NJ", "2800" ], [ "120000", "RI", "3800" ], [ "125000", "CA", "5400" ], [ "125000", "HI", "2800" ], [ "125000", "NJ", "2800" ], [ "125000", "RI", "3800" ], [ "130000", "CA", "5400" ], [ "130000", "HI", "2800" ], [ "130000", "NJ", "2800" ], [ "130000", "RI", "3800" ], [ "135000", "CA", "5400" ], [ "135000", "HI", "2800" ], [ "135000", "NJ", "2800" ], [ "135000", "RI", "3800" ], [ "140000", "CA", "5400" ], [ "140000", "HI", "2800" ], [ "140000", "NJ", "2800" ], [ "140000", "RI", "3800" ], [ "145000", "CA", "5400" ], [ "145000", "HI", "2800" ], [ "145000", "NJ", "2800" ], [ "145000", "RI", "3800" ], [ "150000", "CA", "5400" ], [ "150000", "HI", "2800" ], [ "150000", "NJ", "2800" ], [ "150000", "RI", "3800" ], [ "155000", "CA", "5400" ], [ "155000", "HI", "2800" ], [ "155000", "NJ", "2800" ], [ "155000", "RI", "3800" ], [ "160000", "CA", "5400" ], [ "160000", "HI", "2800" ], [ "160000", "NJ", "2800" ], [ "160000", "RI", "3800" ], [ "165000", "CA", "5400" ], [ "165000", "HI", "2800" ], [ "165000", "NJ", "2800" ], [ "165000", "RI", "3800" ], [ "170000", "CA", "5400" ], [ "170000", "HI", "2800" ], [ "170000", "NJ", "2800" ], [ "170000", "RI", "3800" ], [ "175000", "CA", "5400" ], [ "175000", "HI", "2800" ], [ "175000", "NJ", "2800" ], [ "175000", "RI", "3800" ], [ "180000", "CA", "5400" ], [ "180000", "HI", "2800" ], [ "180000", "NJ", "2800" ], [ "180000", "RI", "3800" ], [ "185000", "CA", "5400" ], [ "185000", "HI", "2800" ], [ "185000", "NJ", "2800" ], [ "185000", "RI", "3800" ], [ "190000", "CA", "5400" ], [ "190000", "HI", "2800" ], [ "190000", "NJ", "2800" ], [ "190000", "RI", "3800" ], [ "195000", "CA", "5400" ], [ "195000", "HI", "2800" ], [ "195000", "NJ", "2800" ], [ "195000", "RI", "3800" ], [ "200000", "CA", "5400" ], [ "200000", "HI", "2800" ], [ "200000", "NJ", "2800" ], [ "200000", "RI", "3800" ], [ "210000", "CA", "5400" ], [ "210000", "HI", "2800" ], [ "210000", "NJ", "2800" ], [ "210000", "RI", "3800" ], [ "220000", "CA", "5400" ], [ "220000", "HI", "2800" ], [ "220000", "NJ", "2800" ], [ "220000", "RI", "3800" ], [ "230000", "CA", "5400" ], [ "230000", "HI", "2800" ], [ "230000", "NJ", "2800" ], [ "230000", "RI", "3800" ], [ "240000", "CA", "5400" ], [ "240000", "HI", "2800" ], [ "240000", "NJ", "2800" ], [ "240000", "RI", "3800" ], [ "250000", "CA", "5400" ], [ "250000", "HI", "2800" ], [ "250000", "NJ", "2800" ], [ "250000", "RI", "3800" ], [ "260000", "CA", "5400" ], [ "260000", "HI", "2800" ], [ "260000", "NJ", "2800" ], [ "260000", "RI", "3800" ], [ "270000", "CA", "5400" ], [ "270000", "HI", "2800" ], [ "270000", "NJ", "2800" ], [ "270000", "RI", "3800" ], [ "280000", "CA", "5400" ], [ "280000", "HI", "2800" ], [ "280000", "NJ", "2800" ], [ "280000", "RI", "3800" ], [ "290000", "CA", "5400" ], [ "290000", "HI", "2800" ], [ "290000", "NJ", "2800" ], [ "290000", "RI", "3800" ], [ "300000", "CA", "5400" ], [ "300000", "HI", "2800" ], [ "300000", "NJ", "2800" ], [ "300000", "RI", "3800" ], [ "325000", "CA", "5400" ], [ "325000", "HI", "2800" ], [ "325000", "NJ", "2800" ], [ "325000", "RI", "3800" ], [ "350000", "CA", "5400" ], [ "350000", "HI", "2800" ], [ "350000", "NJ", "2800" ], [ "350000", "RI", "3800" ], [ "375000", "CA", "5400" ], [ "375000", "HI", "2800" ], [ "375000", "NJ", "2800" ], [ "375000", "RI", "3800" ], [ "400000", "CA", "5400" ], [ "400000", "HI", "2800" ], [ "400000", "NJ", "2800" ], [ "400000", "RI", "3800" ], [ "425000", "CA", "5400" ], [ "425000", "HI", "2800" ], [ "425000", "NJ", "2800" ], [ "425000", "RI", "3800" ], [ "450000", "CA", "5400" ], [ "450000", "HI", "2800" ], [ "450000", "NJ", "2800" ], [ "450000", "RI", "3800" ], [ "475000", "CA", "5400" ], [ "475000", "HI", "2800" ], [ "475000", "NJ", "2800" ], [ "475000", "RI", "3800" ], [ "500000", "CA", "5400" ], [ "500000", "HI", "2800" ], [ "500000", "NJ", "2800" ], [ "500000", "RI", "3800" ], [ "525000", "CA", "5400" ], [ "525000", "HI", "2800" ], [ "525000", "NJ", "2800" ], [ "525000", "RI", "3800" ], [ "550000", "CA", "5400" ], [ "550000", "HI", "2800" ], [ "550000", "NJ", "2800" ], [ "550000", "RI", "3800" ], [ "575000", "CA", "5400" ], [ "575000", "HI", "2800" ], [ "575000", "NJ", "2800" ], [ "575000", "RI", "3800" ], [ "600000", "CA", "5400" ], [ "600000", "HI", "2800" ], [ "600000", "NJ", "2800" ], [ "600000", "RI", "3800" ], [ "625000", "CA", "5400" ], [ "625000", "HI", "2800" ], [ "625000", "NJ", "2800" ], [ "625000", "RI", "3800" ], [ "650000", "CA", "5400" ], [ "650000", "HI", "2800" ], [ "650000", "NJ", "2800" ], [ "650000", "RI", "3800" ], [ "675000", "CA", "5400" ], [ "675000", "HI", "2800" ], [ "675000", "NJ", "2800" ], [ "675000", "RI", "3800" ], [ "700000", "CA", "5400" ], [ "700000", "HI", "2800" ], [ "700000", "NJ", "2800" ], [ "700000", "RI", "3800" ], [ "725000", "CA", "5400" ], [ "725000", "HI", "2800" ], [ "725000", "NJ", "2800" ], [ "725000", "RI", "3800" ], [ "750000", "CA", "5400" ], [ "750000", "HI", "2800" ], [ "750000", "NJ", "2800" ], [ "750000", "RI", "3800" ], [ "775000", "CA", "5400" ], [ "775000", "HI", "2800" ], [ "775000", "NJ", "2800" ], [ "775000", "RI", "3800" ], [ "800000", "CA", "5400" ], [ "800000", "HI", "2800" ], [ "800000", "NJ", "2800" ], [ "800000", "RI", "3800" ], [ "825000", "CA", "5400" ], [ "825000", "HI", "2800" ], [ "825000", "NJ", "2800" ], [ "825000", "RI", "3800" ], [ "850000", "CA", "5400" ], [ "850000", "HI", "2800" ], [ "850000", "NJ", "2800" ], [ "850000", "RI", "3800" ], [ "875000", "CA", "5400" ], [ "875000", "HI", "2800" ], [ "875000", "NJ", "2800" ], [ "875000", "RI", "3800" ], [ "900000", "CA", "5400" ], [ "900000", "HI", "2800" ], [ "900000", "NJ", "2800" ], [ "900000", "RI", "3800" ], [ "925000", "CA", "5400" ], [ "925000", "HI", "2800" ], [ "925000", "NJ", "2800" ], [ "925000", "RI", "3800" ], [ "950000", "CA", "5400" ], [ "950000", "HI", "2800" ], [ "950000", "NJ", "2800" ], [ "950000", "RI", "3800" ], [ "975000", "CA", "5400" ], [ "975000", "HI", "2800" ], [ "975000", "NJ", "2800" ], [ "975000", "RI", "3800" ], [ "1000000", "CA", "5400" ], [ "1000000", "HI", "2800" ], [ "1000000", "NJ", "2800" ], [ "1000000", "RI", "3800" ], [ "1050000", "CA", "5400" ], [ "1050000", "HI", "2800" ], [ "1050000", "NJ", "2800" ], [ "1050000", "RI", "3800" ], [ "1100000", "CA", "5400" ], [ "1100000", "HI", "2800" ], [ "1100000", "NJ", "2800" ], [ "1100000", "RI", "3800" ], [ "1150000", "CA", "5400" ], [ "1150000", "HI", "2800" ], [ "1150000", "NJ", "2800" ], [ "1150000", "RI", "3800" ], [ "1200000", "CA", "5400" ], [ "1200000", "HI", "2800" ], [ "1200000", "NJ", "2800" ], [ "1200000", "RI", "3800" ] ],
        "displayValues" : {
          "700" : "700",
          "800" : "800",
          "900" : "900",
          "1000" : "1000",
          "1100" : "1100",
          "1200" : "1200",
          "1300" : "1300",
          "1400" : "1400",
          "1500" : "1500",
          "1700" : "1700",
          "1800" : "1800",
          "1600" : "1600",
          "1900" : "1900",
          "2000" : "2000",
          "2100" : "2100",
          "2200" : "2200",
          "2300" : "2300",
          "2400" : "2400",
          "2500" : "2500",
          "2700" : "2700",
          "2800" : "2800",
          "2600" : "2600",
          "2900" : "2900",
          "3000" : "3000",
          "3100" : "3100",
          "3200" : "3200",
          "3300" : "3300",
          "3400" : "3400",
          "3500" : "3500",
          "3600" : "3600",
          "3700" : "3700",
          "3800" : "3800",
          "3900" : "3900",
          "4100" : "4100",
          "4300" : "4300",
          "4600" : "4600",
          "4800" : "4800",
          "5000" : "5000",
          "5300" : "5300",
          "5400" : "5400"
        }
      },
      "productStateApproveTbl" : {
        "columns" : [ "approvedState" ],
        "rows" : [ [ "AK" ], [ "AL" ], [ "AR" ], [ "AZ" ], [ "CO" ], [ "CT" ], [ "DC" ], [ "DE" ], [ "GA" ], [ "HI" ], [ "IA" ], [ "ID" ], [ "IL" ], [ "IN" ], [ "KS" ], [ "KY" ], [ "LA" ], [ "MA" ], [ "MD" ], [ "ME" ], [ "MI" ], [ "MN" ], [ "MO" ], [ "MS" ], [ "NC" ], [ "ND" ], [ "NE" ], [ "NH" ], [ "NJ" ], [ "NM" ], [ "NV" ], [ "OH" ], [ "OK" ], [ "OR" ], [ "PA" ], [ "PR" ], [ "RI" ], [ "SC" ], [ "SD" ], [ "TN" ], [ "TX" ], [ "UT" ], [ "VA" ], [ "VT" ], [ "WA" ], [ "WI" ], [ "WV" ], [ "WY" ] ],
        "displayValues" : {
          "AK" : "AK",
          "AL" : "AL",
          "AR" : "AR",
          "AZ" : "AZ",
          "CO" : "CO",
          "CT" : "CT",
          "DC" : "DC",
          "DE" : "DE",
          "GA" : "GA",
          "HI" : "HI",
          "IA" : "IA",
          "ID" : "ID",
          "IL" : "IL",
          "IN" : "IN",
          "KS" : "KS",
          "KY" : "KY",
          "LA" : "LA",
          "MA" : "MA",
          "MD" : "MD",
          "ME" : "ME",
          "MI" : "MI",
          "MN" : "MN",
          "MO" : "MO",
          "MS" : "MS",
          "NC" : "NC",
          "ND" : "ND",
          "NE" : "NE",
          "NH" : "NH",
          "NJ" : "NJ",
          "NM" : "NM",
          "NV" : "NV",
          "OH" : "OH",
          "OK" : "OK",
          "OR" : "OR",
          "PA" : "PA",
          "PR" : "PR",
          "RI" : "RI",
          "SC" : "SC",
          "SD" : "SD",
          "TN" : "TN",
          "TX" : "TX",
          "UT" : "UT",
          "VA" : "VA",
          "VT" : "VT",
          "WA" : "WA",
          "WI" : "WI",
          "WV" : "WV",
          "WY" : "WY"
        }
      },
      "incomeErSeQualTotalTbl" : {
        "columns" : [ "annualEarnedIncome", "total" ],
        "rows" : [ [ "15000", "1100" ], [ "17000", "1200" ], [ "19000", "1300" ], [ "21000", "1400" ], [ "23000", "1500" ], [ "25000", "1600" ], [ "27000", "1700" ], [ "29000", "1800" ], [ "31000", "2000" ], [ "33000", "2500" ], [ "35000", "2800" ], [ "37000", "2800" ], [ "39000", "3000" ], [ "41000", "3000" ], [ "43000", "3600" ], [ "45000", "3600" ], [ "47000", "3700" ], [ "50000", "4200" ], [ "52000", "4200" ], [ "54000", "4200" ], [ "56000", "4300" ], [ "58000", "4800" ], [ "60000", "4800" ], [ "62000", "4800" ], [ "64000", "5000" ], [ "66000", "5000" ], [ "68000", "5500" ], [ "70000", "5500" ], [ "72000", "5600" ], [ "75000", "5900" ], [ "80000", "6100" ], [ "85000", "6400" ], [ "90000", "6400" ], [ "95000", "6700" ], [ "100000", "7500" ], [ "105000", "7500" ], [ "110000", "7700" ], [ "115000", "7700" ], [ "120000", "8500" ], [ "125000", "8700" ], [ "130000", "8700" ], [ "135000", "9500" ], [ "140000", "9500" ], [ "145000", "9800" ], [ "150000", "10600" ], [ "155000", "10600" ], [ "160000", "10900" ], [ "165000", "10900" ], [ "170000", "11700" ], [ "175000", "11800" ], [ "180000", "12000" ], [ "185000", "12300" ], [ "190000", "12300" ], [ "195000", "12900" ], [ "200000", "13600" ], [ "210000", "14000" ], [ "220000", "14300" ], [ "230000", "14800" ], [ "240000", "15500" ], [ "250000", "16200" ], [ "260000", "16200" ], [ "270000", "16200" ], [ "280000", "16800" ], [ "290000", "16800" ], [ "300000", "18100" ], [ "325000", "18700" ], [ "350000", "19900" ], [ "375000", "20000" ], [ "400000", "20000" ], [ "425000", "20000" ], [ "450000", "20000" ], [ "475000", "20000" ], [ "500000", "20000" ], [ "525000", "20000" ], [ "550000", "20000" ], [ "575000", "20000" ], [ "600000", "20000" ], [ "625000", "20000" ], [ "650000", "20000" ], [ "675000", "20000" ], [ "700000", "20000" ], [ "725000", "20000" ], [ "750000", "20000" ], [ "775000", "20000" ], [ "800000", "20000" ], [ "825000", "20000" ], [ "850000", "20000" ], [ "875000", "20000" ], [ "900000", "20000" ], [ "925000", "20000" ], [ "950000", "20000" ], [ "975000", "20000" ], [ "1000000", "20000" ], [ "1050000", "20000" ], [ "1100000", "20000" ], [ "1150000", "20000" ], [ "1200000", "20000" ] ],
        "displayValues" : {
          "1100" : "1100",
          "1200" : "1200",
          "1300" : "1300",
          "1400" : "1400",
          "1500" : "1500",
          "1600" : "1600",
          "1700" : "1700",
          "1800" : "1800",
          "2000" : "2000",
          "2500" : "2500",
          "2800" : "2800",
          "3000" : "3000",
          "3600" : "3600",
          "3700" : "3700",
          "4200" : "4200",
          "4300" : "4300",
          "4800" : "4800",
          "5000" : "5000",
          "5500" : "5500",
          "5600" : "5600",
          "5900" : "5900",
          "6100" : "6100",
          "6400" : "6400",
          "6700" : "6700",
          "7500" : "7500",
          "7700" : "7700",
          "8500" : "8500",
          "8700" : "8700",
          "9500" : "9500",
          "9800" : "9800",
          "10600" : "10600",
          "10900" : "10900",
          "11700" : "11700",
          "11800" : "11800",
          "12000" : "12000",
          "12300" : "12300",
          "12900" : "12900",
          "13600" : "13600",
          "14000" : "14000",
          "14300" : "14300",
          "14800" : "14800",
          "15500" : "15500",
          "16200" : "16200",
          "16800" : "16800",
          "18100" : "18100",
          "18700" : "18700",
          "19900" : "19900",
          "20000" : "20000"
        }
      },
      "stateTbl" : {
        "columns" : [ "state" ],
        "rows" : [ [ "AL" ], [ "AK" ], [ "AZ" ], [ "AR" ], [ "CA" ], [ "CO" ], [ "CT" ], [ "DE" ], [ "DC" ], [ "FL" ], [ "GA" ], [ "HI" ], [ "ID" ], [ "IL" ], [ "IN" ], [ "IA" ], [ "KS" ], [ "KY" ], [ "LA" ], [ "ME" ], [ "MD" ], [ "MA" ], [ "MI" ], [ "MN" ], [ "MS" ], [ "MO" ], [ "MT" ], [ "NE" ], [ "NV" ], [ "NH" ], [ "NJ" ], [ "NM" ], [ "NY" ], [ "NC" ], [ "ND" ], [ "OH" ], [ "OK" ], [ "OR" ], [ "PA" ], [ "PR" ], [ "RI" ], [ "SC" ], [ "SD" ], [ "TN" ], [ "TX" ], [ "UT" ], [ "VT" ], [ "VI" ], [ "VA" ], [ "WA" ], [ "WV" ], [ "WI" ], [ "WY" ] ],
        "displayValues" : {
          "AL" : "AL",
          "AK" : "AK",
          "AZ" : "AZ",
          "AR" : "AR",
          "CA" : "CA",
          "CO" : "CO",
          "CT" : "CT",
          "DE" : "DE",
          "DC" : "DC",
          "FL" : "FL",
          "GA" : "GA",
          "HI" : "HI",
          "ID" : "ID",
          "IL" : "IL",
          "IN" : "IN",
          "IA" : "IA",
          "KS" : "KS",
          "KY" : "KY",
          "LA" : "LA",
          "ME" : "ME",
          "MD" : "MD",
          "MA" : "MA",
          "MI" : "MI",
          "MN" : "MN",
          "MS" : "MS",
          "MO" : "MO",
          "MT" : "MT",
          "NE" : "NE",
          "NV" : "NV",
          "NH" : "NH",
          "NJ" : "NJ",
          "NM" : "NM",
          "NY" : "NY",
          "NC" : "NC",
          "ND" : "ND",
          "OH" : "OH",
          "OK" : "OK",
          "OR" : "OR",
          "PA" : "PA",
          "PR" : "PR",
          "RI" : "RI",
          "SC" : "SC",
          "SD" : "SD",
          "TN" : "TN",
          "TX" : "TX",
          "UT" : "UT",
          "VT" : "VT",
          "VI" : "VI",
          "VA" : "VA",
          "WA" : "WA",
          "WV" : "WV",
          "WI" : "WI",
          "WY" : "WY"
        }
      },
      "occDescrTbl" : {
        "columns" : [ "occupationDescription" ],
        "rows" : [ [ "MISC_OCCUPATION" ], [ "ACCOUNTANT" ], [ "ACTUARY" ], [ "ADVERTISING_MARKETING" ], [ "ANIMALS" ], [ "ARCHITECT" ], [ "ARMED_FORCES_PERSONNEL" ], [ "ART_DEALER_GALLERY_OWNER_MUSEUM_CURATOR" ], [ "ARTIST" ], [ "ASTROLOGER" ], [ "ATHLETICS" ], [ "AUTO_SALVAGE_WORKERS" ], [ "AUTOMOBILE_DEALERSHIP" ], [ "AVIATION" ], [ "BAILBONDSMAN" ], [ "BAKERY" ], [ "BANKING" ], [ "BARBER_BEAUTICIAN" ], [ "BARTENDER" ], [ "BROKER" ], [ "BUTCHER" ], [ "BUTLER" ], [ "CALL_CENTER_WORKERS" ], [ "CARPET_CLEANER_OR_INSTALLER" ], [ "CARTOGRAPHER" ], [ "CASINO_WORKERS" ], [ "CATERER" ], [ "CHEMICAL_INDUSTRY" ], [ "CHIMNEYSWEEP" ], [ "CIRCUS_CARNIVAL_WORKERS" ], [ "CIVIC_CENTERS_CONVENTION_CENTERS_ARENAS" ], [ "CLEANING" ], [ "CLERGY" ], [ "CLERICAL" ], [ "CLOTHING_INDUSTRY" ], [ "COMPUTER_INDUSTRY" ], [ "CONSTRUCTION" ], [ "CONSULTANT_LOBBYIST" ], [ "CORPORATE_OFFICER_EXECUTIVE" ], [ "DAY_CARE__NON_HOME" ], [ "DAY_CARE_HOME_BASED" ], [ "DISPATCHER" ], [ "DIVER" ], [ "DRIVER" ], [ "DRY_CLEANING_LAUNDRY" ], [ "ECONOMIST" ], [ "ELECTRICAL_INDUSTRY" ], [ "ENERGY_INDUSTRY" ], [ "ENGINEER" ], [ "ENTERTAINMENT_INDUSTRY" ], [ "EXTERMINATOR_FUMIGATOR" ], [ "FARMING_AND_RANCHING" ], [ "FINANCIAL_PLANNER" ], [ "FIREARMS" ], [ "FIREFIGHTER_EMERGENCY_MEDICAL_TECHNICIAN" ], [ "FISHING_INDUSTRY" ], [ "FLORIST" ], [ "FOREST_RANGER" ], [ "GAMBLER" ], [ "GARBAGE_COLLECTOR_TRUCK_DRIVER" ], [ "GLASS_INDUSTRY" ], [ "GOLF_COURSE_COUNTRY_CLUB" ], [ "GUIDE" ], [ "HEALTH_CARE" ], [ "HORTICULTURIST" ], [ "HOTEL_MOTEL_INN" ], [ "INSURANCE_INDUSTRY" ], [ "INTERIOR_DESIGNER_DECORATOR" ], [ "INTERPRETER_TRANSLATOR" ], [ "JEWELRY" ], [ "LANDSCAPING" ], [ "LAW_ENFORCEMENT" ], [ "LEGAL" ], [ "LIBRARIAN" ], [ "LIQUOR_DISTRIBUTION" ], [ "LOCKSMITH_KEYMAKER" ], [ "LUMBER_INDUSTRY" ], [ "MAID" ], [ "MANUFACTURING_PROCESSING_PACKAGING" ], [ "MARIJUANA_DISPENSARY" ], [ "MARINE_INDUSTRY" ], [ "MESSENGER" ], [ "MINING" ], [ "MORTICIAN" ], [ "MOVING_AND_STORAGE" ], [ "MUSIC" ], [ "OFFICE_WORKER" ], [ "PAWN_BROKER" ], [ "PETROLEUM_INDUSTRY" ], [ "PHOTOGRAPHER" ], [ "PIPEFITTER_STEAMFITTER" ], [ "PLUMBER" ], [ "POSTAL_EMPLOYEES" ], [ "PRINTING_AND_PUBLISHING" ], [ "PRIVATE_INVESTIGATOR" ], [ "PROPERTY_MANAGER_APARTMENT_HOUSE_MANAGER" ], [ "RAILROAD" ], [ "RAILROAD_EMPLOYEES" ], [ "REAL_ESTATE" ], [ "RESTAURANT_BAR" ], [ "RETAIL_SALES" ], [ "RETIRED_PERSON" ], [ "RODEO_PERFORMER" ], [ "SALES_AGENT_MANUFACTURING_REPRESENTATIVE" ], [ "SCIENTIST" ], [ "SEPTIC_AND_SEWAGE" ], [ "SERVICE_REPAIR_INSTALLATION" ], [ "SOCIAL_WORKER" ], [ "STUDENT" ], [ "STUNTLADY_STUNTMAN" ], [ "SURVEYOR" ], [ "TATOO_ARTIST_BODY_PIERCING" ], [ "TAXIDERMIST" ], [ "TEACHING_INSTRUCTION" ], [ "TEMPORARY_SEASONAL_WORKER" ], [ "TRAVEL_AND_TRANSPORATION" ], [ "VETERINARIAN" ], [ "WAREHOUSE_WORKERS" ], [ "WRITER" ] ],
        "displayValues" : {
          "MISC_OCCUPATION" : "Miscellaneous Occupation",
          "ACCOUNTANT" : "Accountant",
          "ACTUARY" : "Actuary",
          "ADVERTISING_MARKETING" : "Advertising/Marketing",
          "ANIMALS" : "Animals",
          "ARCHITECT" : "Architect",
          "ARMED_FORCES_PERSONNEL" : "Armed Forces Personnel",
          "ART_DEALER_GALLERY_OWNER_MUSEUM_CURATOR" : "Art Dealer/Gallery Owner/Museum Curator",
          "ARTIST" : "Artist",
          "ASTROLOGER" : "Astrologer",
          "ATHLETICS" : "Athletics",
          "AUTO_SALVAGE_WORKERS" : "Auto Salvage Workers",
          "AUTOMOBILE_DEALERSHIP" : "Automobile Dealership",
          "AVIATION" : "Aviation",
          "BAILBONDSMAN" : "Bailbondsman",
          "BAKERY" : "Bakery",
          "BANKING" : "Banking",
          "BARBER_BEAUTICIAN" : "Barber/Beautician",
          "BARTENDER" : "Bartender",
          "BROKER" : "Broker",
          "BUTCHER" : "Butcher",
          "BUTLER" : "Butler",
          "CALL_CENTER_WORKERS" : "Call Center Workers",
          "CARPET_CLEANER_OR_INSTALLER" : "Carpet Cleaner Or Installer",
          "CARTOGRAPHER" : "Cartographer",
          "CASINO_WORKERS" : "Casino Workers",
          "CATERER" : "Caterer",
          "CHEMICAL_INDUSTRY" : "Chemical Industry",
          "CHIMNEYSWEEP" : "Chimneysweep",
          "CIRCUS_CARNIVAL_WORKERS" : "Circus/Carnival Workers",
          "CIVIC_CENTERS_CONVENTION_CENTERS_ARENAS" : "Civic Centers/Convention Centers/Arenas",
          "CLEANING" : "Cleaning",
          "CLERGY" : "Clergy",
          "CLERICAL" : "Clerical",
          "CLOTHING_INDUSTRY" : "Clothing Industry",
          "COMPUTER_INDUSTRY" : "Computer Industry",
          "CONSTRUCTION" : "Construction",
          "CONSULTANT_LOBBYIST" : "Consultant/Lobbyist",
          "CORPORATE_OFFICER_EXECUTIVE" : "Corporate Officer/Executive",
          "DAY_CARE__NON_HOME" : "Day Care  (Non-Home)",
          "DAY_CARE_HOME_BASED" : "Day Care (Home-Based)",
          "DISPATCHER" : "Dispatcher",
          "DIVER" : "Diver",
          "DRIVER" : "Driver",
          "DRY_CLEANING_LAUNDRY" : "Dry Cleaning/Laundry",
          "ECONOMIST" : "Economist",
          "ELECTRICAL_INDUSTRY" : "Electrical Industry",
          "ENERGY_INDUSTRY" : "Energy Industry",
          "ENGINEER" : "Engineer",
          "ENTERTAINMENT_INDUSTRY" : "Entertainment Industry",
          "EXTERMINATOR_FUMIGATOR" : "Exterminator/Fumigator",
          "FARMING_AND_RANCHING" : "Farming And Ranching",
          "FINANCIAL_PLANNER" : "Financial Planner",
          "FIREARMS" : "Firearms",
          "FIREFIGHTER_EMERGENCY_MEDICAL_TECHNICIAN" : "Firefighter/Emergency Medical Technician",
          "FISHING_INDUSTRY" : "Fishing Industry",
          "FLORIST" : "Florist",
          "FOREST_RANGER" : "Forest Ranger",
          "GAMBLER" : "Gambler",
          "GARBAGE_COLLECTOR_TRUCK_DRIVER" : "Garbage Collector/ Truck Driver",
          "GLASS_INDUSTRY" : "Glass Industry",
          "GOLF_COURSE_COUNTRY_CLUB" : "Golf Course/Country Club",
          "GUIDE" : "Guide",
          "HEALTH_CARE" : "Health Care",
          "HORTICULTURIST" : "Horticulturist",
          "HOTEL_MOTEL_INN" : "Hotel/Motel/Inn",
          "INSURANCE_INDUSTRY" : "Insurance Industry",
          "INTERIOR_DESIGNER_DECORATOR" : "Interior Designer/Decorator",
          "INTERPRETER_TRANSLATOR" : "Interpreter/Translator",
          "JEWELRY" : "Jewelry",
          "LANDSCAPING" : "Landscaping",
          "LAW_ENFORCEMENT" : "Law Enforcement",
          "LEGAL" : "Legal",
          "LIBRARIAN" : "Librarian",
          "LIQUOR_DISTRIBUTION" : "Liquor Distribution",
          "LOCKSMITH_KEYMAKER" : "Locksmith/Keymaker",
          "LUMBER_INDUSTRY" : "Lumber Industry",
          "MAID" : "Maid",
          "MANUFACTURING_PROCESSING_PACKAGING" : "Manufacturing/Processing/Packaging",
          "MARIJUANA_DISPENSARY" : "Marijuana Dispensary",
          "MARINE_INDUSTRY" : "Marine Industry",
          "MESSENGER" : "Messenger",
          "MINING" : "Mining",
          "MORTICIAN" : "Mortician",
          "MOVING_AND_STORAGE" : "Moving And Storage",
          "MUSIC" : "Music",
          "OFFICE_WORKER" : "Office Worker",
          "PAWN_BROKER" : "Pawn Broker",
          "PETROLEUM_INDUSTRY" : "Petroleum Industry",
          "PHOTOGRAPHER" : "Photographer",
          "PIPEFITTER_STEAMFITTER" : "Pipefitter/Steamfitter",
          "PLUMBER" : "Plumber",
          "POSTAL_EMPLOYEES" : "Postal Employees",
          "PRINTING_AND_PUBLISHING" : "Printing And Publishing",
          "PRIVATE_INVESTIGATOR" : "Private Investigator",
          "PROPERTY_MANAGER_APARTMENT_HOUSE_MANAGER" : "Property Manager/ Apartment House Manager",
          "RAILROAD" : "Railroad",
          "RAILROAD_EMPLOYEES" : "Railroad Employees",
          "REAL_ESTATE" : "Real Estate",
          "RESTAURANT_BAR" : "Restaurant/Bar",
          "RETAIL_SALES" : "Retail Sales",
          "RETIRED_PERSON" : "Retired Person",
          "RODEO_PERFORMER" : "Rodeo Performer",
          "SALES_AGENT_MANUFACTURING_REPRESENTATIVE" : "Sales Agent/Manufacturing Representative",
          "SCIENTIST" : "Scientist",
          "SEPTIC_AND_SEWAGE" : "Septic And Sewage",
          "SERVICE_REPAIR_INSTALLATION" : "Service/Repair/Installation",
          "SOCIAL_WORKER" : "Social Worker",
          "STUDENT" : "Student",
          "STUNTLADY_STUNTMAN" : "Stuntlady/Stuntman",
          "SURVEYOR" : "Surveyor",
          "TATOO_ARTIST_BODY_PIERCING" : "Tatoo Artist/Body Piercing",
          "TAXIDERMIST" : "Taxidermist",
          "TEACHING_INSTRUCTION" : "Teaching/Instruction",
          "TEMPORARY_SEASONAL_WORKER" : "Temporary/Seasonal Worker",
          "TRAVEL_AND_TRANSPORATION" : "Travel And Transporation",
          "VETERINARIAN" : "Veterinarian",
          "WAREHOUSE_WORKERS" : "Warehouse Workers",
          "WRITER" : "Writer"
        }
      },
      "occCodeTbl" : {
        "columns" : [ "occupationSpecialty", "occupationCode" ],
        "rows" : [ [ "OCC_CLASS_6A", "OCC_CODE_NA" ], [ "OCC_CLASS_5A", "OCC_CODE_NA" ], [ "OCC_CLASS_4A", "OCC_CODE_NA" ], [ "OCC_CLASS_3A", "OCC_CODE_NA" ], [ "OCC_CLASS_2A", "OCC_CODE_NA" ], [ "OCC_CLASS_1A", "OCC_CODE_NA" ], [ "OCC_CLASS_5M", "OCC_CODE_NA" ], [ "OCC_CLASS_4M", "OCC_CODE_NA" ], [ "OCC_CLASS_3M", "OCC_CODE_NA" ], [ "OCC_CLASS_2M", "OCC_CODE_NA" ], [ "ACCOUNTANT__4_YEAR_ACCOUNTING_DEGREE__AUDITOR_OR_CPA", "OCC_CODE_768" ], [ "OTHER_ACCOUNTANT_BOOKKEEPER", "OCC_CODE_44" ], [ "ACTUARY", "OCC_CODE_3" ], [ "ADVERTISING_MARKETING___ACCOUNT_EXECUTIVE_ACCOUNT_MANAGER", "OCC_CODE_478" ], [ "ADVERTISING_MARKETING___COPYWRITER", "OCC_CODE_773" ], [ "ADVERTISING_MARKETING___FREELANCE__W__DOCUMENTED_INCOME", "OCC_CODE_775" ], [ "DOG_CAT_BREEDER", "OCC_CODE_665" ], [ "KENNEL_DAY_CARE_OPERATOR__NOT_IN_HOME_", "OCC_CODE_144" ], [ "PET_GROOMER_PET_SHOP_WORKER__MOBILE_GROOMER", "OCC_CODE_776" ], [ "ANIMAL_HANDLERS__ZOO_", "OCC_CODE_145" ], [ "OTHER_ZOO_WORKERS", "OCC_CODE_513" ], [ "DOG_TRAINER_W__DOCUMENTED_INCOME", "OCC_CODE_NA" ], [ "DOGWALKER_SITTER___IN_HOUSE", "OCC_CODE_667" ], [ "ARCHITECT___ALL_OTHERS__90__OFFICE_AND_CONSULTING_", "OCC_CODE_261" ], [ "ARCHITECT___BACHELOR_S_DEGREE", "OCC_CODE_4" ], [ "ACTIVE_DUTY_MILITARY", "OCC_CODE_777" ], [ "ART_DEALER_GALLERY_OWNER_CURATOR_AT_LEAST__45_000_INCOME_EACH_OF_LAST_TWO_YEARS", "OCC_CODE_2" ], [ "CARTOONIST_ILLUSTRATOR__SALARIED_OR_SE_W___35K_NET_", "OCC_CODE_934" ], [ "COMMERCIAL_ARTIST_GRAPHIC_ARTIST_COMMERCIAL_DESIGNER__SALARIED__OR_SE_W___35K_NET_", "OCC_CODE_146" ], [ "PICTURE_FRAMER", "OCC_CODE_NA" ], [ "ASTROLOGER", "OCC_CODE_75" ], [ "COLLEGIATE_ATHLETIC_DIRECTOR", "OCC_CODE_778" ], [ "PROFESSIONAL_OR_COLLEGIATE_COACH", "OCC_CODE_29" ], [ "PROFESSION_OR_COLLEGIATE_FT_REFEREE__IF_PT__ISSUE_1_OCC_CLASS_LOWER_THAN_FT_OCC_", "OCC_CODE_492" ], [ "PROFESSIONAL_ATHLETE_JOCKEY", "OCC_CODE_6" ], [ "PROFESSIONAL_OR_COLLEGIATE_ATHLETIC_TRAINER", "OCC_CODE_491" ], [ "UNDER_18_NON_PROFESSIONAL_COACH", "OCC_CODE_NA" ], [ "UNDER_18_NON_PROFESSIONAL_FT_REFEREE__IF_PT__ISSUE_1_OCC_CLASS_LOWER_THAN_FT_OCC_", "OCC_CODE_NA" ], [ "AUTO_SALVAGE_WORKERS", "OCC_CODE_NA" ], [ "AUTO_DEALERSHIP___OWNER__ADMINISTRATIVE_DUTIES_ONLY", "OCC_CODE_460" ], [ "AUTO_DEALERSHIP___SALESPERSON_SALES_MANAGER", "OCC_CODE_112" ], [ "AUTO_DEALERSIP___WASHER_POLISHER", "OCC_CODE_314" ], [ "AUTO_DEALERSHIP___GENERAL_MANAGER_FINANCE_MANAGER_BUSINESS_MANAGER", "OCC_CODE_779" ], [ "AIR_TRAFFIC_CONTROL_SPECIALIST", "OCC_CODE_433" ], [ "CROP_DUSTER_OTHER_PILOTS", "OCC_CODE_50" ], [ "FLIGHT_ATTENDANT_STEWARD_STEWARDESS", "OCC_CODE_99" ], [ "FREIGHT_OR_BAGGAGE_HANDLER_BELLHOP_PORTER", "OCC_CODE_89" ], [ "PILOT_OFFICER__COMMERCIAL_SCHEDULED_AIRLINE", "OCC_CODE_48" ], [ "PILOT_OFFICER__CORPORATION_OR_EXECUTIVE_CARRIERS", "OCC_CODE_60" ], [ "PILOT_OFFICER__NONSCHEDULED_AIRLINE_CHARTER", "OCC_CODE_49" ], [ "TICKET_AGENT_ADMINISTRATIVE_PERSONNEL", "OCC_CODE_341" ], [ "OTHER_ON_GROUND_AVIATION_PERSONNEL", "OCC_CODE_NA" ], [ "BAILBONDSMAN", "OCC_CODE_693" ], [ "BAILBONDSMAN___OFFICE_DUTIES_ONLY__NO_FIREARM", "OCC_CODE_782" ], [ "BAILBONDSMAN___OFFICE_DUTIES_ONLY__WITH_FIREARM", "OCC_CODE_NA" ], [ "BAKER", "OCC_CODE_783" ], [ "BAKERY_DELIVERY", "OCC_CODE_784" ], [ "BAKERY___SUPERVISORY___ADMINISTRATIVE_DUTIES_ONLY__OWNER", "OCC_CODE_193" ], [ "BANK_CASHIER_TELLER", "OCC_CODE_107" ], [ "BANKING_OFFICER__EXECUTIVE__BANK_EXAMINER", "OCC_CODE_785" ], [ "PERSONAL_BANKER__MORTGAGE_LOAN_OFFICER__LOAN_ORIGINATOR_CREDIT_ANALYST", "OCC_CODE_250" ], [ "BARBER", "OCC_CODE_194" ], [ "COSMETOLOGIST_HAIRSTYLIST__W_2_OR_RENTING_BOOTH_", "OCC_CODE_786" ], [ "ESTHETICIAN__ELECTROLOGIST_MANICURIST_MAKEUP_ARTIST", "OCC_CODE_616" ], [ "BARTENDER__FT_OR_PT_", "OCC_CODE_NA" ], [ "COMMODITIES_FUTURES_OPTIONS_OTHER_BROKER", "OCC_CODE_787" ], [ "COMMODITIES_FUTURES_OPTIONS_FLOOR_TRADER", "OCC_CODE_791" ], [ "OTHER_BROKER___2_YEARS_EXPERIENCE", "OCC_CODE_788" ], [ "OTHER_BROKER___LESS_THAN_2_YEARS_EXPERIENCE", "OCC_CODE_793" ], [ "STOCKS_BONDS_BROKER___2_YEARS_EXPERIENCE", "OCC_CODE_790" ], [ "STOCKS_BONDS_FLOOR_TRADER_DAYTRADER", "OCC_CODE_792" ], [ "STOCKS_BONDS_OTHER_BROKER", "OCC_CODE_766" ], [ "BUTCHER", "OCC_CODE_215" ], [ "BUTLER_PERSONAL_ASSISTANT__W_2_ONLY_", "OCC_CODE_666" ], [ "CALL_CENTER_WORKERS", "OCC_CODE_NA" ], [ "CARPET_CLEANER_OR_INSTALLER", "OCC_CODE_319" ], [ "CARTOGRAPHER", "OCC_CODE_794" ], [ "CASINO_CASHIER__NOT_ON_FLOOR_", "OCC_CODE_733" ], [ "CASINO_DEALERS_PIT_BOSS_WORKERS_ON_FLOOR__MINIMUM_ONE_YEAR_WITH_EMPLOYER_", "OCC_CODE_103" ], [ "CASINO_MANAGER_SUPERVISOR_OPERATOR__NO_FLOOR_DUTIES_", "OCC_CODE_182" ], [ "CASINO___OTHERS", "OCC_CODE_637" ], [ "CASINO_SECURITY__NO_FIREARM", "OCC_CODE_NA" ], [ "CASINO_SECURITY__FIREARM", "OCC_CODE_NA" ], [ "CATERER", "OCC_CODE_217" ], [ "CHEMICAL_INDUSTRY___ALL_OTHER_WORKERS__ACIDS__ALKALIS__CARCINOGENS__OR_EXPLOSIVES_", "OCC_CODE_795" ], [ "CHEMICAL_INDUSTRY___LAB_TECHNICIAN__NO_ACIDS__ALKALIS__CARCINOGENS__OR_EXPLOSIVES_", "OCC_CODE_186" ], [ "CHEMICAL_INDUSTRY___MACHINE_OPERATOR__FLOOR_WORKER__NO_ACIDS__ALKALIS__CARCINOGENS__OR_EXPLOSIVES_", "OCC_CODE_796" ], [ "CHEMICAL_INDUSTRY___SKILLED_WORKER__NO_ACIDS__ALKALIS__CARCINOGENS__OR_EXPLOSIVES_", "OCC_CODE_216" ], [ "CHEMICAL_INDUSTRY___TESTER__NO_ACIDS__ALKALIS__CARCINOGENS__OR_EXPLOSIVES_", "OCC_CODE_797" ], [ "CHIMNEYSWEEP", "OCC_CODE_664" ], [ "CIRCUS_CARNIVAL_WORKERS", "OCC_CODE_188" ], [ "CIVIC_CENTERS_CONVENTION_CENTERS_ARENAS___ADMINISTRATOR_MANAGER", "OCC_CODE_798" ], [ "CIVIC_CENTERS_CONVENTION_CENTERS_ARENAS___CLERICAL_OFFICE_PERSONNEL", "OCC_CODE_726" ], [ "CIVIC_CENTERS_CONVENTION_CENTERS_ARENAS___CONCESSION_WORKERS", "OCC_CODE_799" ], [ "CIVIC_CENTERS_CONVENTION_CENTERS_ARENAS___PRODUCTION_WORKERS__LIGHTS__PROPERTY__SOUND_", "OCC_CODE_759" ], [ "CUSTODIANS_JANITORS_OTHER_CLEAN_UP_WORKERS", "OCC_CODE_180" ], [ "CLEANERS___SUPERVISORY_ADMINISTRATIVE_DUTIES_ONLY", "OCC_CODE_800" ], [ "WINDOW_CLEANER__2_STORIES_OR_LESS_", "OCC_CODE_801" ], [ "WINDOW_CLEANER__MORE_THAN_2_STORIES_", "OCC_CODE_802" ], [ "POOL_CLEANER__INSTALLER", "OCC_CODE_NA" ], [ "MINISTER_RABBI_PASTOR", "OCC_CODE_18" ], [ "MISSIONARY__SALARIED_AND___90_DAYS__YR_OUT_OF_US_", "OCC_CODE_NA" ], [ "DATA_ENTRY", "OCC_CODE_379" ], [ "CLERICAL___GENERAL", "OCC_CODE_727" ], [ "CLERICAL___INVENTORY_CONTROL", "OCC_CODE_104" ], [ "PARTS_OR_STOCK_CLERK", "OCC_CODE_487" ], [ "CLERICAL___QUALITY_CONTROL", "OCC_CODE_803" ], [ "SHIPPING_AND_RECEIVING__NO_FREIGHT_HANDLING_", "OCC_CODE_348" ], [ "CLOTH_CLOTHING_FASHION_DESIGNER", "OCC_CODE_262" ], [ "FASHION_MODEL", "OCC_CODE_421" ], [ "TAILOR_DRESSMAKER_SEAMSTRESS", "OCC_CODE_628" ], [ "IT___ADMINISTRATOR__CAPACITY_MANAGEMENT_SPECIALIST", "OCC_CODE_804" ], [ "IT___ENGINEER_ARCHITECT__PROGRAMMER__SYSTEM_ANALYST__WEB_DEVELOPER", "OCC_CODE_806" ], [ "IT___HELP_DESK_WORKER__TECHNICAL_SUPPORT_STAFF", "OCC_CODE_NA" ], [ "BRIDGE_PAINTER", "OCC_CODE_739" ], [ "BRIDGE_STRUCTURAL_STEEL_WORKERS_WELDERS", "OCC_CODE_206" ], [ "CARPENTRY__WOODWORKER_CABINET_MAKER", "OCC_CODE_201" ], [ "ASBESTOS_REMOVAL_WORKERS", "OCC_CODE_205" ], [ "DRY_WALL_WORKER_PLASTERER", "OCC_CODE_426" ], [ "EXPLOSIVE_HANDLER_BLASTER", "OCC_CODE_331" ], [ "FLOOR_COVERING_LAYER_LINOLEUM___CARPET_WORKER", "OCC_CODE_755" ], [ "FOUNDRY", "OCC_CODE_885" ], [ "GENERAL_LABORER_CLEAN_UP__DEMOLITION_WORKER", "OCC_CODE_309" ], [ "HEAVY_EQUIPMENT_OPERATOR__GRADER_BULLDOZER_EARTH_MOVER_CRANE_", "OCC_CODE_213" ], [ "INSULATION_WORKER", "OCC_CODE_NA" ], [ "CONSTRUCTION_JOB_SUPERVISOR_FOREMAN", "OCC_CODE_210" ], [ "MASON_BRICKWORKER_CEMENT_WORKER_TILESETTER", "OCC_CODE_204" ], [ "MONUMENT_WORKER_STONE_CARVER", "OCC_CODE_402" ], [ "PAINTER__EXTERIOR_NON_RESIDENTIAL__WORKING_LESS_THAN_2_STORIES", "OCC_CODE_NA" ], [ "PAINTER__EXTERIOR_NON_RESIDENTIAL__WORKING_GREATER_THAN_2_STORIES", "OCC_CODE_661" ], [ "PAINTER__INTERIOR_", "OCC_CODE_416" ], [ "PAPERHANGER", "OCC_CODE_808" ], [ "ROOFER__ANY_WORK_ON_PITCHED_ROOFS", "OCC_CODE_446" ], [ "SANDBLASTER", "OCC_CODE_245" ], [ "SHEET_METAL_WORKER", "OCC_CODE_246" ], [ "STEEPLEJACK", "OCC_CODE_486" ], [ "SUPERINTENDENT_BUILDING_CONTRACTOR", "OCC_CODE_622" ], [ "TOWER_ERECTORS", "OCC_CODE_212" ], [ "UPHOLSTERER", "OCC_CODE_497" ], [ "WELDER__IN_CONSTRUCTION_INDUSTRY_", "OCC_CODE_500" ], [ "HANDYMAN_WITHOUT_DEMOLITION__ROOFING__LADDERS", "OCC_CODE_NA" ], [ "HANDYMAN_WITH_DEMOLITION__ROOFING__LADDERS", "OCC_CODE_NA" ], [ "HIGHWAY__ROAD_OR_STREET_CONSTRUCTION_WORKER_LABORER", "OCC_CODE_243" ], [ "SEWER_CONSTRUCTION__EXCEPT_TUNNEL_", "OCC_CODE_743" ], [ "TUNNEL_WORKERS__SHAFT_OR_SUBWAY_", "OCC_CODE_745" ], [ "FLAT_ROOF_WORKERS_ONLY", "OCC_CODE_NA" ], [ "ROOFING_CONTRACTOR___NO_LABOR", "OCC_CODE_NA" ], [ "CONSULTANT_LOBBYIST", "OCC_CODE_810" ], [ "CONSULTANT_LOBBYIST___IT_COMPUTER_SCIENCE_DEGREE_ONLY", "OCC_CODE_NA" ], [ "CORPORATE_OFFICER_EXECUTIVE___ADMIN_DUTIES_ONLY__AT_LEAST__100_000_INCOME", "OCC_CODE_812" ], [ "CORPORATE_OFFICER_EXECUTIVE___ALL_OTHERS", "OCC_CODE_941" ], [ "DAY_CARE___NOT_IN_HOME_OR_ON_PROPERTY", "OCC_CODE_815" ], [ "NANNY_AU_PAIR", "OCC_CODE_814" ], [ "DAY_CARE__HOME_BASED_____OWNER_MUST_BE_ST_LICENSED__AT_LEAST_2_YRS_IN_BUSINESS_W__TAX_FORMS__MIN_3_CHILD_UNRELATED_TO_PROVIDER_", "OCC_CODE_813" ], [ "DAY_CARE___NOT_IN_HOME_OR_ON_PROPERTY__OWNER_DIRECTOR__ADMINISTRATIVE_DUTIES_ONLY_", "OCC_CODE_816" ], [ "AUTO_BUS_TRUCK_TAXI_DISPATCHER__OFFICE_DUTIES_ONLY_", "OCC_CODE_746" ], [ "SCUBA_TEACHER_POLICE_SEARCH_DIVER_OTHER_DIVERS", "OCC_CODE_259" ], [ "ARMORED_CAR_DRIVER", "OCC_CODE_166" ], [ "DELIVERY_OR_ROUTE_DRIVER", "OCC_CODE_153" ], [ "EMERGENCY_VEHICLE__TOW_TRUCK_DRIVER", "OCC_CODE_170" ], [ "FORK_LIFT_OPERATOR", "OCC_CODE_403" ], [ "GARBAGE_SANITATION_TRUCK_DRIVER", "OCC_CODE_732" ], [ "RACING__ALL_TYPES_", "OCC_CODE_264" ], [ "TAXICAB_BUS_LIMOSINE__ONLY_IF_W_2_EMPLOYEES_", "OCC_CODE_141" ], [ "TRACTOR_TRAILER_TRUCK___TWO_OR_MORE_AXLES", "OCC_CODE_140" ], [ "DRIVING_INSTRUCTOR", "OCC_CODE_NA" ], [ "UBER__LYFT_DRIVER__LIMO__FT_OR___10_HRS_WEEK", "OCC_CODE_NA" ], [ "VALET_CAR_PARK__HOTEL__RESTAURANT__CASINO_", "OCC_CODE_NA" ], [ "DRY_CLEANING_LAUNDRY_OWNER_MANAGER_SUPERVISOR", "OCC_CODE_819" ], [ "DRY_CLEANING_LAUNDRY_WORKERS", "OCC_CODE_224" ], [ "ECONOMIST", "OCC_CODE_820" ], [ "ELECTRICIAN", "OCC_CODE_211" ], [ "ELECTRICAL_INDUSTRY___FIELD_SUPERVISOR_ESTIMATOR", "OCC_CODE_744" ], [ "METER_INSTALLER", "OCC_CODE_495" ], [ "METER_READER_OR_INSPECTOR", "OCC_CODE_1" ], [ "OVERHEAD_LINES_CONDUITS_TUNNELS", "OCC_CODE_750" ], [ "ELECTRIC_SOLAR_NUCLEAR_OIL_GAS___MANAGER_SUPERVISOR_ENGINEER__OFFICE_DUTIES_ONLY_", "OCC_CODE_822" ], [ "ELECTRIC_SOLAR_NUCLEAR_OIL_GAS___OTHER_EMPLOYEES", "OCC_CODE_823" ], [ "ENGINEER___INSPECTOR_SUPERVISOR__WITH_FIELD_DUTIES_", "OCC_CODE_282" ], [ "OTHER_ENGINEERS_W__NO_DEGREE_OFFICE_ONLY", "OCC_CODE_634" ], [ "BIOMEDICAL_ENGINEER", "OCC_CODE_NA" ], [ "MECHANICAL_ELECTRICAL_STRUCTURAL_RPE___OTHER_PROFESSIONAL_DEGREES", "OCC_CODE_633" ], [ "ACTOR_ACTRESS_ENTERTAINER", "OCC_CODE_760" ], [ "ANNOUNCER_COMMENTATOR", "OCC_CODE_85" ], [ "CAMERA_OPERATOR_PHOTOGRAPHER", "OCC_CODE_R30" ], [ "DIRECTOR", "OCC_CODE_671" ], [ "PRODUCER", "OCC_CODE_767" ], [ "PRODUCTION_WORKERS__LIGHT_PROPERTY_SOUND_", "OCC_CODE_404" ], [ "REPORTER__WITH_OR_WITHOUT_FIELD_DUTIES_", "OCC_CODE_824" ], [ "STUDIO_ENGINEER", "OCC_CODE_826" ], [ "TECHNICIAN", "OCC_CODE_489" ], [ "DISC_JOCKEY__SELF_EMPLOYED__WEDDINGS__PARTIES_ETC_", "OCC_CODE_NA" ], [ "DISC_JOCKEY__RADIO_ANNOUNCER", "OCC_CODE_NA" ], [ "COSTUME_MAKEUP__SPECIAL_EFFECTS_MAKEUP", "OCC_CODE_NA" ], [ "EVENT_PLANNER__CORPORATE_WEDDING__W_2_OR_SE_W_NET_INCOME____30K_", "OCC_CODE_NA" ], [ "EXTERMINATOR_FUMIGATOR", "OCC_CODE_285" ], [ "AUCTIONEER__RETAIL_OR_WHOLESALE", "OCC_CODE_190" ], [ "BEEKEEPER__APIARIST_", "OCC_CODE_827" ], [ "BUYER__AGRICULTURAL_AND_LIVESTOCK_PRODUCTS", "OCC_CODE_79" ], [ "CHICKEN_POULTRY_GROWER_OR_RAISER", "OCC_CODE_828" ], [ "CITRUS_FRUIT_GROWER", "OCC_CODE_121" ], [ "DAIRY_FARMER", "OCC_CODE_829" ], [ "DAIRY_FARM_RANCH_ORCHARD_WINERY_WORKERS", "OCC_CODE_118" ], [ "FARM_IMPLEMENT_DEALER__OFFICE_DUTIES_ONLY_", "OCC_CODE_120" ], [ "FARMER_TREE_FARMER", "OCC_CODE_830" ], [ "GRAIN_ELEVATORS_OR_MILLS__NON_OFFICE_WORKERS_", "OCC_CODE_277" ], [ "GRAIN_ELEVATORS_OR_MILLS__OFFICE_WORKERS_", "OCC_CODE_831" ], [ "HORSE_BREAKER", "OCC_CODE_462" ], [ "HORSE_TRAINER_OR_OWNER", "OCC_CODE_463" ], [ "LIVESTOCK_RAISER_OR_FEEDER_RANCHER", "OCC_CODE_832" ], [ "MANAGER_SUPERINTENDENT", "OCC_CODE_377" ], [ "MILLWRIGHT", "OCC_CODE_738" ], [ "ORCHARDIST", "OCC_CODE_833" ], [ "TOBACCO_FARMER_OR_GROWER", "OCC_CODE_834" ], [ "ANY_TYPE__OWNER", "OCC_CODE_NA" ], [ "FARRIER__HORSESHOER", "OCC_CODE_NA" ], [ "KELP_FARMING__ON_OCEAN_", "OCC_CODE_NA" ], [ "MARIJUANA_FARMER", "OCC_CODE_NA" ], [ "FINANCIAL_PLANNER", "OCC_CODE_837" ], [ "FIREARMS_REPAIR", "OCC_CODE_NA" ], [ "FIREARMS_TRAINING_BUSINESS_OWNER__NO_COMBAT_STYLE_TRAINING", "OCC_CODE_NA" ], [ "FIREFIGHTER_EMT_FT_ALL__INCLUDING_DRIVERS", "OCC_CODE_636" ], [ "CAPTAIN__SPORT_FISHING_BOAT__TOURIST__PLEASURE_", "OCC_CODE_58" ], [ "FISH_HATCHERY_WORKER", "OCC_CODE_129" ], [ "FISHERMEN_AND_SURFACE_WORKERS", "OCC_CODE_127" ], [ "FLORIST___ADMINISTRATIVE_OR_SALES_ONLY__NO_GREENHOUSE_WORK_", "OCC_CODE_284" ], [ "FLORIST___OTHERS_WITH_GREENHOUSE_WORK", "OCC_CODE_754" ], [ "FOREST_RANGER", "OCC_CODE_130" ], [ "PROFESSIONAL_GAMBLER", "OCC_CODE_290" ], [ "GARBAGE_COLLECTOR", "OCC_CODE_155" ], [ "GLASS_PRODUCTS_WORKER", "OCC_CODE_295" ], [ "GLAZIER", "OCC_CODE_296" ], [ "AUTO_GLASS_INSTALLER", "OCC_CODE_NA" ], [ "GOLF_COUNTRY_CLUB_PROFESSIONAL__GOLF_OR_TENNIS__FULL_TIME_ONLY_", "OCC_CODE_692" ], [ "GOLF_COUNTRY_CLUB_GREENSKEEPER_GROUNDSKEEPER", "OCC_CODE_753" ], [ "GOLF_COUNTRY_CLUB_MANAGER_PROPRIETOR", "OCC_CODE_691" ], [ "GOLF_COUNTRY_CLUB_SUPERVISOR_OF_GROUNDS_CREW__LIGHT_PHYSICAL_ACTIVITY_", "OCC_CODE_690" ], [ "HUNTING_FISHING_GUIDE", "OCC_CODE_838" ], [ "MOUNTAIN_CLIMBING_OR_RIVER_GUIDE", "OCC_CODE_158" ], [ "TOUR_GUIDE__NO_PASSENGER_TRANSPORT_OR_PHYSICAL_DUTIES__BIKING__ETC__", "OCC_CODE_734" ], [ "TOUR_GUIDE_OTHER", "OCC_CODE_NA" ], [ "ACUPUNCTURIST", "OCC_CODE_700" ], [ "DENTAL_ASSISTANT", "OCC_CODE_313" ], [ "DENTAL_HYGIENIST", "OCC_CODE_841" ], [ "DENTIST__GENERAL_OR_SPECIALTY", "OCC_CODE_718" ], [ "DENTAL_LAB_TECHNICIAN", "OCC_CODE_843" ], [ "NURSE_MIDWIFE", "OCC_CODE_847" ], [ "CERTIFIED_NURSE_AIDE__CNA___DOCTOR_S_OFFICE_OR_CLINIC_ONLY", "OCC_CODE_840" ], [ "HOME_HEALTH_CARE_PROVIDER_OTHER_THAN_RN_LPN_LVN_CAN", "OCC_CODE_704" ], [ "NURSE_ANESTHETIST", "OCC_CODE_701" ], [ "NURSE_IN_PSYCHIATRIC_HOSPITAL_PRISON_JAIL", "OCC_CODE_844" ], [ "NURSE_PRACTITIONER", "OCC_CODE_845" ], [ "PRIVATE_DUTY_NURSE__OUTSIDE_HOSPITAL_", "OCC_CODE_851" ], [ "RN_LPN_LVN__ALL", "OCC_CODE_371" ], [ "SCHOOL_NURSE__FULL_TIME_ONLY_", "OCC_CODE_855" ], [ "HEALTH_CARE_ADMINISTRATOR", "OCC_CODE_54" ], [ "CHIROPRACTOR", "OCC_CODE_702" ], [ "MEDICAL_ASSISTANT", "OCC_CODE_NA" ], [ "NATUROPATH", "OCC_CODE_715" ], [ "NUTRITIONIST_OR_DIETICIAN__NO_FOOD_PREPARATION_", "OCC_CODE_86" ], [ "OPTOMETRIST", "OCC_CODE_32" ], [ "OPTICIAN", "OCC_CODE_NA" ], [ "OSTEOPATH", "OCC_CODE_716" ], [ "PARAMEDICAL_EXAMINER", "OCC_CODE_NA" ], [ "PHYSICIAN_ASSISTANT", "OCC_CODE_717" ], [ "PODIATRIST", "OCC_CODE_19" ], [ "PHARMACY_TECHNICIAN", "OCC_CODE_849" ], [ "REGISTERED_PHARMACIST", "OCC_CODE_87" ], [ "ANESTHESIOLOGIST", "OCC_CODE_705" ], [ "DERMATOLOGIST", "OCC_CODE_707" ], [ "EMERGENCY_ROOM_PHYSICIAN", "OCC_CODE_708" ], [ "FAMILY_PRACTICE_PEDIATRICIAN", "OCC_CODE_709" ], [ "INTERNAL_MEDICINE", "OCC_CODE_710" ], [ "OBSTETRICS_GYNECOLOGY", "OCC_CODE_711" ], [ "OPHTHALMOLOGIST", "OCC_CODE_846" ], [ "ORTHOPEDIC_SURGEON", "OCC_CODE_NA" ], [ "PATHOLOGIST", "OCC_CODE_712" ], [ "PSYCHIATRIST", "OCC_CODE_641" ], [ "PULMONOLOGIST", "OCC_CODE_NA" ], [ "RADIOLOGIST__INVASIVE", "OCC_CODE_NA" ], [ "RADIOLOGIST__NON_INVASIVE", "OCC_CODE_27" ], [ "SPECIALTY_NOT_LISTED", "OCC_CODE_713" ], [ "SURGEON", "OCC_CODE_714" ], [ "UROLOGIST", "OCC_CODE_706" ], [ "ONCOLOGIST", "OCC_CODE_NA" ], [ "PAIN_MANAGEMENT", "OCC_CODE_NA" ], [ "DIALYSIS__ECG__LABORATORY__ULTRASOUND__X_RAY_TECHINCIANS", "OCC_CODE_373" ], [ "PARAMEDICAL_EXAMINERS", "OCC_CODE_NA" ], [ "PHLEBOTOMISTS", "OCC_CODE_NA" ], [ "THERAPIST_ASSISTANT__HOSPITAL__CLINIC__DOCTOR_S_OFFICE_", "OCC_CODE_332" ], [ "AUDIOLOGIST", "OCC_CODE_839" ], [ "MASSAGE__CERTIFIED_OR_LICENSED_", "OCC_CODE_327" ], [ "OCCUPATIONAL_THERAPIST__HOSPITAL__CLINIC__DOCTOR_S_OFFICE_", "OCC_CODE_248" ], [ "OTHER_THERAPIST", "OCC_CODE_848" ], [ "PHYSICAL_THERAPIST__HOSPITAL__CLINIC__DOCTOR_S_OFFICE_", "OCC_CODE_517" ], [ "PSYCHOLOGIST_COUNSELOR__LICENSED_AND_PH_D__", "OCC_CODE_719" ], [ "PSYCHOLOGIST_COUNSELOR__LICENSED_ONLY_", "OCC_CODE_852" ], [ "RESPIRATORY_THERAPIST__HOSPITAL__CLINIC__DOCTOR_S_OFFICE_", "OCC_CODE_854" ], [ "SPEECH__REGISTERED_OR_LICENSED___HOSPITAL__CLINIC__DOCTOR_S_OFFICE_", "OCC_CODE_40" ], [ "THERAPIST_ASSISTANT__IN_HOME_", "OCC_CODE_518" ], [ "OCCUPATIONAL_THERAPIST__IN_HOME_", "OCC_CODE_521" ], [ "PHYSICAL_THERAPIST__IN_HOME_", "OCC_CODE_519" ], [ "RESPIRATORY_THERAPIST__IN_HOME_", "OCC_CODE_522" ], [ "SPEECH_THERAPIST__REGISTERED_OR_LICENSED___IN_HOME_", "OCC_CODE_520" ], [ "GARDENER_GREENHOUSE_WORKER_NURSERY_WORKER", "OCC_CODE_292" ], [ "HOTEL_CARETAKER_MAINTENANCE", "OCC_CODE_737" ], [ "HOTEL_DESK_CLERK", "OCC_CODE_643" ], [ "HOTEL_MANAGER_OWNER__OFFICE_DUTIES_ONLY_", "OCC_CODE_374" ], [ "FINANCIAL_ADVISOR_AGENT___2_YEARS_EXPERIENCE", "OCC_CODE_942" ], [ "FINANCIAL_ADVISOR_AGENT___OTHER", "OCC_CODE_857" ], [ "CLAIMS_EXAMINER_UNDERWRITER__OFFICE_DUTIES_ONLY_", "OCC_CODE_680" ], [ "CLAIMS_EXAMINER_UNDERWRITER__WITH_FIELD_DUTIES_", "OCC_CODE_681" ], [ "INSURANCE_GENERAL_AGENT__OWNER_OF_AN_AGENCY_", "OCC_CODE_859" ], [ "INSURANCE_OFFICE_MANAGER", "OCC_CODE_860" ], [ "INTERIOR_DESIGNER_NO_HANDS_ON_PAINTING__ETC_", "OCC_CODE_686" ], [ "OTHER_INTERIOR_DESIGNER__WITH_PAINTING__ETC_", "OCC_CODE_152" ], [ "INTERPRETER_TRANSLATOR", "OCC_CODE_725" ], [ "CERTIFIED_GEMOLOGIST_CERTIFIED_GEMOLOGIST_APPRAISER", "OCC_CODE_687" ], [ "GOLDSMITH_SILVERSMITH_DIAMOND_CUTTER", "OCC_CODE_742" ], [ "OTHER_JEWERLY_SALES", "OCC_CODE_730" ], [ "LANDSCAPE_ARCHITECT", "OCC_CODE_5" ], [ "LANDSCAPE_CONTRACTOR", "OCC_CODE_861" ], [ "OTHER_LANDSCAPING_WORKERS_INCLUDING_LAWN_MOWERS", "OCC_CODE_862" ], [ "TREE_TRIMMER_TREE_SURGEON", "OCC_CODE_493" ], [ "CUSTOMS_AND_IMMIGRATION_INSPECTOR__INSIDE_DUTIES_ONLY__NO_WEAPON_", "OCC_CODE_167" ], [ "CITY_COUNTY_STATE_POLICE_DISPATCHER__COMMUNICATIONS__NO_WEAPON_", "OCC_CODE_257" ], [ "GUARD__SECURITY_OR_BANK__NO_WEAPON_", "OCC_CODE_276" ], [ "FISH_AND_GAME_WARDEN__NO_WEAPON_", "OCC_CODE_171" ], [ "OTHER_LAW_ENFORCEMENT__OFFICE_ONLY_NO_WEAPON_", "OCC_CODE_NA" ], [ "CITY__TOWN_POLICE__DETECTIVE_INSPECTOR__MARSHALS_SHERIFFS_STATE_HIGHWAY_PATROL__DEPUTIES__METER_PERSON", "OCC_CODE_168" ], [ "UNDERCOVER_POLICE_NARCOTICS_VICE_OR_UNDERCOVER_DETECTIVES", "OCC_CODE_NA" ], [ "BORDER_PATROL_OFFICER", "OCC_CODE_NA" ], [ "TSA__CUSTOMS_AGENT__BORDER_PATROL", "OCC_CODE_NA" ], [ "JUVENILE_DETENTION_FACILITY_WORKERS", "OCC_CODE_864" ], [ "AIR_MARSHAL", "OCC_CODE_863" ], [ "GUARD__SECURITY_OR_BANK__WITH_WEAPON_", "OCC_CODE_NA" ], [ "PRIVATE_DETECTIVES__PRIVATE_INVESTIGATORS", "OCC_CODE_NA" ], [ "LAW_ENFORCEMENT_PROCESS_SERVER", "OCC_CODE_736" ], [ "TACTICAL_POLICE_TRAINING", "OCC_CODE_NA" ], [ "PRISON_OR_CORRECTIONAL_FACILITY___GUARD_JAILER_MATRON", "OCC_CODE_174" ], [ "PRISON_OR_CORRECTIONAL_FACILITY___MEDICAL_PROFESSIONAL__SOCIAL_WORKER_CLERGY", "OCC_CODE_NA" ], [ "PRISON_OR_CORRECTIONAL_FACILITY___WARDEN", "OCC_CODE_175" ], [ "ATTORNEY", "OCC_CODE_25" ], [ "BAILIFF", "OCC_CODE_78" ], [ "COURT_REPORTER_STENOGRAPHER", "OCC_CODE_865" ], [ "JUDGE", "OCC_CODE_26" ], [ "LEGAL_ASSISTANT__SECRETARY", "OCC_CODE_866" ], [ "PARALEGAL", "OCC_CODE_868" ], [ "LIBRARIAN", "OCC_CODE_92" ], [ "BARTENDER__FT_OR_PT_", "OCC_CODE_195" ], [ "LIQUOR_STORE_OWNER_MANAGER", "OCC_CODE_871" ], [ "LIQUOR_WHOLESALER", "OCC_CODE_731" ], [ "BREWERY_DISTILLERY_WINE_PLANT_WORKERS", "OCC_CODE_NA" ], [ "WINERY_VINEYARD_OWNERS", "OCC_CODE_NA" ], [ "LOCKSMITH_KEYMAKER", "OCC_CODE_321" ], [ "LUMBER_INDUSTRY___OFFICE_DUTIES_ONLY", "OCC_CODE_136" ], [ "OTHER_LUMBER_INDUSTRY", "OCC_CODE_466" ], [ "MAID__W_2_ONLY_", "OCC_CODE_143" ], [ "AUTOMOBILE_MANUFACTURING", "OCC_CODE_873" ], [ "MANUFACTURING___ADMINISTRATIVE_SUPERVISORY_DUTIES_ONLY", "OCC_CODE_872" ], [ "ALCOHOL_BREWERY_DISTILLERY_WINERY_PLANT_WORKERS", "OCC_CODE_258" ], [ "ASSEMBLER_BENCHWORKER_TOOLMAKER", "OCC_CODE_935" ], [ "CHICKEN_OR_BEEF_CLEANER_CUTTER_DRESSER_OR_PROCESSOR", "OCC_CODE_328" ], [ "CRANE_OPERATOR", "OCC_CODE_929" ], [ "CREAMERY_DAIRY_PLANT_WORKERS", "OCC_CODE_251" ], [ "DIEMAKER_ENGRAVER", "OCC_CODE_930" ], [ "FACTORY_CANNING_PRESERVING_WORKERS", "OCC_CODE_874" ], [ "MANUFACTURING___FOREMAN_INSPECTOR_SUPERINTENDENT", "OCC_CODE_875" ], [ "FOUNDRY", "OCC_CODE_885" ], [ "MANUFACTURING___INSTALLER_TESTER", "OCC_CODE_560" ], [ "MANUFACTURING___LAB_TECHNICIAN_OTHER_SKILLED_WORKER", "OCC_CODE_931" ], [ "MACHINE_OPERATOR_MACHINIST_MECHANIC_MILLWRIGHT", "OCC_CODE_933" ], [ "PACKINGHOUSE_WORKER", "OCC_CODE_663" ], [ "RECEIVING_SHIPPING_CLERK", "OCC_CODE_936" ], [ "REFRIGERATION_PLANT_WORKERS", "OCC_CODE_442" ], [ "RENDERING_PLANT_WORKERS", "OCC_CODE_443" ], [ "SHEET_METAL_WORKER", "OCC_CODE_246" ], [ "SUGAR_REFINERY_WORKER", "OCC_CODE_748" ], [ "OWNERS", "OCC_CODE_NA" ], [ "WORKERS", "OCC_CODE_NA" ], [ "HARBOR_MASTER", "OCC_CODE_876" ], [ "HARBOR_PILOT", "OCC_CODE_877" ], [ "LONGSHOREMAN__DOCKWORKER__STEVEDORE__WHARFWORKER", "OCC_CODE_260" ], [ "INLAND_VESSEL_PILOT", "OCC_CODE_51" ], [ "CARGO_SHIP__CREW", "OCC_CODE_325" ], [ "CARGO_SHIP__PILOT_OFFICERS", "OCC_CODE_722" ], [ "PASSENGER_SHIP__CREW", "OCC_CODE_326" ], [ "PASSENGER_SHIP__PILOT_OFFICERS", "OCC_CODE_56" ], [ "PASSENGER_SHIP__RADIO_OPERATOR_PURSER_CHIEF_STEWARD", "OCC_CODE_878" ], [ "BICYCLE_MESSENGER", "OCC_CODE_879" ], [ "OUTSIDE_OR_BETWEEN_OFFICES_MESSENGER", "OCC_CODE_160" ], [ "MINING___MANAGER_OWNER", "OCC_CODE_218" ], [ "OTHER_MINING", "OCC_CODE_881" ], [ "MINING___OUTSIDE_FOREMAN__SURFACE_ONLY_", "OCC_CODE_400" ], [ "FUNERAL_DIRECTOR", "OCC_CODE_NA" ], [ "MORTICIAN___NO_EMBALMING", "OCC_CODE_88" ], [ "MORTICIAN___WITH_EMBALMING", "OCC_CODE_269" ], [ "MOVING_AND_STORAGE___ESTIMATOR_FOREMAN__NO_MANUAL_LABOR_", "OCC_CODE_882" ], [ "MOVER____FURNITURE_AND_HOUSEHOLD_GOODS", "OCC_CODE_100" ], [ "MOVING_AND_STORAGE___OWNER_MANAGER__NO_MANUAL_LABOR_", "OCC_CODE_883" ], [ "MUSICIAN__FULL_TIME_ORCHESTRA_STUDIO_COMPOSER_ARRANGER_", "OCC_CODE_382" ], [ "MUSICIAN_SINGER__NIGHT_CLUB_RESTAURANT_LOUNGE_TAVERN_", "OCC_CODE_381" ], [ "PIANO_TUNER_TEACHER", "OCC_CODE_163" ], [ "ALL_OTHER_MUSIC", "OCC_CODE_NA" ], [ "OFFICE_ADMINISTRATIVE_ASSISTANT", "OCC_CODE_110" ], [ "OFFICE_ADMINISTRATIVE_DUTIES_ONLY", "OCC_CODE_9" ], [ "RECRUITER_TALENT_ACQUISITION", "OCC_CODE_NA" ], [ "PAWN_BROKER", "OCC_CODE_340" ], [ "PETROLEUM_INDUSTRY___FOREMAN", "OCC_CODE_720" ], [ "PETROLEUM_INDUSTRY___MANAGER_SUPERINTENDENT", "OCC_CODE_721" ], [ "PETROLEUM_INDUSTRY___MECHANIC", "OCC_CODE_938" ], [ "OTHER_PETROLEUM_INDUSTRY__INCLUDING_OFFSHORE_WORKERS_AND_TECHNICIANS", "OCC_CODE_413" ], [ "CAMERA_OPERATOR__MOTION_PICTURE_TELEVISION", "OCC_CODE_98" ], [ "COMMERCIAL_PHOTOGRAPHER__NON_STUDIO__SPORTING_EVENTS__CORP_FUNCTIONS__CONCERTS__FILM_ON_LOCATION_", "OCC_CODE_943" ], [ "NON_HAZARDOUS_PHOTOGRAPHER__WEDDINGS_FAMILY_PORTRAITS__ETC__", "OCC_CODE_97" ], [ "PHOTOGRAPHER___DRONE_OPERATOR__OFFICE_ONLY_", "OCC_CODE_NA" ], [ "PHOTOGRAPHER___DRONE_OPERATOR__WORKING_OUTSIDE_ON_GROUND_OR_FLAT_ROOF_ONLY_", "OCC_CODE_NA" ], [ "PIPEFITTER_STEAMFITTER", "OCC_CODE_203" ], [ "PLUMBER", "OCC_CODE_427" ], [ "POSTAL_WORKER___DRIVER_LETTER_CARRIER_MAIL_HANDLER_CLERK", "OCC_CODE_139" ], [ "POSTAL_INSPECTOR__OFFICE_ONLY_", "OCC_CODE_949" ], [ "COMPOSITOR_LITHOGRAPHER_PRESSMAN_TYPESETTER__ENGRAVER__PHOTOENGRAVER__MACHINE_OPERATOR__MAINENANCE_MECHANIC", "OCC_CODE_950" ], [ "EDITOR_PUBLISHER_PROOFREADER", "OCC_CODE_723" ], [ "FOREMAN_OR_GRAPHIC_LITHOGRAPHIC_ARTIST_COPYWRITER_PHOTOGRAPHER", "OCC_CODE_951" ], [ "PRIVATE_INVESTIGATOR___NO_WEAPON__OFFICE_ONLY", "OCC_CODE_735" ], [ "PROPERTY_MANAGER___NO_MAINTENANCE_WORK", "OCC_CODE_177" ], [ "PROPERTY_MANAGER___WITH_MAINTENANCE_WORK", "OCC_CODE_609" ], [ "RAILROAD_TRACK_AND_SECTION_WORKERS", "OCC_CODE_457" ], [ "RAILROAD_TRAIN_CREW", "OCC_CODE_279" ], [ "RAILROAD_YARD_WORKERS", "OCC_CODE_761" ], [ "OTHER_RAILROAD", "OCC_CODE_NA" ], [ "REAL_ESTATE_ABSTRACTOR_ABSTRACT_CLERK", "OCC_CODE_45" ], [ "REAL_ESTATE_AGENT_BROKER__OTHERS_", "OCC_CODE_70" ], [ "REAL_ESTATE_AGENT_BROKER_2_YRS_EXPERIENCE", "OCC_CODE_944" ], [ "REAL_ESTATE_APPRAISER", "OCC_CODE_898" ], [ "ESCROW_TITLE_CLERKS", "OCC_CODE_899" ], [ "HOME_INSPECTOR", "OCC_CODE_306" ], [ "RESTAURANT_BAR___BUSBOY_BUSGIRL", "OCC_CODE_345" ], [ "RESTAURANT_BAR___CHEF", "OCC_CODE_624" ], [ "RESTAURANT_BAR___COOK", "OCC_CODE_NA" ], [ "RESTAURANT_BAR___HOST_HOSTESS_CASHIER", "OCC_CODE_164" ], [ "RESTAURANT_BAR___OWNER_OPERATOR_MANAGER__NO_BARTENDING_DUTIES_", "OCC_CODE_181" ], [ "RESTAURANT_BAR___WAITER_WAITRESS", "OCC_CODE_900" ], [ "RESTAURANT_BAR___DISHWASHER", "OCC_CODE_NA" ], [ "FOODTRUCK_OPERATOR", "OCC_CODE_NA" ], [ "OTHER_CONVENIENCE_STORE_EMPLOYEES", "OCC_CODE_765" ], [ "CONVENIENCE_STORE___OWNER_MANAGER_SUPERVISOR", "OCC_CODE_902" ], [ "OTHER_RETAIL_SALES_EMPLOYEES", "OCC_CODE_901" ], [ "RETAIL_SALES___OWNER_MANAGER_BUYER_PURCHASING_AGENT", "OCC_CODE_679" ], [ "RETAIL_SALES___SALESPERSON_SALES_CLERK_RECEIVING_CLERK", "OCC_CODE_114" ], [ "GROCERY_STORE_MAINTENANCE_CLEAN_UP_WORKERS", "OCC_CODE_561" ], [ "GROCERY_STORE_MANAGER", "OCC_CODE_458" ], [ "GROCERY_STORE_STOCK_CLERK_DELI_PRODUCE_BUTCHER_BAKERY", "OCC_CODE_903" ], [ "RETIRED_PERSON", "OCC_CODE_392" ], [ "RODEO_PERFORMER", "OCC_CODE_444" ], [ "SALES_AGENT_REP___OTHER", "OCC_CODE_947" ], [ "MULTI_LEVEL_MARKETING__IN_HOME_JEWELRY__MAKEUP_CLOTHING_COOKWARE_SALES____FT", "OCC_CODE_NA" ], [ "SALES_AGENT_REP___2_YRS_EXPERIENCE", "OCC_CODE_945" ], [ "SCIENTIST_NO_PHD__NO_FIELD_DUTIES", "OCC_CODE_NA" ], [ "SCIENTIST_WITH_FIELD_DUTIES", "OCC_CODE_NA" ], [ "SCIENTIST_WITH_PHD__NO_FIELD_DUTIES", "OCC_CODE_NA" ], [ "SEPTIC_AND_SEWAGE_INSTALLATION", "OCC_CODE_749" ], [ "SEPTIC_AND_SEWAGE_SERVICING", "OCC_CODE_428" ], [ "AUTOMOBILE_BODY_REPAIR_WORKER_WELDER", "OCC_CODE_682" ], [ "AUTOMOBILE_MECHANIC", "OCC_CODE_911" ], [ "AUTOMOBILE_SERVICE_MANAGER__SUPERVISORY_ONLY_", "OCC_CODE_294" ], [ "CABLE_SATELLITE_TELEVISION_EQUIP_REPAIRER_INSTALLER_SERVICER__NO_LINE_WORK__POLE_CLIMBING__OR_DIGGING_", "OCC_CODE_908" ], [ "CABLE_SATELLITE_TELEVISION_LINEMAN_POLE_CLIMBER", "OCC_CODE_909" ], [ "CLOCK_WATCH_REPAIRER", "OCC_CODE_225" ], [ "COMPUTER_INSTALLER", "OCC_CODE_907" ], [ "COMPUTER_SERVICER_REPAIRER", "OCC_CODE_266" ], [ "HEATING__VENTILATION__AND_AIR_CONDITIONING_SERVICE_REPAIR_INSTALLATION", "OCC_CODE_288" ], [ "HOUSEHOLD_APPLIANCES_SERVICE_REPAIR_INSTALLATION", "OCC_CODE_475" ], [ "MECHANIC__AIRCRAFT_BOAT_TRUCK_SMALL_ENGINE_", "OCC_CODE_291" ], [ "MUSICAL_INSTRUMENT_REPAIRER", "OCC_CODE_914" ], [ "OFFICE_MACHINES_SERVICE_REPAIR_INSTALLATION", "OCC_CODE_411" ], [ "SECURITY_SYSTEMS_SERVICE_REPAIR_INSTALLATION_NO_LINE_WORK__POLE_CLIMBING_OR_DIGGING_", "OCC_CODE_763" ], [ "SHOE_REPAIRER", "OCC_CODE_912" ], [ "VENDING_MACHINE_SERVICE_REPAIR_INSTALLATION", "OCC_CODE_165" ], [ "WELDER", "OCC_CODE_948" ], [ "SERVICE_STATION___OWNER_MANAGER_CASHIER_MECHANIC", "OCC_CODE_685" ], [ "TELEPHONE_EQUIP_REPAIRER_INSTALLER_SERVICER__NO_LINE_WORK__POLE_CLIMBING__OR_DIGGING_", "OCC_CODE_762" ], [ "TELEPHONE_LINEMAN_POLE_CLIMBER", "OCC_CODE_910" ], [ "TELEPHONE_TOWER_SERVICE_INSTALLATION", "OCC_CODE_913" ], [ "ELEVATOR_MECHANIC", "OCC_CODE_953" ], [ "SOCIAL_WORKER_WITH_FIELD_DUTIES", "OCC_CODE_656" ], [ "SOCIAL_WORKER_WITH_OFFICE_DUTIES_ONLY", "OCC_CODE_102" ], [ "FULL_TIME", "OCC_CODE_523" ], [ "STUNTMAN", "OCC_CODE_375" ], [ "SURVEYOR_WITH_FIELD_DUTIES", "OCC_CODE_915" ], [ "SURVEYOR_WITH_OFFICE_DUTIES_ONLY", "OCC_CODE_62" ], [ "TATOO_ARTIST_BODY_PIERCING", "OCC_CODE_659" ], [ "TAXIDERMIST", "OCC_CODE_105" ], [ "COLLEGE_UNIVERSITY___DEAN_PROFESSOR_REGISTRAR", "OCC_CODE_757" ], [ "K_12_ADMINISTRATOR_GUIDANCE_COUNSELOR_SPECIAL_EDUCATION_DRIVER_EDUCATION", "OCC_CODE_916" ], [ "K_12_ATHLETIC_DIRECTOR", "OCC_CODE_917" ], [ "PRINCIPAL_SUPERINTENDENT", "OCC_CODE_920" ], [ "TEACHER__FULL_TIME_CLASSROOM_ONLY__NOT_IN_HOME__DEGREE_REQUIRED_", "OCC_CODE_342" ], [ "TEACHER__PHYS_ED_SHOP_OTHERS_WITH_DUTIES_OUTSIDE_OF_THE_CLASSROOM_", "OCC_CODE_376" ], [ "AEROBICS_YOGA_INSTRUCTOR_PERSONAL_TRAINER", "OCC_CODE_764" ], [ "DANCING_INSTRUCTOR", "OCC_CODE_344" ], [ "MARTIAL_ARTS_INSTRUCTOR", "OCC_CODE_918" ], [ "SKI_INSTRUCTOR", "OCC_CODE_8" ], [ "VOCATIONAL_TEACHER_PROFESSOR", "OCC_CODE_370" ], [ "TEMPORARY_SEASONAL_WORKER", "OCC_CODE_922" ], [ "TRAVEL_BUREAU_WORKER_TRAVEL_AGENT", "OCC_CODE_756" ], [ "VETERINARIAN_ASSISTANT__LARGE_ANIMAL_", "OCC_CODE_41" ], [ "VETERINARIAN_ASSISTANT__SMALL_ANIMAL_", "OCC_CODE_38" ], [ "VETERINARIAN___DVM__LARGE_ANIMALS_", "OCC_CODE_923" ], [ "VETERINARIAN___DVM__SMALL_ANIMAL_", "OCC_CODE_42" ], [ "ALL_OTHER_WAREHOUSE_WORKERS", "OCC_CODE_924" ], [ "WAREHOUSE_CHECKER_CRATER_FOREMAN_PACKER", "OCC_CODE_758" ], [ "COLUMNIST", "OCC_CODE_76" ], [ "JOURNALIST_ON_STAFF_OF_NEWSPAPER_PERIODICAL", "OCC_CODE_926" ], [ "SCRIPTWRITER__SALARIED_ONLY_", "OCC_CODE_927" ], [ "TECHNICAL_WRITER__SALARIED_ONLY_", "OCC_CODE_928" ], [ "AUTHOR_NOVELIST_WRITER_PROOFREADER__SALARIED_ONLY_", "OCC_CODE_672" ], [ "FREELANCE_WRITER_AUTHOR_NOVELIST", "OCC_CODE_614" ] ],
        "displayValues" : {
          "OCC_CODE_NA" : "NA",
          "OCC_CODE_768" : "768",
          "OCC_CODE_44" : "44",
          "OCC_CODE_3" : "3",
          "OCC_CODE_478" : "478",
          "OCC_CODE_773" : "773",
          "OCC_CODE_775" : "775",
          "OCC_CODE_665" : "665",
          "OCC_CODE_144" : "144",
          "OCC_CODE_776" : "776",
          "OCC_CODE_145" : "145",
          "OCC_CODE_513" : "513",
          "OCC_CODE_667" : "667",
          "OCC_CODE_261" : "261",
          "OCC_CODE_4" : "4",
          "OCC_CODE_777" : "777",
          "OCC_CODE_2" : "2",
          "OCC_CODE_934" : "934",
          "OCC_CODE_146" : "146",
          "OCC_CODE_75" : "75",
          "OCC_CODE_778" : "778",
          "OCC_CODE_29" : "29",
          "OCC_CODE_492" : "492",
          "OCC_CODE_6" : "6",
          "OCC_CODE_491" : "491",
          "OCC_CODE_460" : "460",
          "OCC_CODE_112" : "112",
          "OCC_CODE_314" : "314",
          "OCC_CODE_779" : "779",
          "OCC_CODE_433" : "433",
          "OCC_CODE_50" : "50",
          "OCC_CODE_99" : "99",
          "OCC_CODE_89" : "89",
          "OCC_CODE_48" : "48",
          "OCC_CODE_60" : "60",
          "OCC_CODE_49" : "49",
          "OCC_CODE_341" : "341",
          "OCC_CODE_693" : "693",
          "OCC_CODE_782" : "782",
          "OCC_CODE_783" : "783",
          "OCC_CODE_784" : "784",
          "OCC_CODE_193" : "193",
          "OCC_CODE_107" : "107",
          "OCC_CODE_785" : "785",
          "OCC_CODE_250" : "250",
          "OCC_CODE_194" : "194",
          "OCC_CODE_786" : "786",
          "OCC_CODE_616" : "616",
          "OCC_CODE_787" : "787",
          "OCC_CODE_791" : "791",
          "OCC_CODE_788" : "788",
          "OCC_CODE_793" : "793",
          "OCC_CODE_790" : "790",
          "OCC_CODE_792" : "792",
          "OCC_CODE_766" : "766",
          "OCC_CODE_215" : "215",
          "OCC_CODE_666" : "666",
          "OCC_CODE_319" : "319",
          "OCC_CODE_794" : "794",
          "OCC_CODE_733" : "733",
          "OCC_CODE_103" : "103",
          "OCC_CODE_182" : "182",
          "OCC_CODE_637" : "637",
          "OCC_CODE_217" : "217",
          "OCC_CODE_795" : "795",
          "OCC_CODE_186" : "186",
          "OCC_CODE_796" : "796",
          "OCC_CODE_216" : "216",
          "OCC_CODE_797" : "797",
          "OCC_CODE_664" : "664",
          "OCC_CODE_188" : "188",
          "OCC_CODE_798" : "798",
          "OCC_CODE_726" : "726",
          "OCC_CODE_799" : "799",
          "OCC_CODE_759" : "759",
          "OCC_CODE_180" : "180",
          "OCC_CODE_800" : "800",
          "OCC_CODE_801" : "801",
          "OCC_CODE_802" : "802",
          "OCC_CODE_18" : "18",
          "OCC_CODE_379" : "379",
          "OCC_CODE_727" : "727",
          "OCC_CODE_104" : "104",
          "OCC_CODE_487" : "487",
          "OCC_CODE_803" : "803",
          "OCC_CODE_348" : "348",
          "OCC_CODE_262" : "262",
          "OCC_CODE_421" : "421",
          "OCC_CODE_628" : "628",
          "OCC_CODE_804" : "804",
          "OCC_CODE_806" : "806",
          "OCC_CODE_739" : "739",
          "OCC_CODE_206" : "206",
          "OCC_CODE_201" : "201",
          "OCC_CODE_205" : "205",
          "OCC_CODE_426" : "426",
          "OCC_CODE_331" : "331",
          "OCC_CODE_755" : "755",
          "OCC_CODE_885" : "885",
          "OCC_CODE_309" : "309",
          "OCC_CODE_213" : "213",
          "OCC_CODE_210" : "210",
          "OCC_CODE_204" : "204",
          "OCC_CODE_402" : "402",
          "OCC_CODE_661" : "661",
          "OCC_CODE_416" : "416",
          "OCC_CODE_808" : "808",
          "OCC_CODE_446" : "446",
          "OCC_CODE_245" : "245",
          "OCC_CODE_246" : "246",
          "OCC_CODE_486" : "486",
          "OCC_CODE_622" : "622",
          "OCC_CODE_212" : "212",
          "OCC_CODE_497" : "497",
          "OCC_CODE_500" : "500",
          "OCC_CODE_243" : "243",
          "OCC_CODE_743" : "743",
          "OCC_CODE_745" : "745",
          "OCC_CODE_810" : "810",
          "OCC_CODE_812" : "812",
          "OCC_CODE_941" : "941",
          "OCC_CODE_815" : "815",
          "OCC_CODE_814" : "814",
          "OCC_CODE_813" : "813",
          "OCC_CODE_816" : "816",
          "OCC_CODE_746" : "746",
          "OCC_CODE_259" : "259",
          "OCC_CODE_166" : "166",
          "OCC_CODE_153" : "153",
          "OCC_CODE_170" : "170",
          "OCC_CODE_403" : "403",
          "OCC_CODE_732" : "732",
          "OCC_CODE_264" : "264",
          "OCC_CODE_141" : "141",
          "OCC_CODE_140" : "140",
          "OCC_CODE_819" : "819",
          "OCC_CODE_224" : "224",
          "OCC_CODE_820" : "820",
          "OCC_CODE_211" : "211",
          "OCC_CODE_744" : "744",
          "OCC_CODE_495" : "495",
          "OCC_CODE_1" : "1",
          "OCC_CODE_750" : "750",
          "OCC_CODE_822" : "822",
          "OCC_CODE_823" : "823",
          "OCC_CODE_282" : "282",
          "OCC_CODE_634" : "634",
          "OCC_CODE_633" : "633",
          "OCC_CODE_760" : "760",
          "OCC_CODE_85" : "85",
          "OCC_CODE_R30" : "R30",
          "OCC_CODE_671" : "671",
          "OCC_CODE_767" : "767",
          "OCC_CODE_404" : "404",
          "OCC_CODE_824" : "824",
          "OCC_CODE_826" : "826",
          "OCC_CODE_489" : "489",
          "OCC_CODE_285" : "285",
          "OCC_CODE_190" : "190",
          "OCC_CODE_827" : "827",
          "OCC_CODE_79" : "79",
          "OCC_CODE_828" : "828",
          "OCC_CODE_121" : "121",
          "OCC_CODE_829" : "829",
          "OCC_CODE_118" : "118",
          "OCC_CODE_120" : "120",
          "OCC_CODE_830" : "830",
          "OCC_CODE_277" : "277",
          "OCC_CODE_831" : "831",
          "OCC_CODE_462" : "462",
          "OCC_CODE_463" : "463",
          "OCC_CODE_832" : "832",
          "OCC_CODE_377" : "377",
          "OCC_CODE_738" : "738",
          "OCC_CODE_833" : "833",
          "OCC_CODE_834" : "834",
          "OCC_CODE_837" : "837",
          "OCC_CODE_636" : "636",
          "OCC_CODE_58" : "58",
          "OCC_CODE_129" : "129",
          "OCC_CODE_127" : "127",
          "OCC_CODE_284" : "284",
          "OCC_CODE_754" : "754",
          "OCC_CODE_130" : "130",
          "OCC_CODE_290" : "290",
          "OCC_CODE_155" : "155",
          "OCC_CODE_295" : "295",
          "OCC_CODE_296" : "296",
          "OCC_CODE_692" : "692",
          "OCC_CODE_753" : "753",
          "OCC_CODE_691" : "691",
          "OCC_CODE_690" : "690",
          "OCC_CODE_838" : "838",
          "OCC_CODE_158" : "158",
          "OCC_CODE_734" : "734",
          "OCC_CODE_700" : "700",
          "OCC_CODE_313" : "313",
          "OCC_CODE_841" : "841",
          "OCC_CODE_718" : "718",
          "OCC_CODE_843" : "843",
          "OCC_CODE_847" : "847",
          "OCC_CODE_840" : "840",
          "OCC_CODE_704" : "704",
          "OCC_CODE_701" : "701",
          "OCC_CODE_844" : "844",
          "OCC_CODE_845" : "845",
          "OCC_CODE_851" : "851",
          "OCC_CODE_371" : "371",
          "OCC_CODE_855" : "855",
          "OCC_CODE_54" : "54",
          "OCC_CODE_702" : "702",
          "OCC_CODE_715" : "715",
          "OCC_CODE_86" : "86",
          "OCC_CODE_32" : "32",
          "OCC_CODE_716" : "716",
          "OCC_CODE_717" : "717",
          "OCC_CODE_19" : "19",
          "OCC_CODE_849" : "849",
          "OCC_CODE_87" : "87",
          "OCC_CODE_705" : "705",
          "OCC_CODE_707" : "707",
          "OCC_CODE_708" : "708",
          "OCC_CODE_709" : "709",
          "OCC_CODE_710" : "710",
          "OCC_CODE_711" : "711",
          "OCC_CODE_846" : "846",
          "OCC_CODE_712" : "712",
          "OCC_CODE_641" : "641",
          "OCC_CODE_27" : "27",
          "OCC_CODE_713" : "713",
          "OCC_CODE_714" : "714",
          "OCC_CODE_706" : "706",
          "OCC_CODE_373" : "373",
          "OCC_CODE_332" : "332",
          "OCC_CODE_839" : "839",
          "OCC_CODE_327" : "327",
          "OCC_CODE_248" : "248",
          "OCC_CODE_848" : "848",
          "OCC_CODE_517" : "517",
          "OCC_CODE_719" : "719",
          "OCC_CODE_852" : "852",
          "OCC_CODE_854" : "854",
          "OCC_CODE_40" : "40",
          "OCC_CODE_518" : "518",
          "OCC_CODE_521" : "521",
          "OCC_CODE_519" : "519",
          "OCC_CODE_522" : "522",
          "OCC_CODE_520" : "520",
          "OCC_CODE_292" : "292",
          "OCC_CODE_737" : "737",
          "OCC_CODE_643" : "643",
          "OCC_CODE_374" : "374",
          "OCC_CODE_942" : "942",
          "OCC_CODE_857" : "857",
          "OCC_CODE_680" : "680",
          "OCC_CODE_681" : "681",
          "OCC_CODE_859" : "859",
          "OCC_CODE_860" : "860",
          "OCC_CODE_686" : "686",
          "OCC_CODE_152" : "152",
          "OCC_CODE_725" : "725",
          "OCC_CODE_687" : "687",
          "OCC_CODE_742" : "742",
          "OCC_CODE_730" : "730",
          "OCC_CODE_5" : "5",
          "OCC_CODE_861" : "861",
          "OCC_CODE_862" : "862",
          "OCC_CODE_493" : "493",
          "OCC_CODE_167" : "167",
          "OCC_CODE_257" : "257",
          "OCC_CODE_276" : "276",
          "OCC_CODE_171" : "171",
          "OCC_CODE_168" : "168",
          "OCC_CODE_864" : "864",
          "OCC_CODE_863" : "863",
          "OCC_CODE_736" : "736",
          "OCC_CODE_174" : "174",
          "OCC_CODE_175" : "175",
          "OCC_CODE_25" : "25",
          "OCC_CODE_78" : "78",
          "OCC_CODE_865" : "865",
          "OCC_CODE_26" : "26",
          "OCC_CODE_866" : "866",
          "OCC_CODE_868" : "868",
          "OCC_CODE_92" : "92",
          "OCC_CODE_195" : "195",
          "OCC_CODE_871" : "871",
          "OCC_CODE_731" : "731",
          "OCC_CODE_321" : "321",
          "OCC_CODE_136" : "136",
          "OCC_CODE_466" : "466",
          "OCC_CODE_143" : "143",
          "OCC_CODE_873" : "873",
          "OCC_CODE_872" : "872",
          "OCC_CODE_258" : "258",
          "OCC_CODE_935" : "935",
          "OCC_CODE_328" : "328",
          "OCC_CODE_929" : "929",
          "OCC_CODE_251" : "251",
          "OCC_CODE_930" : "930",
          "OCC_CODE_874" : "874",
          "OCC_CODE_875" : "875",
          "OCC_CODE_560" : "560",
          "OCC_CODE_931" : "931",
          "OCC_CODE_933" : "933",
          "OCC_CODE_663" : "663",
          "OCC_CODE_936" : "936",
          "OCC_CODE_442" : "442",
          "OCC_CODE_443" : "443",
          "OCC_CODE_748" : "748",
          "OCC_CODE_876" : "876",
          "OCC_CODE_877" : "877",
          "OCC_CODE_260" : "260",
          "OCC_CODE_51" : "51",
          "OCC_CODE_325" : "325",
          "OCC_CODE_722" : "722",
          "OCC_CODE_326" : "326",
          "OCC_CODE_56" : "56",
          "OCC_CODE_878" : "878",
          "OCC_CODE_879" : "879",
          "OCC_CODE_160" : "160",
          "OCC_CODE_218" : "218",
          "OCC_CODE_881" : "881",
          "OCC_CODE_400" : "400",
          "OCC_CODE_88" : "88",
          "OCC_CODE_269" : "269",
          "OCC_CODE_882" : "882",
          "OCC_CODE_100" : "100",
          "OCC_CODE_883" : "883",
          "OCC_CODE_382" : "382",
          "OCC_CODE_381" : "381",
          "OCC_CODE_163" : "163",
          "OCC_CODE_110" : "110",
          "OCC_CODE_9" : "9",
          "OCC_CODE_340" : "340",
          "OCC_CODE_720" : "720",
          "OCC_CODE_721" : "721",
          "OCC_CODE_938" : "938",
          "OCC_CODE_413" : "413",
          "OCC_CODE_98" : "98",
          "OCC_CODE_943" : "943",
          "OCC_CODE_97" : "97",
          "OCC_CODE_203" : "203",
          "OCC_CODE_427" : "427",
          "OCC_CODE_139" : "139",
          "OCC_CODE_949" : "949",
          "OCC_CODE_950" : "950",
          "OCC_CODE_723" : "723",
          "OCC_CODE_951" : "951",
          "OCC_CODE_735" : "735",
          "OCC_CODE_177" : "177",
          "OCC_CODE_609" : "609",
          "OCC_CODE_457" : "457",
          "OCC_CODE_279" : "279",
          "OCC_CODE_761" : "761",
          "OCC_CODE_45" : "45",
          "OCC_CODE_70" : "70",
          "OCC_CODE_944" : "944",
          "OCC_CODE_898" : "898",
          "OCC_CODE_899" : "899",
          "OCC_CODE_306" : "306",
          "OCC_CODE_345" : "345",
          "OCC_CODE_624" : "624",
          "OCC_CODE_164" : "164",
          "OCC_CODE_181" : "181",
          "OCC_CODE_900" : "900",
          "OCC_CODE_765" : "765",
          "OCC_CODE_902" : "902",
          "OCC_CODE_901" : "901",
          "OCC_CODE_679" : "679",
          "OCC_CODE_114" : "114",
          "OCC_CODE_561" : "561",
          "OCC_CODE_458" : "458",
          "OCC_CODE_903" : "903",
          "OCC_CODE_392" : "392",
          "OCC_CODE_444" : "444",
          "OCC_CODE_947" : "947",
          "OCC_CODE_945" : "945",
          "OCC_CODE_749" : "749",
          "OCC_CODE_428" : "428",
          "OCC_CODE_682" : "682",
          "OCC_CODE_911" : "911",
          "OCC_CODE_294" : "294",
          "OCC_CODE_908" : "908",
          "OCC_CODE_909" : "909",
          "OCC_CODE_225" : "225",
          "OCC_CODE_907" : "907",
          "OCC_CODE_266" : "266",
          "OCC_CODE_288" : "288",
          "OCC_CODE_475" : "475",
          "OCC_CODE_291" : "291",
          "OCC_CODE_914" : "914",
          "OCC_CODE_411" : "411",
          "OCC_CODE_763" : "763",
          "OCC_CODE_912" : "912",
          "OCC_CODE_165" : "165",
          "OCC_CODE_948" : "948",
          "OCC_CODE_685" : "685",
          "OCC_CODE_762" : "762",
          "OCC_CODE_910" : "910",
          "OCC_CODE_913" : "913",
          "OCC_CODE_953" : "953",
          "OCC_CODE_656" : "656",
          "OCC_CODE_102" : "102",
          "OCC_CODE_523" : "523",
          "OCC_CODE_375" : "375",
          "OCC_CODE_915" : "915",
          "OCC_CODE_62" : "62",
          "OCC_CODE_659" : "659",
          "OCC_CODE_105" : "105",
          "OCC_CODE_757" : "757",
          "OCC_CODE_916" : "916",
          "OCC_CODE_917" : "917",
          "OCC_CODE_920" : "920",
          "OCC_CODE_342" : "342",
          "OCC_CODE_376" : "376",
          "OCC_CODE_764" : "764",
          "OCC_CODE_344" : "344",
          "OCC_CODE_918" : "918",
          "OCC_CODE_8" : "8",
          "OCC_CODE_370" : "370",
          "OCC_CODE_922" : "922",
          "OCC_CODE_756" : "756",
          "OCC_CODE_41" : "41",
          "OCC_CODE_38" : "38",
          "OCC_CODE_923" : "923",
          "OCC_CODE_42" : "42",
          "OCC_CODE_924" : "924",
          "OCC_CODE_758" : "758",
          "OCC_CODE_76" : "76",
          "OCC_CODE_926" : "926",
          "OCC_CODE_927" : "927",
          "OCC_CODE_928" : "928",
          "OCC_CODE_672" : "672",
          "OCC_CODE_614" : "614"
        }
      },
      "specRestrictTbl" : {
        "columns" : [ "issueState", "specialRestrictionEmployee" ],
        "rows" : [ [ "AL", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "AL", "STUDENT" ], [ "AL", "NONE" ], [ "AK", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "AK", "STUDENT" ], [ "AK", "NONE" ], [ "AZ", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "AZ", "STUDENT" ], [ "AZ", "NONE" ], [ "AR", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "AR", "STUDENT" ], [ "AR", "NONE" ], [ "CA", "CALSTRS_OR_CALPERS_ELIGIBILITY" ], [ "CA", "STATE_DI_ELIGIBILITY" ], [ "CA", "NONE" ], [ "CO", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "CO", "STUDENT" ], [ "CO", "NONE" ], [ "CT", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "CT", "STUDENT" ], [ "CT", "NONE" ], [ "DE", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "DE", "STUDENT" ], [ "DE", "NONE" ], [ "DC", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "DC", "STUDENT" ], [ "DC", "NONE" ], [ "FL", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "FL", "STUDENT" ], [ "FL", "NONE" ], [ "GA", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "GA", "STUDENT" ], [ "GA", "NONE" ], [ "HI", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "HI", "STATE_DI_ELIGIBILITY" ], [ "HI", "STUDENT" ], [ "HI", "NONE" ], [ "ID", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "ID", "STUDENT" ], [ "ID", "NONE" ], [ "IL", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "IL", "STUDENT" ], [ "IL", "NONE" ], [ "IN", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "IN", "STUDENT" ], [ "IN", "NONE" ], [ "IA", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "IA", "STUDENT" ], [ "IA", "NONE" ], [ "KS", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "KS", "STUDENT" ], [ "KS", "NONE" ], [ "KY", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "KY", "STUDENT" ], [ "KY", "NONE" ], [ "LA", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "LA", "STUDENT" ], [ "LA", "NONE" ], [ "ME", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "ME", "STUDENT" ], [ "ME", "NONE" ], [ "MD", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "MD", "STUDENT" ], [ "MD", "NONE" ], [ "MA", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "MA", "STUDENT" ], [ "MA", "NONE" ], [ "MI", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "MI", "STUDENT" ], [ "MI", "NONE" ], [ "MN", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "MN", "STUDENT" ], [ "MN", "NONE" ], [ "MS", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "MS", "STUDENT" ], [ "MS", "NONE" ], [ "MO", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "MO", "STUDENT" ], [ "MO", "NONE" ], [ "MT", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "MT", "STUDENT" ], [ "MT", "NONE" ], [ "NE", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "NE", "STUDENT" ], [ "NE", "NONE" ], [ "NV", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "NV", "STUDENT" ], [ "NV", "NONE" ], [ "NH", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "NH", "STUDENT" ], [ "NH", "NONE" ], [ "NJ", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "NJ", "STATE_DI_ELIGIBILITY" ], [ "NJ", "STUDENT" ], [ "NJ", "NONE" ], [ "NM", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "NM", "STUDENT" ], [ "NM", "NONE" ], [ "NY", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "NY", "STATE_DI_ELIGIBILITY" ], [ "NY", "STUDENT" ], [ "NY", "NONE" ], [ "NC", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "NC", "STUDENT" ], [ "NC", "NONE" ], [ "ND", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "ND", "STUDENT" ], [ "ND", "NONE" ], [ "OH", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "OH", "STUDENT" ], [ "OH", "NONE" ], [ "OK", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "OK", "STUDENT" ], [ "OK", "NONE" ], [ "OR", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "OR", "STUDENT" ], [ "OR", "NONE" ], [ "PA", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "PA", "STUDENT" ], [ "PA", "NONE" ], [ "PR", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "PR", "STATE_DI_ELIGIBILITY" ], [ "PR", "STUDENT" ], [ "PR", "NONE" ], [ "RI", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "RI", "STATE_DI_ELIGIBILITY" ], [ "RI", "STUDENT" ], [ "RI", "NONE" ], [ "SC", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "SC", "STUDENT" ], [ "SC", "NONE" ], [ "SD", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "SD", "STUDENT" ], [ "SD", "NONE" ], [ "TN", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "TN", "STUDENT" ], [ "TN", "NONE" ], [ "TX", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "TX", "STUDENT" ], [ "TX", "NONE" ], [ "UT", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "UT", "STUDENT" ], [ "UT", "NONE" ], [ "VT", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "VT", "STUDENT" ], [ "VT", "NONE" ], [ "VI", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "VI", "STUDENT" ], [ "VI", "NONE" ], [ "VA", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "VA", "STUDENT" ], [ "VA", "NONE" ], [ "WA", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "WA", "STUDENT" ], [ "WA", "NONE" ], [ "WV", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "WV", "STUDENT" ], [ "WV", "NONE" ], [ "WI", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "WI", "STUDENT" ], [ "WI", "NONE" ], [ "WY", "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" ], [ "WY", "STUDENT" ], [ "WY", "NONE" ] ],
        "displayValues" : {
          "GOVERNMENT_FEDERAL_COUNTY_STATE_AND_MUNICIPAL" : "Government (Federal, County, State and Municipal)",
          "STUDENT" : "Student",
          "NONE" : "None",
          "CALSTRS_OR_CALPERS_ELIGIBILITY" : "CALSTRS or CALPERS Eligibility",
          "STATE_DI_ELIGIBILITY" : "State DI Eligibility"
        }
      },
      "incomeGrpBuyEe" : {
        "columns" : [ "annualEarnedIncome", "total" ],
        "rows" : [ [ "15000", "1000" ], [ "17000", "1100" ], [ "19000", "1200" ], [ "21000", "1300" ], [ "23000", "1500" ], [ "25000", "1600" ], [ "27000", "1600" ], [ "29000", "1700" ], [ "31000", "1900" ], [ "33000", "1900" ], [ "35000", "2100" ], [ "37000", "2200" ], [ "39000", "2200" ], [ "41000", "2500" ], [ "43000", "2500" ], [ "45000", "2600" ], [ "47000", "2600" ], [ "50000", "3000" ], [ "52000", "3100" ], [ "54000", "3100" ], [ "56000", "3200" ], [ "58000", "3200" ], [ "60000", "3600" ], [ "62000", "3600" ], [ "64000", "3600" ], [ "66000", "3700" ], [ "68000", "3700" ], [ "70000", "4200" ], [ "72000", "4200" ], [ "75000", "4400" ], [ "80000", "4600" ], [ "85000", "4700" ], [ "90000", "5100" ], [ "95000", "5200" ], [ "100000", "5700" ], [ "105000", "5800" ], [ "110000", "6300" ], [ "115000", "6400" ], [ "120000", "6800" ], [ "125000", "7000" ], [ "130000", "7300" ], [ "135000", "7500" ], [ "140000", "8000" ], [ "145000", "8100" ], [ "150000", "8500" ], [ "155000", "8600" ], [ "160000", "9000" ], [ "165000", "9100" ], [ "170000", "9500" ], [ "175000", "9600" ], [ "180000", "10000" ], [ "185000", "10200" ], [ "190000", "10500" ], [ "195000", "10600" ], [ "200000", "11000" ], [ "210000", "11600" ], [ "220000", "12100" ], [ "230000", "12600" ], [ "240000", "13100" ], [ "250000", "13600" ], [ "260000", "14200" ], [ "270000", "14700" ], [ "280000", "15200" ], [ "290000", "15700" ], [ "300000", "16300" ], [ "325000", "17500" ], [ "350000", "18900" ], [ "375000", "20100" ], [ "400000", "21500" ], [ "425000", "22700" ], [ "450000", "23900" ], [ "475000", "25000" ], [ "500000", "26600" ], [ "525000", "27600" ], [ "550000", "28800" ], [ "575000", "29700" ], [ "600000", "30000" ], [ "625000", "30600" ], [ "650000", "31400" ], [ "675000", "32200" ], [ "700000", "33000" ], [ "725000", "34000" ], [ "750000", "35000" ], [ "775000", "35000" ], [ "800000", "35000" ], [ "825000", "35000" ], [ "850000", "35000" ], [ "875000", "35000" ], [ "900000", "35000" ], [ "925000", "35000" ], [ "950000", "35000" ], [ "975000", "35000" ], [ "1000000", "35000" ], [ "1050000", "35000" ], [ "1100000", "35000" ], [ "1150000", "35000" ], [ "1200000", "35000" ] ],
        "displayValues" : {
          "1000" : "1000",
          "1100" : "1100",
          "1200" : "1200",
          "1300" : "1300",
          "1500" : "1500",
          "1600" : "1600",
          "1700" : "1700",
          "1900" : "1900",
          "2100" : "2100",
          "2200" : "2200",
          "2500" : "2500",
          "2600" : "2600",
          "3000" : "3000",
          "3100" : "3100",
          "3200" : "3200",
          "3600" : "3600",
          "3700" : "3700",
          "4200" : "4200",
          "4400" : "4400",
          "4600" : "4600",
          "4700" : "4700",
          "5100" : "5100",
          "5200" : "5200",
          "5700" : "5700",
          "5800" : "5800",
          "6300" : "6300",
          "6400" : "6400",
          "6800" : "6800",
          "7000" : "7000",
          "7300" : "7300",
          "7500" : "7500",
          "8000" : "8000",
          "8100" : "8100",
          "8500" : "8500",
          "8600" : "8600",
          "9000" : "9000",
          "9100" : "9100",
          "9500" : "9500",
          "9600" : "9600",
          "10000" : "10000",
          "10200" : "10200",
          "10500" : "10500",
          "10600" : "10600",
          "11000" : "11000",
          "11600" : "11600",
          "12100" : "12100",
          "12600" : "12600",
          "13100" : "13100",
          "13600" : "13600",
          "14200" : "14200",
          "14700" : "14700",
          "15200" : "15200",
          "15700" : "15700",
          "16300" : "16300",
          "17500" : "17500",
          "18900" : "18900",
          "20100" : "20100",
          "21500" : "21500",
          "22700" : "22700",
          "23900" : "23900",
          "25000" : "25000",
          "26600" : "26600",
          "27600" : "27600",
          "28800" : "28800",
          "29700" : "29700",
          "30000" : "30000",
          "30600" : "30600",
          "31400" : "31400",
          "32200" : "32200",
          "33000" : "33000",
          "34000" : "34000",
          "35000" : "35000"
        }
      },
      "incomeGrpEr" : {
        "columns" : [ "annualEarnedIncome", "total" ],
        "rows" : [ [ "15000", "1100" ], [ "17000", "1200" ], [ "19000", "1300" ], [ "21000", "1400" ], [ "23000", "1500" ], [ "25000", "1600" ], [ "27000", "1700" ], [ "29000", "1800" ], [ "31000", "2000" ], [ "33000", "2100" ], [ "35000", "2300" ], [ "37000", "2500" ], [ "39000", "2500" ], [ "41000", "2800" ], [ "43000", "2800" ], [ "45000", "3000" ], [ "47000", "3000" ], [ "50000", "3400" ], [ "52000", "3600" ], [ "54000", "3600" ], [ "56000", "3700" ], [ "58000", "3700" ], [ "60000", "4200" ], [ "62000", "4200" ], [ "64000", "4200" ], [ "66000", "4300" ], [ "68000", "4300" ], [ "70000", "4800" ], [ "72000", "4800" ], [ "75000", "5000" ], [ "80000", "5500" ], [ "85000", "5600" ], [ "90000", "5900" ], [ "95000", "6100" ], [ "100000", "6400" ], [ "105000", "6400" ], [ "110000", "6700" ], [ "115000", "6700" ], [ "120000", "7500" ], [ "125000", "7500" ], [ "130000", "7700" ], [ "135000", "7700" ], [ "140000", "8500" ], [ "145000", "8500" ], [ "150000", "8700" ], [ "155000", "8700" ], [ "160000", "9500" ], [ "165000", "9500" ], [ "170000", "9800" ], [ "175000", "9800" ], [ "180000", "10600" ], [ "185000", "10600" ], [ "190000", "10900" ], [ "195000", "10900" ], [ "200000", "11700" ], [ "210000", "12000" ], [ "220000", "12300" ], [ "230000", "13300" ], [ "240000", "13600" ], [ "250000", "14600" ], [ "260000", "14700" ], [ "270000", "14800" ], [ "280000", "15500" ], [ "290000", "15600" ], [ "300000", "16200" ], [ "325000", "16800" ], [ "350000", "18100" ], [ "375000", "18700" ], [ "400000", "19900" ], [ "425000", "20000" ], [ "450000", "20400" ], [ "475000", "20800" ], [ "500000", "21200" ], [ "525000", "21600" ], [ "550000", "22000" ], [ "575000", "22400" ], [ "600000", "22900" ], [ "625000", "23400" ], [ "650000", "23900" ], [ "675000", "24400" ], [ "700000", "24900" ], [ "725000", "25400" ], [ "750000", "26000" ], [ "775000", "26600" ], [ "800000", "27200" ], [ "825000", "27800" ], [ "850000", "28400" ], [ "875000", "29000" ], [ "900000", "29500" ], [ "925000", "30000" ], [ "950000", "30000" ], [ "975000", "30000" ], [ "1000000", "30000" ], [ "1050000", "30000" ], [ "1100000", "30000" ], [ "1150000", "30000" ], [ "1200000", "30000" ] ],
        "displayValues" : {
          "1100" : "1100",
          "1200" : "1200",
          "1300" : "1300",
          "1400" : "1400",
          "1500" : "1500",
          "1600" : "1600",
          "1700" : "1700",
          "1800" : "1800",
          "2000" : "2000",
          "2100" : "2100",
          "2300" : "2300",
          "2500" : "2500",
          "2800" : "2800",
          "3000" : "3000",
          "3400" : "3400",
          "3600" : "3600",
          "3700" : "3700",
          "4200" : "4200",
          "4300" : "4300",
          "4800" : "4800",
          "5000" : "5000",
          "5500" : "5500",
          "5600" : "5600",
          "5900" : "5900",
          "6100" : "6100",
          "6400" : "6400",
          "6700" : "6700",
          "7500" : "7500",
          "7700" : "7700",
          "8500" : "8500",
          "8700" : "8700",
          "9500" : "9500",
          "9800" : "9800",
          "10600" : "10600",
          "10900" : "10900",
          "11700" : "11700",
          "12000" : "12000",
          "12300" : "12300",
          "13300" : "13300",
          "13600" : "13600",
          "14600" : "14600",
          "14700" : "14700",
          "14800" : "14800",
          "15500" : "15500",
          "15600" : "15600",
          "16200" : "16200",
          "16800" : "16800",
          "18100" : "18100",
          "18700" : "18700",
          "19900" : "19900",
          "20000" : "20000",
          "20400" : "20400",
          "20800" : "20800",
          "21200" : "21200",
          "21600" : "21600",
          "22000" : "22000",
          "22400" : "22400",
          "22900" : "22900",
          "23400" : "23400",
          "23900" : "23900",
          "24400" : "24400",
          "24900" : "24900",
          "25400" : "25400",
          "26000" : "26000",
          "26600" : "26600",
          "27200" : "27200",
          "27800" : "27800",
          "28400" : "28400",
          "29000" : "29000",
          "29500" : "29500",
          "30000" : "30000"
        }
      },
      "incomeQualSisTbl" : {
        "columns" : [ "annualEarnedIncome", "sis" ],
        "rows" : [ [ "15000", "700" ], [ "17000", "800" ], [ "19000", "900" ], [ "21000", "1000" ], [ "23000", "1000" ], [ "25000", "1100" ], [ "27000", "1100" ], [ "29000", "1100" ], [ "31000", "1300" ], [ "33000", "1300" ], [ "35000", "1400" ], [ "37000", "1400" ], [ "39000", "1400" ], [ "41000", "1600" ], [ "43000", "1600" ], [ "45000", "1600" ], [ "47000", "1600" ], [ "50000", "1800" ], [ "52000", "1800" ], [ "54000", "1800" ], [ "56000", "1800" ], [ "58000", "1800" ], [ "60000", "1900" ], [ "62000", "2000" ], [ "64000", "2000" ], [ "66000", "2000" ], [ "68000", "2000" ], [ "70000", "2100" ], [ "72000", "2100" ], [ "75000", "2200" ], [ "80000", "2300" ], [ "85000", "2400" ], [ "90000", "2500" ], [ "95000", "2600" ], [ "100000", "2600" ], [ "105000", "2600" ], [ "110000", "2600" ], [ "115000", "2600" ], [ "120000", "2600" ], [ "125000", "2600" ], [ "130000", "2600" ], [ "135000", "2600" ], [ "140000", "2600" ], [ "145000", "2600" ], [ "150000", "2600" ], [ "155000", "2600" ], [ "160000", "2600" ], [ "165000", "2600" ], [ "170000", "2600" ], [ "175000", "2600" ], [ "180000", "2600" ], [ "185000", "2600" ], [ "190000", "2600" ], [ "195000", "2600" ], [ "200000", "2600" ], [ "210000", "2600" ], [ "220000", "2600" ], [ "230000", "2600" ], [ "240000", "2600" ], [ "250000", "2600" ], [ "260000", "2600" ], [ "270000", "2600" ], [ "280000", "2600" ], [ "290000", "2600" ], [ "300000", "2600" ], [ "325000", "2600" ], [ "350000", "2600" ], [ "375000", "2600" ], [ "400000", "2600" ], [ "425000", "2600" ], [ "450000", "2600" ], [ "475000", "2600" ], [ "500000", "2600" ], [ "525000", "2600" ], [ "550000", "2600" ], [ "575000", "2600" ], [ "600000", "2600" ], [ "625000", "2600" ], [ "650000", "2600" ], [ "675000", "2600" ], [ "700000", "2600" ], [ "725000", "2600" ], [ "750000", "2600" ], [ "775000", "2600" ], [ "800000", "2600" ], [ "825000", "2600" ], [ "850000", "2600" ], [ "875000", "2600" ], [ "900000", "2600" ], [ "925000", "2600" ], [ "950000", "2600" ], [ "975000", "2600" ], [ "1000000", "2600" ], [ "1050000", "2600" ], [ "1100000", "2600" ], [ "1150000", "2600" ], [ "1200000", "2600" ] ],
        "displayValues" : {
          "700" : "700",
          "800" : "800",
          "900" : "900",
          "1000" : "1000",
          "1100" : "1100",
          "1300" : "1300",
          "1400" : "1400",
          "1600" : "1600",
          "1800" : "1800",
          "1900" : "1900",
          "2000" : "2000",
          "2100" : "2100",
          "2200" : "2200",
          "2300" : "2300",
          "2400" : "2400",
          "2500" : "2500",
          "2600" : "2600"
        }
      },
      "incomeSeQualBaseTbl" : {
        "columns" : [ "annualEarnedIncome", "base" ],
        "rows" : [ [ "15000", "300" ], [ "17000", "300" ], [ "19000", "400" ], [ "21000", "400" ], [ "23000", "400" ], [ "25000", "600" ], [ "27000", "600" ], [ "29000", "600" ], [ "31000", "800" ], [ "33000", "1000" ], [ "35000", "1100" ], [ "37000", "1300" ], [ "39000", "1300" ], [ "41000", "1300" ], [ "43000", "1600" ], [ "45000", "1600" ], [ "47000", "1700" ], [ "50000", "2000" ], [ "52000", "2000" ], [ "54000", "2200" ], [ "56000", "2300" ], [ "58000", "2600" ], [ "60000", "2600" ], [ "62000", "2600" ], [ "64000", "2700" ], [ "66000", "2700" ], [ "68000", "3000" ], [ "70000", "3000" ], [ "72000", "3300" ], [ "75000", "3700" ], [ "80000", "3900" ], [ "85000", "4200" ], [ "90000", "4300" ], [ "95000", "4500" ], [ "100000", "5500" ], [ "105000", "5600" ], [ "110000", "5900" ], [ "115000", "6000" ], [ "120000", "6700" ], [ "125000", "6900" ], [ "130000", "6900" ], [ "135000", "7600" ], [ "140000", "7600" ], [ "145000", "7800" ], [ "150000", "8500" ], [ "155000", "8500" ], [ "160000", "8700" ], [ "165000", "8700" ], [ "170000", "9400" ], [ "175000", "9600" ], [ "180000", "9600" ], [ "185000", "9900" ], [ "190000", "9900" ], [ "195000", "10700" ], [ "200000", "10900" ], [ "210000", "11600" ], [ "220000", "11900" ], [ "230000", "12000" ], [ "240000", "12600" ], [ "250000", "13300" ], [ "260000", "13300" ], [ "270000", "13300" ], [ "280000", "13900" ], [ "290000", "13900" ], [ "300000", "15000" ], [ "325000", "15600" ], [ "350000", "16300" ], [ "375000", "17300" ], [ "400000", "17700" ], [ "425000", "18400" ], [ "450000", "18700" ], [ "475000", "19400" ], [ "500000", "20000" ], [ "525000", "20000" ], [ "550000", "20000" ], [ "575000", "20000" ], [ "600000", "20000" ], [ "625000", "20000" ], [ "650000", "20000" ], [ "675000", "20000" ], [ "700000", "20000" ], [ "725000", "20000" ], [ "750000", "20000" ], [ "775000", "20000" ], [ "800000", "20000" ], [ "825000", "20000" ], [ "850000", "20000" ], [ "875000", "20000" ], [ "900000", "20000" ], [ "925000", "20000" ], [ "950000", "20000" ], [ "975000", "20000" ], [ "1000000", "20000" ], [ "1050000", "20000" ], [ "1100000", "20000" ], [ "1150000", "20000" ], [ "1200000", "20000" ] ],
        "displayValues" : {
          "300" : "300",
          "400" : "400",
          "600" : "600",
          "800" : "800",
          "1000" : "1000",
          "1100" : "1100",
          "1300" : "1300",
          "1600" : "1600",
          "1700" : "1700",
          "2000" : "2000",
          "2200" : "2200",
          "2300" : "2300",
          "2600" : "2600",
          "2700" : "2700",
          "3000" : "3000",
          "3300" : "3300",
          "3700" : "3700",
          "3900" : "3900",
          "4200" : "4200",
          "4300" : "4300",
          "4500" : "4500",
          "5500" : "5500",
          "5600" : "5600",
          "5900" : "5900",
          "6000" : "6000",
          "6700" : "6700",
          "6900" : "6900",
          "7600" : "7600",
          "7800" : "7800",
          "8500" : "8500",
          "8700" : "8700",
          "9400" : "9400",
          "9600" : "9600",
          "9900" : "9900",
          "10700" : "10700",
          "10900" : "10900",
          "11600" : "11600",
          "11900" : "11900",
          "12000" : "12000",
          "12600" : "12600",
          "13300" : "13300",
          "13900" : "13900",
          "15000" : "15000",
          "15600" : "15600",
          "16300" : "16300",
          "17300" : "17300",
          "17700" : "17700",
          "18400" : "18400",
          "18700" : "18700",
          "19400" : "19400",
          "20000" : "20000"
        }
      },
      "incomeGrpErSe" : {
        "columns" : [ "annualEarnedIncome", "total" ],
        "rows" : [ [ "15000", "1100" ], [ "17000", "1200" ], [ "19000", "1300" ], [ "21000", "1400" ], [ "23000", "1500" ], [ "25000", "1600" ], [ "27000", "1700" ], [ "29000", "1800" ], [ "31000", "2000" ], [ "33000", "2500" ], [ "35000", "2800" ], [ "37000", "2800" ], [ "39000", "3000" ], [ "41000", "3000" ], [ "43000", "3600" ], [ "45000", "3600" ], [ "47000", "3700" ], [ "50000", "4200" ], [ "52000", "4200" ], [ "54000", "4200" ], [ "56000", "4300" ], [ "58000", "4800" ], [ "60000", "4800" ], [ "62000", "4800" ], [ "64000", "5000" ], [ "66000", "5000" ], [ "68000", "5500" ], [ "70000", "5500" ], [ "72000", "5600" ], [ "75000", "5900" ], [ "80000", "6100" ], [ "85000", "6400" ], [ "90000", "6400" ], [ "95000", "6700" ], [ "100000", "7500" ], [ "105000", "7500" ], [ "110000", "7700" ], [ "115000", "7700" ], [ "120000", "8500" ], [ "125000", "8700" ], [ "130000", "8700" ], [ "135000", "9500" ], [ "140000", "9500" ], [ "145000", "9800" ], [ "150000", "10600" ], [ "155000", "10600" ], [ "160000", "10900" ], [ "165000", "10900" ], [ "170000", "11700" ], [ "175000", "11800" ], [ "180000", "12000" ], [ "185000", "12300" ], [ "190000", "12300" ], [ "195000", "12900" ], [ "200000", "13600" ], [ "210000", "14000" ], [ "220000", "14300" ], [ "230000", "14800" ], [ "240000", "15500" ], [ "250000", "16200" ], [ "260000", "16200" ], [ "270000", "16200" ], [ "280000", "16800" ], [ "290000", "16800" ], [ "300000", "18100" ], [ "325000", "18700" ], [ "350000", "19900" ], [ "375000", "20400" ], [ "400000", "20800" ], [ "425000", "21200" ], [ "450000", "21600" ], [ "475000", "22000" ], [ "500000", "22900" ], [ "525000", "23400" ], [ "550000", "23900" ], [ "575000", "24400" ], [ "600000", "24900" ], [ "625000", "25400" ], [ "650000", "25900" ], [ "675000", "26400" ], [ "700000", "26900" ], [ "725000", "27400" ], [ "750000", "28000" ], [ "775000", "28600" ], [ "800000", "29200" ], [ "825000", "29800" ], [ "850000", "30000" ], [ "875000", "30000" ], [ "900000", "30000" ], [ "925000", "30000" ], [ "950000", "30000" ], [ "975000", "30000" ], [ "1000000", "30000" ], [ "1050000", "30000" ], [ "1100000", "30000" ], [ "1150000", "30000" ], [ "1200000", "30000" ] ],
        "displayValues" : {
          "1100" : "1100",
          "1200" : "1200",
          "1300" : "1300",
          "1400" : "1400",
          "1500" : "1500",
          "1600" : "1600",
          "1700" : "1700",
          "1800" : "1800",
          "2000" : "2000",
          "2500" : "2500",
          "2800" : "2800",
          "3000" : "3000",
          "3600" : "3600",
          "3700" : "3700",
          "4200" : "4200",
          "4300" : "4300",
          "4800" : "4800",
          "5000" : "5000",
          "5500" : "5500",
          "5600" : "5600",
          "5900" : "5900",
          "6100" : "6100",
          "6400" : "6400",
          "6700" : "6700",
          "7500" : "7500",
          "7700" : "7700",
          "8500" : "8500",
          "8700" : "8700",
          "9500" : "9500",
          "9800" : "9800",
          "10600" : "10600",
          "10900" : "10900",
          "11700" : "11700",
          "11800" : "11800",
          "12000" : "12000",
          "12300" : "12300",
          "12900" : "12900",
          "13600" : "13600",
          "14000" : "14000",
          "14300" : "14300",
          "14800" : "14800",
          "15500" : "15500",
          "16200" : "16200",
          "16800" : "16800",
          "18100" : "18100",
          "18700" : "18700",
          "19900" : "19900",
          "20400" : "20400",
          "20800" : "20800",
          "21200" : "21200",
          "21600" : "21600",
          "22000" : "22000",
          "22900" : "22900",
          "23400" : "23400",
          "23900" : "23900",
          "24400" : "24400",
          "24900" : "24900",
          "25400" : "25400",
          "25900" : "25900",
          "26400" : "26400",
          "26900" : "26900",
          "27400" : "27400",
          "28000" : "28000",
          "28600" : "28600",
          "29200" : "29200",
          "29800" : "29800",
          "30000" : "30000"
        }
      }
    }
  }